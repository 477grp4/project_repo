

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 29 18:10:25 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16LF1783
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0090                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0094                     	;# 
    90  0095                     	;# 
    91  0096                     	;# 
    92  0097                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009A                     	;# 
    96  009B                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  0111                     	;# 
   106  0112                     	;# 
   107  0113                     	;# 
   108  0114                     	;# 
   109  0115                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011D                     	;# 
   115  011D                     	;# 
   116  011E                     	;# 
   117  011F                     	;# 
   118  018C                     	;# 
   119  018D                     	;# 
   120  0191                     	;# 
   121  0191                     	;# 
   122  0192                     	;# 
   123  0193                     	;# 
   124  0193                     	;# 
   125  0193                     	;# 
   126  0194                     	;# 
   127  0195                     	;# 
   128  0196                     	;# 
   129  0197                     	;# 
   130  0199                     	;# 
   131  0199                     	;# 
   132  0199                     	;# 
   133  019A                     	;# 
   134  019A                     	;# 
   135  019A                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019C                     	;# 
   142  019C                     	;# 
   143  019C                     	;# 
   144  019D                     	;# 
   145  019D                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019E                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  019F                     	;# 
   152  019F                     	;# 
   153  019F                     	;# 
   154  019F                     	;# 
   155  020C                     	;# 
   156  020D                     	;# 
   157  020E                     	;# 
   158  0210                     	;# 
   159  0211                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0212                     	;# 
   163  0213                     	;# 
   164  0213                     	;# 
   165  0214                     	;# 
   166  0214                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0216                     	;# 
   171  0216                     	;# 
   172  0217                     	;# 
   173  0217                     	;# 
   174  028C                     	;# 
   175  028D                     	;# 
   176  028E                     	;# 
   177  0291                     	;# 
   178  0291                     	;# 
   179  0292                     	;# 
   180  0293                     	;# 
   181  0298                     	;# 
   182  0298                     	;# 
   183  0299                     	;# 
   184  029A                     	;# 
   185  030C                     	;# 
   186  030D                     	;# 
   187  030E                     	;# 
   188  038C                     	;# 
   189  038D                     	;# 
   190  038E                     	;# 
   191  0390                     	;# 
   192  0391                     	;# 
   193  0392                     	;# 
   194  0393                     	;# 
   195  0394                     	;# 
   196  0395                     	;# 
   197  0396                     	;# 
   198  0397                     	;# 
   199  0398                     	;# 
   200  0399                     	;# 
   201  039D                     	;# 
   202  039E                     	;# 
   203  039F                     	;# 
   204  0511                     	;# 
   205  0513                     	;# 
   206  051A                     	;# 
   207  0811                     	;# 
   208  0812                     	;# 
   209  0813                     	;# 
   210  0814                     	;# 
   211  0815                     	;# 
   212  0816                     	;# 
   213  0817                     	;# 
   214  0818                     	;# 
   215  0819                     	;# 
   216  081A                     	;# 
   217  081B                     	;# 
   218  081C                     	;# 
   219  081D                     	;# 
   220  081E                     	;# 
   221  081F                     	;# 
   222  0820                     	;# 
   223  0821                     	;# 
   224  0821                     	;# 
   225  0822                     	;# 
   226  0823                     	;# 
   227  0823                     	;# 
   228  0824                     	;# 
   229  0825                     	;# 
   230  0825                     	;# 
   231  0826                     	;# 
   232  0827                     	;# 
   233  0827                     	;# 
   234  0828                     	;# 
   235  0829                     	;# 
   236  082A                     	;# 
   237  082B                     	;# 
   238  082C                     	;# 
   239  082D                     	;# 
   240  082E                     	;# 
   241  082F                     	;# 
   242  0831                     	;# 
   243  0832                     	;# 
   244  0833                     	;# 
   245  0834                     	;# 
   246  0835                     	;# 
   247  0836                     	;# 
   248  0837                     	;# 
   249  0838                     	;# 
   250  0839                     	;# 
   251  083A                     	;# 
   252  083B                     	;# 
   253  083C                     	;# 
   254  083D                     	;# 
   255  083E                     	;# 
   256  083F                     	;# 
   257  0840                     	;# 
   258  0841                     	;# 
   259  0841                     	;# 
   260  0842                     	;# 
   261  0843                     	;# 
   262  0843                     	;# 
   263  0844                     	;# 
   264  0845                     	;# 
   265  0845                     	;# 
   266  0846                     	;# 
   267  0847                     	;# 
   268  0847                     	;# 
   269  0848                     	;# 
   270  0849                     	;# 
   271  084A                     	;# 
   272  084B                     	;# 
   273  084C                     	;# 
   274  084D                     	;# 
   275  084E                     	;# 
   276  084F                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  0090                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0094                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009B                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  009F                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  0111                     	;# 
   339  0112                     	;# 
   340  0113                     	;# 
   341  0114                     	;# 
   342  0115                     	;# 
   343  0116                     	;# 
   344  0117                     	;# 
   345  0118                     	;# 
   346  0119                     	;# 
   347  011D                     	;# 
   348  011D                     	;# 
   349  011E                     	;# 
   350  011F                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  0191                     	;# 
   354  0191                     	;# 
   355  0192                     	;# 
   356  0193                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0194                     	;# 
   360  0195                     	;# 
   361  0196                     	;# 
   362  0199                     	;# 
   363  0199                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019A                     	;# 
   367  019A                     	;# 
   368  019B                     	;# 
   369  019B                     	;# 
   370  019B                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019C                     	;# 
   374  019C                     	;# 
   375  019C                     	;# 
   376  019D                     	;# 
   377  019D                     	;# 
   378  019D                     	;# 
   379  019E                     	;# 
   380  019E                     	;# 
   381  019E                     	;# 
   382  019F                     	;# 
   383  019F                     	;# 
   384  019F                     	;# 
   385  019F                     	;# 
   386  019F                     	;# 
   387  020C                     	;# 
   388  020D                     	;# 
   389  020E                     	;# 
   390  0210                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  028C                     	;# 
   407  028D                     	;# 
   408  028E                     	;# 
   409  0291                     	;# 
   410  0291                     	;# 
   411  0292                     	;# 
   412  0293                     	;# 
   413  0298                     	;# 
   414  0298                     	;# 
   415  0299                     	;# 
   416  029A                     	;# 
   417  030C                     	;# 
   418  030D                     	;# 
   419  030E                     	;# 
   420  038C                     	;# 
   421  038D                     	;# 
   422  038E                     	;# 
   423  0390                     	;# 
   424  0391                     	;# 
   425  0392                     	;# 
   426  0393                     	;# 
   427  0394                     	;# 
   428  0395                     	;# 
   429  0396                     	;# 
   430  0397                     	;# 
   431  0398                     	;# 
   432  0399                     	;# 
   433  039D                     	;# 
   434  039E                     	;# 
   435  039F                     	;# 
   436  0511                     	;# 
   437  0513                     	;# 
   438  051A                     	;# 
   439  0811                     	;# 
   440  0812                     	;# 
   441  0813                     	;# 
   442  0814                     	;# 
   443  0815                     	;# 
   444  0816                     	;# 
   445  0817                     	;# 
   446  0818                     	;# 
   447  0819                     	;# 
   448  081A                     	;# 
   449  081B                     	;# 
   450  081C                     	;# 
   451  081D                     	;# 
   452  081E                     	;# 
   453  081F                     	;# 
   454  0820                     	;# 
   455  0821                     	;# 
   456  0821                     	;# 
   457  0822                     	;# 
   458  0823                     	;# 
   459  0823                     	;# 
   460  0824                     	;# 
   461  0825                     	;# 
   462  0825                     	;# 
   463  0826                     	;# 
   464  0827                     	;# 
   465  0827                     	;# 
   466  0828                     	;# 
   467  0829                     	;# 
   468  082A                     	;# 
   469  082B                     	;# 
   470  082C                     	;# 
   471  082D                     	;# 
   472  082E                     	;# 
   473  082F                     	;# 
   474  0831                     	;# 
   475  0832                     	;# 
   476  0833                     	;# 
   477  0834                     	;# 
   478  0835                     	;# 
   479  0836                     	;# 
   480  0837                     	;# 
   481  0838                     	;# 
   482  0839                     	;# 
   483  083A                     	;# 
   484  083B                     	;# 
   485  083C                     	;# 
   486  083D                     	;# 
   487  083E                     	;# 
   488  083F                     	;# 
   489  0840                     	;# 
   490  0841                     	;# 
   491  0841                     	;# 
   492  0842                     	;# 
   493  0843                     	;# 
   494  0843                     	;# 
   495  0844                     	;# 
   496  0845                     	;# 
   497  0845                     	;# 
   498  0846                     	;# 
   499  0847                     	;# 
   500  0847                     	;# 
   501  0848                     	;# 
   502  0849                     	;# 
   503  084A                     	;# 
   504  084B                     	;# 
   505  084C                     	;# 
   506  084D                     	;# 
   507  084E                     	;# 
   508  084F                     	;# 
   509  0FE4                     	;# 
   510  0FE5                     	;# 
   511  0FE6                     	;# 
   512  0FE7                     	;# 
   513  0FE8                     	;# 
   514  0FE9                     	;# 
   515  0FEA                     	;# 
   516  0FEB                     	;# 
   517  0FED                     	;# 
   518  0FEE                     	;# 
   519  0FEF                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  0010                     	;# 
   536  0011                     	;# 
   537  0012                     	;# 
   538  0014                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0016                     	;# 
   542  0017                     	;# 
   543  0018                     	;# 
   544  0019                     	;# 
   545  001A                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0090                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0094                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0097                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009A                     	;# 
   561  009B                     	;# 
   562  009B                     	;# 
   563  009C                     	;# 
   564  009D                     	;# 
   565  009E                     	;# 
   566  009F                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0111                     	;# 
   571  0112                     	;# 
   572  0113                     	;# 
   573  0114                     	;# 
   574  0115                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  0118                     	;# 
   578  0119                     	;# 
   579  011D                     	;# 
   580  011D                     	;# 
   581  011E                     	;# 
   582  011F                     	;# 
   583  018C                     	;# 
   584  018D                     	;# 
   585  0191                     	;# 
   586  0191                     	;# 
   587  0192                     	;# 
   588  0193                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0199                     	;# 
   595  0199                     	;# 
   596  0199                     	;# 
   597  019A                     	;# 
   598  019A                     	;# 
   599  019A                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019C                     	;# 
   607  019C                     	;# 
   608  019D                     	;# 
   609  019D                     	;# 
   610  019D                     	;# 
   611  019E                     	;# 
   612  019E                     	;# 
   613  019E                     	;# 
   614  019F                     	;# 
   615  019F                     	;# 
   616  019F                     	;# 
   617  019F                     	;# 
   618  019F                     	;# 
   619  020C                     	;# 
   620  020D                     	;# 
   621  020E                     	;# 
   622  0210                     	;# 
   623  0211                     	;# 
   624  0211                     	;# 
   625  0212                     	;# 
   626  0212                     	;# 
   627  0213                     	;# 
   628  0213                     	;# 
   629  0214                     	;# 
   630  0214                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0216                     	;# 
   635  0216                     	;# 
   636  0217                     	;# 
   637  0217                     	;# 
   638  028C                     	;# 
   639  028D                     	;# 
   640  028E                     	;# 
   641  0291                     	;# 
   642  0291                     	;# 
   643  0292                     	;# 
   644  0293                     	;# 
   645  0298                     	;# 
   646  0298                     	;# 
   647  0299                     	;# 
   648  029A                     	;# 
   649  030C                     	;# 
   650  030D                     	;# 
   651  030E                     	;# 
   652  038C                     	;# 
   653  038D                     	;# 
   654  038E                     	;# 
   655  0390                     	;# 
   656  0391                     	;# 
   657  0392                     	;# 
   658  0393                     	;# 
   659  0394                     	;# 
   660  0395                     	;# 
   661  0396                     	;# 
   662  0397                     	;# 
   663  0398                     	;# 
   664  0399                     	;# 
   665  039D                     	;# 
   666  039E                     	;# 
   667  039F                     	;# 
   668  0511                     	;# 
   669  0513                     	;# 
   670  051A                     	;# 
   671  0811                     	;# 
   672  0812                     	;# 
   673  0813                     	;# 
   674  0814                     	;# 
   675  0815                     	;# 
   676  0816                     	;# 
   677  0817                     	;# 
   678  0818                     	;# 
   679  0819                     	;# 
   680  081A                     	;# 
   681  081B                     	;# 
   682  081C                     	;# 
   683  081D                     	;# 
   684  081E                     	;# 
   685  081F                     	;# 
   686  0820                     	;# 
   687  0821                     	;# 
   688  0821                     	;# 
   689  0822                     	;# 
   690  0823                     	;# 
   691  0823                     	;# 
   692  0824                     	;# 
   693  0825                     	;# 
   694  0825                     	;# 
   695  0826                     	;# 
   696  0827                     	;# 
   697  0827                     	;# 
   698  0828                     	;# 
   699  0829                     	;# 
   700  082A                     	;# 
   701  082B                     	;# 
   702  082C                     	;# 
   703  082D                     	;# 
   704  082E                     	;# 
   705  082F                     	;# 
   706  0831                     	;# 
   707  0832                     	;# 
   708  0833                     	;# 
   709  0834                     	;# 
   710  0835                     	;# 
   711  0836                     	;# 
   712  0837                     	;# 
   713  0838                     	;# 
   714  0839                     	;# 
   715  083A                     	;# 
   716  083B                     	;# 
   717  083C                     	;# 
   718  083D                     	;# 
   719  083E                     	;# 
   720  083F                     	;# 
   721  0840                     	;# 
   722  0841                     	;# 
   723  0841                     	;# 
   724  0842                     	;# 
   725  0843                     	;# 
   726  0843                     	;# 
   727  0844                     	;# 
   728  0845                     	;# 
   729  0845                     	;# 
   730  0846                     	;# 
   731  0847                     	;# 
   732  0847                     	;# 
   733  0848                     	;# 
   734  0849                     	;# 
   735  084A                     	;# 
   736  084B                     	;# 
   737  084C                     	;# 
   738  084D                     	;# 
   739  084E                     	;# 
   740  084F                     	;# 
   741  0FE4                     	;# 
   742  0FE5                     	;# 
   743  0FE6                     	;# 
   744  0FE7                     	;# 
   745  0FE8                     	;# 
   746  0FE9                     	;# 
   747  0FEA                     	;# 
   748  0FEB                     	;# 
   749  0FED                     	;# 
   750  0FEE                     	;# 
   751  0FEF                     	;# 
   752                           
   753                           	psect	idataBANK0
   754  07FE                     __pidataBANK0:	
   755                           
   756                           ;initializer for _gpsInvalidFlag
   757  07FE  3401               	retlw	1
   758                           
   759                           	psect	idataBANK1
   760  07F2                     __pidataBANK1:	
   761                           
   762                           ;initializer for SetupGPS@F4919
   763  07F2  3424               	retlw	36
   764  07F3  3450               	retlw	80
   765  07F4  3453               	retlw	83
   766  07F5  3452               	retlw	82
   767  07F6  3446               	retlw	70
   768  07F7  3400               	retlw	0
   769                           
   770                           ;initializer for SetupGPS@F4921
   771  07F8  3431               	retlw	49
   772  07F9  3430               	retlw	48
   773  07FA  3433               	retlw	51
   774  07FB  3400               	retlw	0
   775                           
   776                           ;initializer for _validEastWest
   777  07FC  3445               	retlw	69
   778                           
   779                           ;initializer for _validNorthSouth
   780  07FD  344E               	retlw	78
   781                           
   782                           	psect	idataBANK2
   783  0E97                     __pidataBANK2:	
   784                           
   785                           ;initializer for UpdateGPS@F4926
   786  0E97  3424               	retlw	36
   787  0E98  3450               	retlw	80
   788  0E99  3453               	retlw	83
   789  0E9A  3452               	retlw	82
   790  0E9B  3446               	retlw	70
   791  0E9C  3431               	retlw	49
   792  0E9D  3430               	retlw	48
   793  0E9E  3433               	retlw	51
   794  0E9F  342C               	retlw	44
   795  0EA0  3430               	retlw	48
   796  0EA1  3431               	retlw	49
   797  0EA2  342C               	retlw	44
   798  0EA3  3430               	retlw	48
   799  0EA4  3431               	retlw	49
   800  0EA5  342C               	retlw	44
   801  0EA6  3430               	retlw	48
   802  0EA7  3430               	retlw	48
   803  0EA8  342C               	retlw	44
   804  0EA9  3430               	retlw	48
   805  0EAA  3430               	retlw	48
   806  0EAB  342A               	retlw	42
   807  0EAC  3400               	retlw	0
   808                           
   809                           ;initializer for DisableGPS@F4916
   810  0EAD  3424               	retlw	36
   811  0EAE  3450               	retlw	80
   812  0EAF  3453               	retlw	83
   813  0EB0  3452               	retlw	82
   814  0EB1  3446               	retlw	70
   815  0EB2  3431               	retlw	49
   816  0EB3  3431               	retlw	49
   817  0EB4  3437               	retlw	55
   818  0EB5  342C               	retlw	44
   819  0EB6  3431               	retlw	49
   820  0EB7  3436               	retlw	54
   821  0EB8  342A               	retlw	42
   822  0EB9  3400               	retlw	0
   823                           
   824                           ;initializer for DecodeGPS@F4928
   825  0EBA  3424               	retlw	36
   826  0EBB  3447               	retlw	71
   827  0EBC  3450               	retlw	80
   828  0EBD  3447               	retlw	71
   829  0EBE  344C               	retlw	76
   830  0EBF  344C               	retlw	76
   831  0EC0  3400               	retlw	0
   832                           
   833                           	psect	stringtext
   834  0800                     __pstringtext:	
   835  0800                     _dpowers:	
   836  0800  3401               	retlw	1
   837  0801  3400               	retlw	0
   838  0802  340A               	retlw	10
   839  0803  3400               	retlw	0
   840  0804  3464               	retlw	100
   841  0805  3400               	retlw	0
   842  0806  34E8               	retlw	232
   843  0807  3403               	retlw	3
   844  0808  3410               	retlw	16
   845  0809  3427               	retlw	39
   846  080A                     __end_of_dpowers:	
   847  080A                     __stringdata:	
   848  080A                     STR_1:	
   849  080A  3425               	retlw	37	;'%'
   850  080B  3473               	retlw	115	;'s'
   851  080C  3425               	retlw	37	;'%'
   852  080D  3473               	retlw	115	;'s'
   853  080E  342C               	retlw	44	;','
   854  080F  3430               	retlw	48	;'0'
   855  0810  3425               	retlw	37	;'%'
   856  0811  3464               	retlw	100	;'d'
   857  0812  342C               	retlw	44	;','
   858  0813  3430               	retlw	48	;'0'
   859  0814  3430               	retlw	48	;'0'
   860  0815  342C               	retlw	44	;','
   861  0816  3430               	retlw	48	;'0'
   862  0817  3430               	retlw	48	;'0'
   863  0818  342C               	retlw	44	;','
   864  0819  3430               	retlw	48	;'0'
   865  081A  3430               	retlw	48	;'0'
   866  081B  342A               	retlw	42	;'*'
   867  081C  3400               	retlw	0
   868  081D                     STR_2:	
   869  081D  3425               	retlw	37	;'%'
   870  081E  3473               	retlw	115	;'s'
   871  081F  3425               	retlw	37	;'%'
   872  0820  3473               	retlw	115	;'s'
   873  0821  342C               	retlw	44	;','
   874  0822  3430               	retlw	48	;'0'
   875  0823  3431               	retlw	49	;'1'
   876  0824  342C               	retlw	44	;','
   877  0825  3430               	retlw	48	;'0'
   878  0826  3431               	retlw	49	;'1'
   879  0827  342C               	retlw	44	;','
   880  0828  3430               	retlw	48	;'0'
   881  0829  3430               	retlw	48	;'0'
   882  082A  342C               	retlw	44	;','
   883  082B  3430               	retlw	48	;'0'
   884  082C  3430               	retlw	48	;'0'
   885  082D  342A               	retlw	42	;'*'
   886  082E  3400               	retlw	0
   887  082F                     STR_3:	
   888  082F  3428               	retlw	40	;'('
   889  0830  346E               	retlw	110	;'n'
   890  0831  3475               	retlw	117	;'u'
   891  0832  346C               	retlw	108	;'l'
   892  0833  346C               	retlw	108	;'l'
   893  0834  3429               	retlw	41	;')'
   894  0835  3400               	retlw	0
   895  0836                     __end_of__stringdata:	
   896                           
   897                           ; #config settings
   898  0000                     
   899                           	psect	nvBANK1
   900  00EF                     __pnvBANK1:	
   901  00EF                     _gpsIndex:	
   902  00EF                     	ds	1
   903  000B                     _INTCONbits	set	11
   904  0011                     _PIR1bits	set	17
   905  000C                     _PORTAbits	set	12
   906  000D                     _PORTBbits	set	13
   907  000E                     _PORTCbits	set	14
   908  0018                     _T1CONbits	set	24
   909  0019                     _T1GCONbits	set	25
   910  0017                     _TMR1H	set	23
   911  0016                     _TMR1L	set	22
   912  008E                     _ADIF	set	142
   913  005F                     _GIE	set	95
   914  005E                     _PEIE	set	94
   915  0088                     _TMR1IF	set	136
   916  00C0                     _TMR1ON	set	192
   917  009D                     _ADCON0bits	set	157
   918  009E                     _ADCON1bits	set	158
   919  009F                     _ADCON2bits	set	159
   920  009C                     _ADRESH	set	156
   921  0099                     _OSCCONbits	set	153
   922  0091                     _PIE1bits	set	145
   923  008C                     _TRISAbits	set	140
   924  008D                     _TRISBbits	set	141
   925  008E                     _TRISCbits	set	142
   926  0097                     _WDTCONbits	set	151
   927  048E                     _ADIE	set	1166
   928  048D                     _RCIE	set	1165
   929  0488                     _TMR1IE	set	1160
   930  010D                     _LATBbits	set	269
   931  0872                     _LATC2	set	2162
   932  018C                     _ANSELAbits	set	396
   933  018D                     _ANSELBbits	set	397
   934  0199                     _RCREG	set	409
   935  019D                     _RCSTAbits	set	413
   936  019C                     _SPBRGH	set	412
   937  019B                     _SPBRGL	set	411
   938  019A                     _TXREG	set	410
   939  019E                     _TXSTAbits	set	414
   940  0CE9                     _OERR	set	3305
   941  0211                     _SSPBUF	set	529
   942  0215                     _SSPCON1bits	set	533
   943  0214                     _SSPSTATbits	set	532
   944  0393                     _IOCAF	set	915
   945  0393                     _IOCAFbits	set	915
   946  0392                     _IOCANbits	set	914
   947  0391                     _IOCAPbits	set	913
   948  0396                     _IOCBF	set	918
   949  0396                     _IOCBFbits	set	918
   950  0395                     _IOCBNbits	set	917
   951  0394                     _IOCBPbits	set	916
   952                           
   953                           	psect	cinit
   954  00D1                     start_initialization:	
   955  00D1                     __initialization:	
   956                           
   957                           ; Clear objects allocated to COMMON
   958  00D1  01F9               	clrf	__pbssCOMMON& (0+127)
   959  00D2  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   960  00D3  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   961  00D4  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   962  00D5  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
   963                           
   964                           ; Clear objects allocated to BANK0
   965  00D6  01EE               	clrf	__pbssBANK0& (0+127)
   966                           
   967                           ; Clear objects allocated to BANK1
   968  00D7  30A0               	movlw	low __pbssBANK1
   969  00D8  0084               	movwf	4
   970  00D9  3000               	movlw	high __pbssBANK1
   971  00DA  0085               	movwf	5
   972  00DB  3043               	movlw	67
   973  00DC  318D  255D  3180   	fcall	clear_ram0
   974                           
   975                           ; Clear objects allocated to BANK3
   976  00DF  30A0               	movlw	low __pbssBANK3
   977  00E0  0084               	movwf	4
   978  00E1  3001               	movlw	high __pbssBANK3
   979  00E2  0085               	movwf	5
   980  00E3  3033               	movlw	51
   981  00E4  318D  255D  3180   	fcall	clear_ram0
   982                           
   983                           ; Clear objects allocated to BANK4
   984  00E7  3020               	movlw	low __pbssBANK4
   985  00E8  0084               	movwf	4
   986  00E9  3002               	movlw	high __pbssBANK4
   987  00EA  0085               	movwf	5
   988  00EB  3044               	movlw	68
   989  00EC  318D  255D  3180   	fcall	clear_ram0
   990                           
   991                           ; Initialize objects allocated to BANK0
   992  00EF  3187  27FE  3180   	fcall	__pidataBANK0	;fetch initializer
   993  00F2  00EF               	movwf	__pdataBANK0& (0+127)
   994                           
   995                           ; Initialize objects allocated to BANK1
   996  00F3  30F2               	movlw	low __pidataBANK1
   997  00F4  0084               	movwf	4
   998  00F5  3087               	movlw	(high __pidataBANK1)| (0+128)
   999  00F6  0085               	movwf	5
  1000  00F7  30E3               	movlw	low __pdataBANK1
  1001  00F8  0086               	movwf	6
  1002  00F9  3000               	movlw	high __pdataBANK1
  1003  00FA  0087               	movwf	7
  1004  00FB  300C               	movlw	12
  1005  00FC  318D  2557  3180   	fcall	init_ram
  1006                           
  1007                           ; Initialize objects allocated to BANK2
  1008  00FF  3097               	movlw	low __pidataBANK2
  1009  0100  0084               	movwf	4
  1010  0101  308E               	movlw	(high __pidataBANK2)| (0+128)
  1011  0102  0085               	movwf	5
  1012  0103  3020               	movlw	low __pdataBANK2
  1013  0104  0086               	movwf	6
  1014  0105  3001               	movlw	high __pdataBANK2
  1015  0106  0087               	movwf	7
  1016  0107  302A               	movlw	42
  1017  0108  318D  2557         	fcall	init_ram
  1018  010A                     end_of_initialization:	
  1019                           ;End of C runtime variable initialization code
  1020                           
  1021  010A                     __end_of__initialization:	
  1022  010A  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  1023  010B  0020               	movlb	0
  1024  010C  3185  2D9D         	ljmp	_main	;jump to C main() function
  1025                           
  1026                           	psect	bssCOMMON
  1027  0079                     __pbssCOMMON:	
  1028  0079                     _end:	
  1029  0079                     	ds	2
  1030  007B                     _start:	
  1031  007B                     	ds	2
  1032  007D                     _messageDoneFlag:	
  1033  007D                     	ds	1
  1034                           
  1035                           	psect	bssBANK0
  1036  006E                     __pbssBANK0:	
  1037  006E                     _recordFlag:	
  1038  006E                     	ds	1
  1039                           
  1040                           	psect	dataBANK0
  1041  006F                     __pdataBANK0:	
  1042  006F                     _gpsInvalidFlag:	
  1043  006F                     	ds	1
  1044                           
  1045                           	psect	bssBANK1
  1046  00A0                     __pbssBANK1:	
  1047  00A0                     _recordEndAdress:	
  1048  00A0                     	ds	4
  1049  00A4                     DecodeGPS@F4930:	
  1050  00A4                     	ds	3
  1051  00A7                     DecodeGPS@F4932:	
  1052  00A7                     	ds	3
  1053  00AA                     _validLatitude:	
  1054  00AA                     	ds	3
  1055  00AD                     _validLongitude:	
  1056  00AD                     	ds	3
  1057  00B0                     _strobeFlag:	
  1058  00B0                     	ds	1
  1059  00B1                     _gpsMessage:	
  1060  00B1                     	ds	50
  1061                           
  1062                           	psect	dataBANK1
  1063  00E3                     __pdataBANK1:	
  1064  00E3                     SetupGPS@F4919:	
  1065  00E3                     	ds	6
  1066  00E9                     SetupGPS@F4921:	
  1067  00E9                     	ds	4
  1068  00ED                     _validEastWest:	
  1069  00ED                     	ds	1
  1070  00EE                     _validNorthSouth:	
  1071  00EE                     	ds	1
  1072                           
  1073                           	psect	dataBANK2
  1074  0120                     __pdataBANK2:	
  1075  0120                     UpdateGPS@F4926:	
  1076  0120                     	ds	22
  1077  0136                     DisableGPS@F4916:	
  1078  0136                     	ds	13
  1079  0143                     DecodeGPS@F4928:	
  1080  0143                     	ds	7
  1081                           
  1082                           	psect	bssBANK3
  1083  01A0                     __pbssBANK3:	
  1084  01A0                     _buffer:	
  1085  01A0                     	ds	51
  1086                           
  1087                           	psect	bssBANK4
  1088  0220                     __pbssBANK4:	
  1089  0220                     _preRecordingAddresses:	
  1090  0220                     	ds	68
  1091                           
  1092                           	psect	clrtext
  1093  0D5D                     clear_ram0:	
  1094                           ;	Called with FSR0 containing the base address, and
  1095                           ;	WREG with the size to clear
  1096                           
  1097  0D5D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1098  0D5E                     clrloop0:	
  1099  0D5E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1100  0D5F  3101               	addfsr 0,1
  1101  0D60  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1102  0D61  2D5E               	goto	clrloop0	;have we reached the end yet?
  1103  0D62  3400               	retlw	0	;all done for this memory range, return
  1104                           
  1105                           	psect	inittext
  1106  0D57                     init_ram:	
  1107  0D57  00FE               	movwf	126
  1108  0D58                     initloop:	
  1109  0D58  0012               	moviw fsr0++
  1110  0D59  001E               	movwi fsr1++
  1111  0D5A  0BFE               	decfsz	126,f
  1112  0D5B  2D58               	goto	initloop
  1113  0D5C  3400               	retlw	0
  1114                           
  1115                           	psect	cstackCOMMON
  1116  0070                     __pcstackCOMMON:	
  1117  0070                     ?_InitCLK:	
  1118  0070                     ?_InitGPIO:	
  1119                           ; 0 bytes @ 0x0
  1120                           
  1121  0070                     ?_InitADC:	
  1122                           ; 0 bytes @ 0x0
  1123                           
  1124  0070                     ?_InitSPI:	
  1125                           ; 0 bytes @ 0x0
  1126                           
  1127  0070                     ?_InitTimer1:	
  1128                           ; 0 bytes @ 0x0
  1129                           
  1130  0070                     ?_InitWatchdog:	
  1131                           ; 0 bytes @ 0x0
  1132                           
  1133  0070                     ?_initUART:	
  1134                           ; 0 bytes @ 0x0
  1135                           
  1136  0070                     ?_ToggleSleepGPS:	
  1137                           ; 0 bytes @ 0x0
  1138                           
  1139  0070                     ?_SetupGPS:	
  1140                           ; 0 bytes @ 0x0
  1141                           
  1142  0070                     ?_RecordMode:	
  1143                           ; 0 bytes @ 0x0
  1144                           
  1145  0070                     ?_UpdateGPS:	
  1146                           ; 0 bytes @ 0x0
  1147                           
  1148  0070                     ?_GoToSleep:	
  1149                           ; 0 bytes @ 0x0
  1150                           
  1151  0070                     ?_Hibernate:	
  1152                           ; 0 bytes @ 0x0
  1153                           
  1154  0070                     ?_WriteBuffer:	
  1155                           ; 0 bytes @ 0x0
  1156                           
  1157  0070                     ?_DecodeGPS:	
  1158                           ; 0 bytes @ 0x0
  1159                           
  1160  0070                     ?_isr:	
  1161                           ; 0 bytes @ 0x0
  1162                           
  1163  0070                     ?_WriteSPI:	
  1164                           ; 0 bytes @ 0x0
  1165                           
  1166  0070                     ?_uart_xmit:	
  1167                           ; 0 bytes @ 0x0
  1168                           
  1169  0070                     ?i1_WriteBuffer:	
  1170                           ; 0 bytes @ 0x0
  1171                           
  1172  0070                     ??i1_WriteBuffer:	
  1173                           ; 0 bytes @ 0x0
  1174                           
  1175  0070                     ?_ReadSPI:	
  1176                           ; 0 bytes @ 0x0
  1177                           
  1178  0070                     ?_ReadStatusSPI:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  0070                     ?_ReadBuffer:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184                           
  1185                           ; 1 bytes @ 0x0
  1186  0070                     	ds	1
  1187  0071                     i1WriteBuffer@data:	
  1188                           
  1189                           ; 1 bytes @ 0x1
  1190  0071                     	ds	1
  1191  0072                     ??_isr:	
  1192                           
  1193                           ; 0 bytes @ 0x2
  1194  0072                     	ds	5
  1195  0077                     _isr$606:	
  1196                           
  1197                           ; 2 bytes @ 0x7
  1198  0077                     	ds	2
  1199                           
  1200                           	psect	cstackBANK0
  1201  0020                     __pcstackBANK0:	
  1202  0020                     ??_InitCLK:	
  1203  0020                     ??_InitGPIO:	
  1204                           ; 0 bytes @ 0x0
  1205                           
  1206  0020                     ??_InitADC:	
  1207                           ; 0 bytes @ 0x0
  1208                           
  1209  0020                     ??_InitSPI:	
  1210                           ; 0 bytes @ 0x0
  1211                           
  1212  0020                     ??_InitTimer1:	
  1213                           ; 0 bytes @ 0x0
  1214                           
  1215  0020                     ??_InitWatchdog:	
  1216                           ; 0 bytes @ 0x0
  1217                           
  1218  0020                     ??_initUART:	
  1219                           ; 0 bytes @ 0x0
  1220                           
  1221  0020                     ??_ToggleSleepGPS:	
  1222                           ; 0 bytes @ 0x0
  1223                           
  1224  0020                     ??_GoToSleep:	
  1225                           ; 0 bytes @ 0x0
  1226                           
  1227  0020                     ??_Hibernate:	
  1228                           ; 0 bytes @ 0x0
  1229                           
  1230  0020                     ??_WriteBuffer:	
  1231                           ; 0 bytes @ 0x0
  1232                           
  1233  0020                     ??_WriteSPI:	
  1234                           ; 0 bytes @ 0x0
  1235                           
  1236  0020                     ??_ReadSPI:	
  1237                           ; 0 bytes @ 0x0
  1238                           
  1239  0020                     ??_ReadBuffer:	
  1240                           ; 0 bytes @ 0x0
  1241                           
  1242  0020                     ??_uart_xmit:	
  1243                           ; 0 bytes @ 0x0
  1244                           
  1245  0020                     ?_compute_checksum:	
  1246                           ; 0 bytes @ 0x0
  1247                           
  1248  0020                     ?___bmul:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0020                     ?___wmul:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0020                     ?___lwdiv:	
  1255                           ; 2 bytes @ 0x0
  1256                           
  1257  0020                     uart_xmit@mydata_byte:	
  1258                           ; 2 bytes @ 0x0
  1259                           
  1260  0020                     ___bmul@multiplicand:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0020                     compute_checksum@size:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0020                     ___wmul@multiplier:	
  1267                           ; 2 bytes @ 0x0
  1268                           
  1269  0020                     ___lwdiv@divisor:	
  1270                           ; 2 bytes @ 0x0
  1271                           
  1272                           
  1273                           ; 2 bytes @ 0x0
  1274  0020                     	ds	1
  1275  0021                     ??___bmul:	
  1276  0021                     ReadSPI@dataByte:	
  1277                           ; 0 bytes @ 0x1
  1278                           
  1279  0021                     WriteBuffer@data:	
  1280                           ; 1 bytes @ 0x1
  1281                           
  1282  0021                     ReadBuffer@read_data:	
  1283                           ; 1 bytes @ 0x1
  1284                           
  1285  0021                     GoToSleep@count:	
  1286                           ; 1 bytes @ 0x1
  1287                           
  1288  0021                     Hibernate@count:	
  1289                           ; 1 bytes @ 0x1
  1290                           
  1291                           
  1292                           ; 1 bytes @ 0x1
  1293  0021                     	ds	1
  1294  0022                     ??_compute_checksum:	
  1295  0022                     ___bmul@product:	
  1296                           ; 0 bytes @ 0x2
  1297                           
  1298  0022                     WriteSPI@temp:	
  1299                           ; 1 bytes @ 0x2
  1300                           
  1301  0022                     ___wmul@multiplicand:	
  1302                           ; 2 bytes @ 0x2
  1303                           
  1304  0022                     ___lwdiv@dividend:	
  1305                           ; 2 bytes @ 0x2
  1306                           
  1307                           
  1308                           ; 2 bytes @ 0x2
  1309  0022                     	ds	1
  1310  0023                     ___bmul@multiplier:	
  1311                           
  1312                           ; 1 bytes @ 0x3
  1313  0023                     	ds	1
  1314  0024                     ??___wmul:	
  1315  0024                     ??___lwdiv:	
  1316                           ; 0 bytes @ 0x4
  1317                           
  1318  0024                     WriteSPI@databyte:	
  1319                           ; 0 bytes @ 0x4
  1320                           
  1321  0024                     compute_checksum@checksum:	
  1322                           ; 1 bytes @ 0x4
  1323                           
  1324  0024                     ___wmul@product:	
  1325                           ; 1 bytes @ 0x4
  1326                           
  1327                           
  1328                           ; 2 bytes @ 0x4
  1329  0024                     	ds	1
  1330  0025                     ??_ReadStatusSPI:	
  1331  0025                     compute_checksum@data:	
  1332                           ; 0 bytes @ 0x5
  1333                           
  1334  0025                     ___lwdiv@quotient:	
  1335                           ; 1 bytes @ 0x5
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x5
  1339  0025                     	ds	1
  1340  0026                     ?___awdiv:	
  1341  0026                     ReadStatusSPI@dataRead:	
  1342                           ; 2 bytes @ 0x6
  1343                           
  1344  0026                     compute_checksum@x:	
  1345                           ; 1 bytes @ 0x6
  1346                           
  1347  0026                     ___awdiv@divisor:	
  1348                           ; 2 bytes @ 0x6
  1349                           
  1350                           
  1351                           ; 2 bytes @ 0x6
  1352  0026                     	ds	1
  1353  0027                     ?_WriteOverheadSPI:	
  1354  0027                     ___lwdiv@counter:	
  1355                           ; 0 bytes @ 0x7
  1356                           
  1357  0027                     WriteOverheadSPI@address:	
  1358                           ; 1 bytes @ 0x7
  1359                           
  1360                           
  1361                           ; 4 bytes @ 0x7
  1362  0027                     	ds	1
  1363  0028                     ?_uart_write_message:	
  1364  0028                     ?___lwmod:	
  1365                           ; 0 bytes @ 0x8
  1366                           
  1367  0028                     uart_write_message@size:	
  1368                           ; 2 bytes @ 0x8
  1369                           
  1370  0028                     ___awdiv@dividend:	
  1371                           ; 2 bytes @ 0x8
  1372                           
  1373  0028                     ___lwmod@divisor:	
  1374                           ; 2 bytes @ 0x8
  1375                           
  1376                           
  1377                           ; 2 bytes @ 0x8
  1378  0028                     	ds	2
  1379  002A                     ??_uart_write_message:	
  1380  002A                     ??___awdiv:	
  1381                           ; 0 bytes @ 0xA
  1382                           
  1383  002A                     ___lwmod@dividend:	
  1384                           ; 0 bytes @ 0xA
  1385                           
  1386                           
  1387                           ; 2 bytes @ 0xA
  1388  002A                     	ds	1
  1389  002B                     ??_WriteOverheadSPI:	
  1390  002B                     ___awdiv@counter:	
  1391                           ; 0 bytes @ 0xB
  1392                           
  1393                           
  1394                           ; 1 bytes @ 0xB
  1395  002B                     	ds	1
  1396  002C                     ??___lwmod:	
  1397  002C                     ___awdiv@sign:	
  1398                           ; 0 bytes @ 0xC
  1399                           
  1400                           
  1401                           ; 1 bytes @ 0xC
  1402  002C                     	ds	1
  1403  002D                     ___lwmod@counter:	
  1404  002D                     _uart_write_message$1371:	
  1405                           ; 1 bytes @ 0xD
  1406                           
  1407  002D                     ___awdiv@quotient:	
  1408                           ; 2 bytes @ 0xD
  1409                           
  1410                           
  1411                           ; 2 bytes @ 0xD
  1412  002D                     	ds	1
  1413  002E                     ?_sprintf:	
  1414  002E                     sprintf@f:	
  1415                           ; 2 bytes @ 0xE
  1416                           
  1417                           
  1418                           ; 2 bytes @ 0xE
  1419  002E                     	ds	1
  1420  002F                     ??_DecodeGPS:	
  1421  002F                     _uart_write_message$1372:	
  1422                           ; 0 bytes @ 0xF
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0xF
  1426  002F                     	ds	2
  1427  0031                     uart_write_message@x:	
  1428  0031                     WriteOverheadSPI@address_bytes:	
  1429                           ; 2 bytes @ 0x11
  1430                           
  1431                           
  1432                           ; 3 bytes @ 0x11
  1433  0031                     	ds	1
  1434  0032                     DecodeGPS@messageID:	
  1435                           
  1436                           ; 7 bytes @ 0x12
  1437  0032                     	ds	1
  1438  0033                     uart_write_message@checksum:	
  1439                           
  1440                           ; 1 bytes @ 0x13
  1441  0033                     	ds	1
  1442  0034                     ??_sprintf:	
  1443  0034                     WriteOverheadSPI@StatusReg:	
  1444                           ; 0 bytes @ 0x14
  1445                           
  1446  0034                     uart_write_message@data:	
  1447                           ; 1 bytes @ 0x14
  1448                           
  1449                           
  1450                           ; 1 bytes @ 0x14
  1451  0034                     	ds	1
  1452  0035                     ??_RecordMode:	
  1453  0035                     uart_write_message@ascii_checksum:	
  1454                           ; 0 bytes @ 0x15
  1455                           
  1456                           
  1457                           ; 2 bytes @ 0x15
  1458  0035                     	ds	3
  1459  0038                     sprintf@flag:	
  1460                           
  1461                           ; 1 bytes @ 0x18
  1462  0038                     	ds	1
  1463  0039                     DecodeGPS@northSouth:	
  1464  0039                     sprintf@prec:	
  1465                           ; 1 bytes @ 0x19
  1466                           
  1467                           
  1468                           ; 1 bytes @ 0x19
  1469  0039                     	ds	1
  1470  003A                     DecodeGPS@eastWest:	
  1471  003A                     sprintf@ap:	
  1472                           ; 1 bytes @ 0x1A
  1473                           
  1474  003A                     RecordMode@count:	
  1475                           ; 1 bytes @ 0x1A
  1476                           
  1477                           
  1478                           ; 2 bytes @ 0x1A
  1479  003A                     	ds	1
  1480  003B                     DecodeGPS@status:	
  1481  003B                     sprintf@sp:	
  1482                           ; 1 bytes @ 0x1B
  1483                           
  1484                           
  1485                           ; 1 bytes @ 0x1B
  1486  003B                     	ds	1
  1487  003C                     RecordMode@x:	
  1488  003C                     DecodeGPS@latitude:	
  1489                           ; 2 bytes @ 0x1C
  1490                           
  1491  003C                     sprintf@_val:	
  1492                           ; 3 bytes @ 0x1C
  1493                           
  1494                           
  1495                           ; 4 bytes @ 0x1C
  1496  003C                     	ds	2
  1497  003E                     RecordMode@address:	
  1498                           
  1499                           ; 4 bytes @ 0x1E
  1500  003E                     	ds	1
  1501  003F                     DecodeGPS@longitude:	
  1502                           
  1503                           ; 3 bytes @ 0x1F
  1504  003F                     	ds	1
  1505  0040                     sprintf@c:	
  1506                           
  1507                           ; 1 bytes @ 0x20
  1508  0040                     	ds	1
  1509  0041                     ??_SetupGPS:	
  1510                           
  1511                           ; 0 bytes @ 0x21
  1512  0041                     	ds	1
  1513  0042                     DecodeGPS@x:	
  1514                           
  1515                           ; 2 bytes @ 0x22
  1516  0042                     	ds	2
  1517  0044                     ??_UpdateGPS:	
  1518  0044                     SetupGPS@message:	
  1519                           ; 0 bytes @ 0x24
  1520                           
  1521                           
  1522                           ; 22 bytes @ 0x24
  1523  0044                     	ds	1
  1524  0045                     UpdateGPS@GPSupdateMessage:	
  1525                           
  1526                           ; 22 bytes @ 0x25
  1527  0045                     	ds	21
  1528  005A                     SetupGPS@startSequence:	
  1529                           
  1530                           ; 6 bytes @ 0x3A
  1531  005A                     	ds	6
  1532  0060                     SetupGPS@MID:	
  1533                           
  1534                           ; 4 bytes @ 0x40
  1535  0060                     	ds	4
  1536  0064                     SetupGPS@x:	
  1537                           
  1538                           ; 2 bytes @ 0x44
  1539  0064                     	ds	2
  1540  0066                     ?_main:	
  1541  0066                     main@argc:	
  1542                           ; 2 bytes @ 0x46
  1543                           
  1544                           
  1545                           ; 2 bytes @ 0x46
  1546  0066                     	ds	2
  1547  0068                     main@argv:	
  1548                           
  1549                           ; 2 bytes @ 0x48
  1550  0068                     	ds	2
  1551  006A                     ??_main:	
  1552                           
  1553                           ; 0 bytes @ 0x4A
  1554  006A                     	ds	3
  1555  006D                     main@periodicCounter:	
  1556                           
  1557                           ; 1 bytes @ 0x4D
  1558  006D                     	ds	1
  1559                           
  1560                           	psect	maintext
  1561  059D                     __pmaintext:	
  1562 ;;
  1563 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1564 ;;
  1565 ;; *************** function _main *****************
  1566 ;; Defined at:
  1567 ;;		line 20 in file "launcher_main.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  argc            2   70[BANK0 ] int 
  1570 ;;  argv            2   72[BANK0 ] PTR PTR unsigned char 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  periodicCoun    1   77[BANK0 ] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  2   70[BANK0 ] int 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 17F/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1582 ;;      Params:         0       4       0       0       0       0       0       0
  1583 ;;      Locals:         0       1       0       0       0       0       0       0
  1584 ;;      Temps:          0       3       0       0       0       0       0       0
  1585 ;;      Totals:         0       8       0       0       0       0       0       0
  1586 ;;Total ram usage:        8 bytes
  1587 ;; Hardware stack levels required when called:    6
  1588 ;; This function calls:
  1589 ;;		_GoToSleep
  1590 ;;		_Hibernate
  1591 ;;		_InitADC
  1592 ;;		_InitCLK
  1593 ;;		_InitGPIO
  1594 ;;		_InitSPI
  1595 ;;		_InitTimer1
  1596 ;;		_InitWatchdog
  1597 ;;		_RecordMode
  1598 ;;		_SetupGPS
  1599 ;;		_ToggleSleepGPS
  1600 ;;		_UpdateGPS
  1601 ;;		_initUART
  1602 ;; This function is called by:
  1603 ;;		Startup code after reset
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function _main
  1609  059D                     _main:	
  1610                           
  1611                           ;launcher_main.c: 23: InitCLK();
  1612                           
  1613                           ;incstack = 0
  1614                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1615  059D  318D  256A  3185   	fcall	_InitCLK
  1616                           
  1617                           ;launcher_main.c: 24: InitGPIO();
  1618  05A0  318E  26EC  3185   	fcall	_InitGPIO
  1619                           
  1620                           ;launcher_main.c: 25: InitADC();
  1621  05A3  318E  2660  3185   	fcall	_InitADC
  1622                           
  1623                           ;launcher_main.c: 26: InitSPI();
  1624  05A6  318D  25C9  3185   	fcall	_InitSPI
  1625                           
  1626                           ;launcher_main.c: 27: InitTimer1();
  1627  05A9  318D  2588  3185   	fcall	_InitTimer1
  1628                           
  1629                           ;launcher_main.c: 28: InitWatchdog();
  1630  05AC  318D  2563  3185   	fcall	_InitWatchdog
  1631                           
  1632                           ;launcher_main.c: 29: initUART();
  1633  05AF  318D  2597  3185   	fcall	_initUART
  1634                           
  1635                           ;launcher_main.c: 31: unsigned char periodicCounter = 10;
  1636  05B2  300A               	movlw	10
  1637  05B3  0020               	movlb	0	; select bank0
  1638  05B4  00EA               	movwf	??_main
  1639  05B5  086A               	movf	??_main,w
  1640  05B6  00ED               	movwf	main@periodicCounter
  1641                           
  1642                           ;launcher_main.c: 32: gpsIndex = 1;
  1643  05B7  3001               	movlw	1
  1644  05B8  00EA               	movwf	??_main
  1645  05B9  086A               	movf	??_main,w
  1646  05BA  0021               	movlb	1	; select bank1
  1647  05BB  00EF               	movwf	_gpsIndex^(0+128)	;volatile
  1648                           
  1649                           ;launcher_main.c: 34: INTCONbits.GIE = 1;
  1650  05BC  178B               	bsf	11,7	;volatile
  1651                           
  1652                           ;launcher_main.c: 55: if(!PORTCbits.RC7)
  1653  05BD  0020               	movlb	0	; select bank0
  1654  05BE  1B8E               	btfsc	14,7	;volatile
  1655  05BF  2DC3               	goto	l2639
  1656                           
  1657                           ;launcher_main.c: 56: ToggleSleepGPS();
  1658  05C0  318F  2719  3185   	fcall	_ToggleSleepGPS
  1659  05C3                     l2639:	
  1660                           
  1661                           ;launcher_main.c: 57: SetupGPS();
  1662  05C3  3186  2648  3185   	fcall	_SetupGPS
  1663                           
  1664                           ;launcher_main.c: 59: SSPCON1bits.SSPEN=0;
  1665  05C6  0024               	movlb	4	; select bank4
  1666  05C7  1295               	bcf	21,5	;volatile
  1667                           
  1668                           ;launcher_main.c: 60: PORTCbits.RC5 = 0;
  1669  05C8  0020               	movlb	0	; select bank0
  1670  05C9  128E               	bcf	14,5	;volatile
  1671  05CA                     l2645:	
  1672                           ;launcher_main.c: 62: while(1){
  1673                           
  1674                           
  1675                           ;launcher_main.c: 64: LATC2 = (1);
  1676  05CA  0022               	movlb	2	; select bank2
  1677  05CB  150E               	bsf	14,2	;volatile
  1678                           
  1679                           ;launcher_main.c: 67: if(PORTAbits.RA1)
  1680  05CC  0020               	movlb	0	; select bank0
  1681  05CD  1C8C               	btfss	12,1	;volatile
  1682  05CE  2DDE               	goto	l113
  1683                           
  1684                           ;launcher_main.c: 68: {
  1685                           ;launcher_main.c: 70: PORTBbits.RB0 = 1;
  1686  05CF  140D               	bsf	13,0	;volatile
  1687                           
  1688                           ;launcher_main.c: 71: _delay((unsigned long)((100)*(16000000/4000.0)));
  1689  05D0  3003               	movlw	3
  1690  05D1  00EC               	movwf	??_main+2
  1691  05D2  3008               	movlw	8
  1692  05D3  00EB               	movwf	??_main+1
  1693  05D4  3078               	movlw	120
  1694  05D5  00EA               	movwf	??_main
  1695  05D6                     u2637:	
  1696  05D6  0BEA               	decfsz	??_main,f
  1697  05D7  2DD6               	goto	u2637
  1698  05D8  0BEB               	decfsz	??_main+1,f
  1699  05D9  2DD6               	goto	u2637
  1700  05DA  0BEC               	decfsz	??_main+2,f
  1701  05DB  2DD6               	goto	u2637
  1702                           
  1703                           ;launcher_main.c: 72: PORTBbits.RB0 = 0;
  1704  05DC  0020               	movlb	0	; select bank0
  1705  05DD  100D               	bcf	13,0	;volatile
  1706  05DE                     l113:	
  1707                           
  1708                           ;launcher_main.c: 73: }
  1709                           ;launcher_main.c: 75: if(recordFlag)
  1710  05DE  086E               	movf	_recordFlag,w
  1711  05DF  1903               	btfsc	3,2
  1712  05E0  2DEB               	goto	l2663
  1713                           
  1714                           ;launcher_main.c: 76: {
  1715                           ;launcher_main.c: 77: InitSPI();
  1716  05E1  318D  25C9  3185   	fcall	_InitSPI
  1717                           
  1718                           ;launcher_main.c: 78: RecordMode();
  1719  05E4  3183  2356  3185   	fcall	_RecordMode
  1720                           
  1721                           ;launcher_main.c: 79: SSPCON1bits.SSPEN=0;
  1722  05E7  0024               	movlb	4	; select bank4
  1723  05E8  1295               	bcf	21,5	;volatile
  1724                           
  1725                           ;launcher_main.c: 80: PORTCbits.RC5 = 0;
  1726  05E9  0020               	movlb	0	; select bank0
  1727  05EA  128E               	bcf	14,5	;volatile
  1728  05EB                     l2663:	
  1729                           
  1730                           ;launcher_main.c: 81: }
  1731                           ;launcher_main.c: 84: UpdateGPS();
  1732  05EB  318E  26C1  3185   	fcall	_UpdateGPS
  1733                           
  1734                           ;launcher_main.c: 86: if(gpsInvalidFlag)
  1735  05EE  0020               	movlb	0	; select bank0
  1736  05EF  086F               	movf	_gpsInvalidFlag,w
  1737  05F0  1903               	btfsc	3,2
  1738  05F1  2E11               	goto	l2673
  1739                           
  1740                           ;launcher_main.c: 87: {
  1741                           ;launcher_main.c: 88: PORTBbits.PORTB = LATBbits.LATB | 0x20;
  1742  05F2  0022               	movlb	2	; select bank2
  1743  05F3  080D               	movf	13,w	;volatile
  1744  05F4  39FF               	andlw	255
  1745  05F5  3820               	iorlw	32
  1746  05F6  0020               	movlb	0	; select bank0
  1747  05F7  00EA               	movwf	??_main
  1748  05F8  080D               	movf	13,w	;volatile
  1749  05F9  066A               	xorwf	??_main,w
  1750  05FA  3900               	andlw	-256
  1751  05FB  066A               	xorwf	??_main,w
  1752  05FC  008D               	movwf	13	;volatile
  1753                           
  1754                           ;launcher_main.c: 89: PORTBbits.PORTB = LATBbits.LATB & 0xEF;
  1755  05FD  0022               	movlb	2	; select bank2
  1756  05FE  080D               	movf	13,w	;volatile
  1757  05FF  39FF               	andlw	255
  1758  0600  39EF               	andlw	239
  1759  0601  0020               	movlb	0	; select bank0
  1760  0602  00EA               	movwf	??_main
  1761  0603  080D               	movf	13,w	;volatile
  1762  0604  066A               	xorwf	??_main,w
  1763  0605  3900               	andlw	-256
  1764  0606  066A               	xorwf	??_main,w
  1765  0607  008D               	movwf	13	;volatile
  1766                           
  1767                           ;launcher_main.c: 90: if(periodicCounter < 14)
  1768  0608  300E               	movlw	14
  1769  0609  026D               	subwf	main@periodicCounter,w
  1770  060A  1803               	skipnc
  1771  060B  2E2E               	goto	l2679
  1772                           
  1773                           ;launcher_main.c: 91: periodicCounter++;
  1774  060C  3001               	movlw	1
  1775  060D  00EA               	movwf	??_main
  1776  060E  086A               	movf	??_main,w
  1777  060F  07ED               	addwf	main@periodicCounter,f
  1778                           
  1779                           ;launcher_main.c: 92: }
  1780  0610  2E2E               	goto	l2679
  1781  0611                     l2673:	
  1782                           
  1783                           ;launcher_main.c: 93: else
  1784                           ;launcher_main.c: 94: {
  1785                           ;launcher_main.c: 95: PORTBbits.PORTB = LATBbits.LATB | 0x10;
  1786  0611  0022               	movlb	2	; select bank2
  1787  0612  080D               	movf	13,w	;volatile
  1788  0613  39FF               	andlw	255
  1789  0614  3810               	iorlw	16
  1790  0615  0020               	movlb	0	; select bank0
  1791  0616  00EA               	movwf	??_main
  1792  0617  080D               	movf	13,w	;volatile
  1793  0618  066A               	xorwf	??_main,w
  1794  0619  3900               	andlw	-256
  1795  061A  066A               	xorwf	??_main,w
  1796  061B  008D               	movwf	13	;volatile
  1797                           
  1798                           ;launcher_main.c: 96: PORTBbits.PORTB = LATBbits.LATB & 0xDF;
  1799  061C  0022               	movlb	2	; select bank2
  1800  061D  080D               	movf	13,w	;volatile
  1801  061E  39FF               	andlw	255
  1802  061F  39DF               	andlw	223
  1803  0620  0020               	movlb	0	; select bank0
  1804  0621  00EA               	movwf	??_main
  1805  0622  080D               	movf	13,w	;volatile
  1806  0623  066A               	xorwf	??_main,w
  1807  0624  3900               	andlw	-256
  1808  0625  066A               	xorwf	??_main,w
  1809  0626  008D               	movwf	13	;volatile
  1810                           
  1811                           ;launcher_main.c: 97: periodicCounter = 10;
  1812  0627  300A               	movlw	10
  1813  0628  00EA               	movwf	??_main
  1814  0629  086A               	movf	??_main,w
  1815  062A  00ED               	movwf	main@periodicCounter
  1816                           
  1817                           ;launcher_main.c: 98: ToggleSleepGPS();
  1818  062B  318F  2719  3185   	fcall	_ToggleSleepGPS
  1819  062E                     l2679:	
  1820                           
  1821                           ;launcher_main.c: 99: }
  1822                           ;launcher_main.c: 101: if(!recordFlag)
  1823  062E  0020               	movlb	0	; select bank0
  1824  062F  08EE               	movf	_recordFlag,f
  1825  0630  1D03               	skipz
  1826  0631  2DCA               	goto	l2645
  1827                           
  1828                           ;launcher_main.c: 102: {
  1829                           ;launcher_main.c: 103: if(strobeFlag)
  1830  0632  0021               	movlb	1	; select bank1
  1831  0633  0830               	movf	_strobeFlag^(0+128),w
  1832  0634  1903               	btfsc	3,2
  1833  0635  2E3B               	goto	l2685
  1834                           
  1835                           ;launcher_main.c: 104: GoToSleep(10);
  1836  0636  300A               	movlw	10
  1837  0637  318D  25B7  3185   	fcall	_GoToSleep
  1838  063A  2DCA               	goto	l2645
  1839  063B                     l2685:	
  1840                           
  1841                           ;launcher_main.c: 105: else if(gpsInvalidFlag)
  1842  063B  0020               	movlb	0	; select bank0
  1843  063C  086F               	movf	_gpsInvalidFlag,w
  1844  063D  1903               	btfsc	3,2
  1845  063E  2E44               	goto	l2689
  1846                           
  1847                           ;launcher_main.c: 106: GoToSleep(periodicCounter);
  1848  063F  086D               	movf	main@periodicCounter,w
  1849  0640  318D  25B7  3185   	fcall	_GoToSleep
  1850  0643  2DCA               	goto	l2645
  1851  0644                     l2689:	
  1852                           
  1853                           ;launcher_main.c: 107: else
  1854                           ;launcher_main.c: 108: Hibernate();
  1855  0644  318E  2647  3185   	fcall	_Hibernate
  1856  0647  2DCA               	goto	l2645
  1857  0648                     __end_of_main:	
  1858                           ;launcher_main.c: 109: }
  1859                           ;launcher_main.c: 110: }
  1860                           ;launcher_main.c: 112: return (0);
  1861                           ;	Return value of _main is never used
  1862                           
  1863                           
  1864                           	psect	text1
  1865  0D97                     __ptext1:	
  1866 ;; *************** function _initUART *****************
  1867 ;; Defined at:
  1868 ;;		line 253 in file "launcher_functions.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, status,2
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1882 ;;      Params:         0       0       0       0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    2
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _initUART
  1898  0D97                     _initUART:	
  1899                           
  1900                           ;launcher_functions.c: 256: TRISCbits.TRISC6 = 0;
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _initUART: [wreg+status,2]
  1904  0D97  0021               	movlb	1	; select bank1
  1905  0D98  130E               	bcf	14,6	;volatile
  1906                           
  1907                           ;launcher_functions.c: 257: TRISCbits.TRISC7 = 1;
  1908  0D99  178E               	bsf	14,7	;volatile
  1909                           
  1910                           ;launcher_functions.c: 258: TXSTAbits.BRGH = 0;
  1911  0D9A  0023               	movlb	3	; select bank3
  1912  0D9B  111E               	bcf	30,2	;volatile
  1913                           
  1914                           ;launcher_functions.c: 260: SPBRGH = 0;
  1915  0D9C  019C               	clrf	28	;volatile
  1916                           
  1917                           ;launcher_functions.c: 261: SPBRGL = 51;
  1918  0D9D  3033               	movlw	51
  1919  0D9E  009B               	movwf	27	;volatile
  1920                           
  1921                           ;launcher_functions.c: 262: TXSTAbits.TX9 = 0;
  1922  0D9F  131E               	bcf	30,6	;volatile
  1923                           
  1924                           ;launcher_functions.c: 263: TXSTAbits.SYNC = 0;
  1925  0DA0  121E               	bcf	30,4	;volatile
  1926                           
  1927                           ;launcher_functions.c: 264: TXSTAbits.TXEN = 1;
  1928  0DA1  169E               	bsf	30,5	;volatile
  1929                           
  1930                           ;launcher_functions.c: 266: RCSTAbits.SPEN = 1;
  1931  0DA2  179D               	bsf	29,7	;volatile
  1932                           
  1933                           ;launcher_functions.c: 267: RCSTAbits.RX9 = 0;
  1934  0DA3  131D               	bcf	29,6	;volatile
  1935                           
  1936                           ;launcher_functions.c: 268: RCSTAbits.CREN = 1;
  1937  0DA4  161D               	bsf	29,4	;volatile
  1938  0DA5  0008               	return
  1939  0DA6                     __end_of_initUART:	
  1940                           
  1941                           	psect	text2
  1942  0EC1                     __ptext2:	
  1943 ;; *************** function _UpdateGPS *****************
  1944 ;; Defined at:
  1945 ;;		line 357 in file "launcher_functions.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;  GPSupdateMes   22   37[BANK0 ] unsigned char [22]
  1950 ;; Return value:  Size  Location     Type
  1951 ;;		None               void
  1952 ;; Registers used:
  1953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1959 ;;      Params:         0       0       0       0       0       0       0       0
  1960 ;;      Locals:         0      22       0       0       0       0       0       0
  1961 ;;      Temps:          0       1       0       0       0       0       0       0
  1962 ;;      Totals:         0      23       0       0       0       0       0       0
  1963 ;;Total ram usage:       23 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    4
  1966 ;; This function calls:
  1967 ;;		_DecodeGPS
  1968 ;;		_ToggleSleepGPS
  1969 ;;		_uart_write_message
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           
  1976                           ;psect for function _UpdateGPS
  1977  0EC1                     _UpdateGPS:	
  1978                           
  1979                           ;launcher_functions.c: 359: unsigned char GPSupdateMessage[22] = "$PSRF103,01,01,00,00*"
      +                          ;
  1980                           
  1981                           ;incstack = 0
  1982                           ; Regs used in _UpdateGPS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1983  0EC1  3020               	movlw	low UpdateGPS@F4926
  1984  0EC2  0086               	movwf	6
  1985  0EC3  3001               	movlw	high UpdateGPS@F4926
  1986  0EC4  0087               	movwf	7
  1987  0EC5  3045               	movlw	low UpdateGPS@GPSupdateMessage
  1988  0EC6  0084               	movwf	4
  1989  0EC7  3000               	movlw	high UpdateGPS@GPSupdateMessage
  1990  0EC8  0085               	movwf	5
  1991  0EC9  3016               	movlw	22
  1992  0ECA  0020               	movlb	0	; select bank0
  1993  0ECB  00C4               	movwf	??_UpdateGPS
  1994  0ECC                     u2170:	
  1995  0ECC  0016               	moviw fsr1++
  1996  0ECD  001A               	movwi fsr0++
  1997  0ECE  0BC4               	decfsz	??_UpdateGPS,f
  1998  0ECF  2ECC               	goto	u2170
  1999                           
  2000                           ;launcher_functions.c: 362: RCIE = 1;
  2001  0ED0  0021               	movlb	1	; select bank1
  2002  0ED1  1691               	bsf	17,5	;volatile
  2003                           
  2004                           ;launcher_functions.c: 363: PEIE = 1;
  2005  0ED2  170B               	bsf	11,6	;volatile
  2006                           
  2007                           ;launcher_functions.c: 364: GIE = 1;
  2008  0ED3  178B               	bsf	11,7	;volatile
  2009                           
  2010                           ;launcher_functions.c: 366: if(!PORTCbits.RC7)
  2011  0ED4  0020               	movlb	0	; select bank0
  2012  0ED5  1B8E               	btfsc	14,7	;volatile
  2013  0ED6  2EDA               	goto	l2581
  2014                           
  2015                           ;launcher_functions.c: 367: ToggleSleepGPS();
  2016  0ED7  318F  2719  318E   	fcall	_ToggleSleepGPS
  2017  0EDA                     l2581:	
  2018                           
  2019                           ;launcher_functions.c: 369: gpsIndex = 0;
  2020  0EDA  0021               	movlb	1	; select bank1
  2021  0EDB  01EF               	clrf	_gpsIndex^(0+128)	;volatile
  2022                           
  2023                           ;launcher_functions.c: 370: uart_write_message(GPSupdateMessage, 22);
  2024  0EDC  3016               	movlw	22
  2025  0EDD  0020               	movlb	0	; select bank0
  2026  0EDE  00A8               	movwf	uart_write_message@size
  2027  0EDF  3000               	movlw	0
  2028  0EE0  00A9               	movwf	uart_write_message@size+1
  2029  0EE1  3045               	movlw	UpdateGPS@GPSupdateMessage& (0+255)
  2030  0EE2  3186  26DA  318E   	fcall	_uart_write_message
  2031  0EE5                     l2585:	
  2032                           ;launcher_functions.c: 371: while(!messageDoneFlag);
  2033                           
  2034  0EE5  087D               	movf	_messageDoneFlag,w
  2035  0EE6  1903               	btfsc	3,2
  2036  0EE7  2EE5               	goto	l2585
  2037                           
  2038                           ;launcher_functions.c: 373: messageDoneFlag = 0;
  2039  0EE8  01FD               	clrf	_messageDoneFlag
  2040                           
  2041                           ;launcher_functions.c: 374: DecodeGPS();
  2042  0EE9  3181  210E         	fcall	_DecodeGPS
  2043  0EEB  0008               	return
  2044  0EEC                     __end_of_UpdateGPS:	
  2045                           
  2046                           	psect	text3
  2047  0F19                     __ptext3:	
  2048 ;; *************** function _ToggleSleepGPS *****************
  2049 ;; Defined at:
  2050 ;;		line 316 in file "launcher_functions.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;		None               void
  2057 ;; Registers used:
  2058 ;;		wreg
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2064 ;;      Params:         0       0       0       0       0       0       0       0
  2065 ;;      Locals:         0       0       0       0       0       0       0       0
  2066 ;;      Temps:          0       3       0       0       0       0       0       0
  2067 ;;      Totals:         0       3       0       0       0       0       0       0
  2068 ;;Total ram usage:        3 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    2
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;;		_UpdateGPS
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           
  2080                           ;psect for function _ToggleSleepGPS
  2081  0F19                     _ToggleSleepGPS:	
  2082                           
  2083                           ;launcher_functions.c: 318: PORTAbits.RA6 = 0;
  2084                           
  2085                           ;incstack = 0
  2086                           ; Regs used in _ToggleSleepGPS: [wreg]
  2087  0F19  0020               	movlb	0	; select bank0
  2088  0F1A  130C               	bcf	12,6	;volatile
  2089                           
  2090                           ;launcher_functions.c: 319: _delay((unsigned long)((1000)*(16000000/4000.0)));
  2091  0F1B  3015               	movlw	21
  2092  0F1C  00A2               	movwf	??_ToggleSleepGPS+2
  2093  0F1D  304B               	movlw	75
  2094  0F1E  00A1               	movwf	??_ToggleSleepGPS+1
  2095  0F1F  30D1               	movlw	209
  2096  0F20  00A0               	movwf	??_ToggleSleepGPS
  2097  0F21                     u2647:	
  2098  0F21  0BA0               	decfsz	??_ToggleSleepGPS,f
  2099  0F22  2F21               	goto	u2647
  2100  0F23  0BA1               	decfsz	??_ToggleSleepGPS+1,f
  2101  0F24  2F21               	goto	u2647
  2102  0F25  0BA2               	decfsz	??_ToggleSleepGPS+2,f
  2103  0F26  2F21               	goto	u2647
  2104  0F27  0000               	nop
  2105                           
  2106                           ;launcher_functions.c: 320: PORTAbits.RA6 = 1;
  2107  0F28  0020               	movlb	0	; select bank0
  2108  0F29  170C               	bsf	12,6	;volatile
  2109                           
  2110                           ;launcher_functions.c: 321: _delay((unsigned long)((100)*(16000000/4000.0)));
  2111  0F2A  3003               	movlw	3
  2112  0F2B  00A2               	movwf	??_ToggleSleepGPS+2
  2113  0F2C  3008               	movlw	8
  2114  0F2D  00A1               	movwf	??_ToggleSleepGPS+1
  2115  0F2E  3078               	movlw	120
  2116  0F2F  00A0               	movwf	??_ToggleSleepGPS
  2117  0F30                     u2657:	
  2118  0F30  0BA0               	decfsz	??_ToggleSleepGPS,f
  2119  0F31  2F30               	goto	u2657
  2120  0F32  0BA1               	decfsz	??_ToggleSleepGPS+1,f
  2121  0F33  2F30               	goto	u2657
  2122  0F34  0BA2               	decfsz	??_ToggleSleepGPS+2,f
  2123  0F35  2F30               	goto	u2657
  2124                           
  2125                           ;launcher_functions.c: 322: PORTAbits.RA6 = 0;
  2126  0F36  0020               	movlb	0	; select bank0
  2127  0F37  130C               	bcf	12,6	;volatile
  2128                           
  2129                           ;launcher_functions.c: 323: _delay((unsigned long)((1000)*(16000000/4000.0)));
  2130  0F38  3015               	movlw	21
  2131  0F39  00A2               	movwf	??_ToggleSleepGPS+2
  2132  0F3A  304B               	movlw	75
  2133  0F3B  00A1               	movwf	??_ToggleSleepGPS+1
  2134  0F3C  30D1               	movlw	209
  2135  0F3D  00A0               	movwf	??_ToggleSleepGPS
  2136  0F3E                     u2667:	
  2137  0F3E  0BA0               	decfsz	??_ToggleSleepGPS,f
  2138  0F3F  2F3E               	goto	u2667
  2139  0F40  0BA1               	decfsz	??_ToggleSleepGPS+1,f
  2140  0F41  2F3E               	goto	u2667
  2141  0F42  0BA2               	decfsz	??_ToggleSleepGPS+2,f
  2142  0F43  2F3E               	goto	u2667
  2143  0F44  0000               	nop
  2144  0F45  0008               	return
  2145  0F46                     __end_of_ToggleSleepGPS:	
  2146                           
  2147                           	psect	text4
  2148  010E                     __ptext4:	
  2149 ;; *************** function _DecodeGPS *****************
  2150 ;; Defined at:
  2151 ;;		line 380 in file "launcher_functions.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  messageID       7   18[BANK0 ] unsigned char [7]
  2156 ;;  longitude       3   31[BANK0 ] unsigned char [3]
  2157 ;;  latitude        3   28[BANK0 ] unsigned char [3]
  2158 ;;  x               2   34[BANK0 ] int 
  2159 ;;  status          1   27[BANK0 ] unsigned char 
  2160 ;;  eastWest        1   26[BANK0 ] unsigned char 
  2161 ;;  northSouth      1   25[BANK0 ] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;		None               void
  2164 ;; Registers used:
  2165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2171 ;;      Params:         0       0       0       0       0       0       0       0
  2172 ;;      Locals:         0      18       0       0       0       0       0       0
  2173 ;;      Temps:          0       3       0       0       0       0       0       0
  2174 ;;      Totals:         0      21       0       0       0       0       0       0
  2175 ;;Total ram usage:       21 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    3
  2178 ;; This function calls:
  2179 ;;		___awdiv
  2180 ;;		___bmul
  2181 ;;		___wmul
  2182 ;; This function is called by:
  2183 ;;		_UpdateGPS
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           
  2188                           ;psect for function _DecodeGPS
  2189  010E                     _DecodeGPS:	
  2190                           
  2191                           ;launcher_functions.c: 383: unsigned char messageID[7] = "$GPGLL";
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _DecodeGPS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2195  010E  3043               	movlw	low DecodeGPS@F4928
  2196  010F  0086               	movwf	6
  2197  0110  3001               	movlw	high DecodeGPS@F4928
  2198  0111  0087               	movwf	7
  2199  0112  3032               	movlw	low DecodeGPS@messageID
  2200  0113  0084               	movwf	4
  2201  0114  3000               	movlw	high DecodeGPS@messageID
  2202  0115  0085               	movwf	5
  2203  0116  3007               	movlw	7
  2204  0117  0020               	movlb	0	; select bank0
  2205  0118  00AF               	movwf	??_DecodeGPS
  2206  0119                     u1890:	
  2207  0119  0016               	moviw fsr1++
  2208  011A  001A               	movwi fsr0++
  2209  011B  0BAF               	decfsz	??_DecodeGPS,f
  2210  011C  2919               	goto	u1890
  2211                           
  2212                           ;launcher_functions.c: 384: unsigned char latitude[3] = {0,0,0};
  2213  011D  0021               	movlb	1	; select bank1
  2214  011E  0824               	movf	DecodeGPS@F4930^(0+128),w
  2215  011F  0020               	movlb	0	; select bank0
  2216  0120  00BC               	movwf	DecodeGPS@latitude
  2217  0121  0021               	movlb	1	; select bank1
  2218  0122  0825               	movf	(DecodeGPS@F4930+1)^(0+128),w
  2219  0123  0020               	movlb	0	; select bank0
  2220  0124  00BD               	movwf	DecodeGPS@latitude+1
  2221  0125  0021               	movlb	1	; select bank1
  2222  0126  0826               	movf	(DecodeGPS@F4930+2)^(0+128),w
  2223  0127  0020               	movlb	0	; select bank0
  2224  0128  00BE               	movwf	DecodeGPS@latitude+2
  2225                           
  2226                           ;launcher_functions.c: 385: unsigned char longitude[3] = {0,0,0};
  2227  0129  0021               	movlb	1	; select bank1
  2228  012A  0827               	movf	DecodeGPS@F4932^(0+128),w
  2229  012B  0020               	movlb	0	; select bank0
  2230  012C  00BF               	movwf	DecodeGPS@longitude
  2231  012D  0021               	movlb	1	; select bank1
  2232  012E  0828               	movf	(DecodeGPS@F4932+1)^(0+128),w
  2233  012F  0020               	movlb	0	; select bank0
  2234  0130  00C0               	movwf	DecodeGPS@longitude+1
  2235  0131  0021               	movlb	1	; select bank1
  2236  0132  0829               	movf	(DecodeGPS@F4932+2)^(0+128),w
  2237  0133  0020               	movlb	0	; select bank0
  2238  0134  00C1               	movwf	DecodeGPS@longitude+2
  2239                           
  2240                           ;launcher_functions.c: 386: unsigned char northSouth;
  2241                           ;launcher_functions.c: 387: unsigned char eastWest;
  2242                           ;launcher_functions.c: 388: unsigned char status;
  2243                           ;launcher_functions.c: 389: int x;
  2244                           ;launcher_functions.c: 391: for(x=0;x<6;x++)
  2245  0135  01C2               	clrf	DecodeGPS@x
  2246  0136  01C3               	clrf	DecodeGPS@x+1
  2247  0137  0843               	movf	DecodeGPS@x+1,w
  2248  0138  3A80               	xorlw	128
  2249  0139  00AF               	movwf	??_DecodeGPS
  2250  013A  3080               	movlw	128
  2251  013B  022F               	subwf	??_DecodeGPS,w
  2252  013C  1D03               	skipz
  2253  013D  2940               	goto	u1905
  2254  013E  3006               	movlw	6
  2255  013F  0242               	subwf	DecodeGPS@x,w
  2256  0140                     u1905:	
  2257  0140  1803               	btfsc	3,0
  2258  0141  2960               	goto	l2221
  2259  0142                     l2215:	
  2260                           
  2261                           ;launcher_functions.c: 392: {
  2262                           ;launcher_functions.c: 393: if(gpsMessage[x] != messageID[x])
  2263  0142  0020               	movlb	0	; select bank0
  2264  0143  0842               	movf	DecodeGPS@x,w
  2265  0144  3E32               	addlw	DecodeGPS@messageID& (0+255)
  2266  0145  0086               	movwf	6
  2267  0146  0187               	clrf	7
  2268  0147  0842               	movf	DecodeGPS@x,w
  2269  0148  3EB1               	addlw	_gpsMessage& (0+255)
  2270  0149  0084               	movwf	4
  2271  014A  0185               	clrf	5
  2272  014B  0800               	movf	0,w
  2273  014C  0601               	xorwf	1,w
  2274  014D  1903               	skipnz
  2275  014E  2951               	goto	l2219
  2276                           
  2277                           ;launcher_functions.c: 394: gpsInvalidFlag = 1;
  2278  014F  01EF               	clrf	_gpsInvalidFlag
  2279  0150  0AEF               	incf	_gpsInvalidFlag,f
  2280  0151                     l2219:	
  2281  0151  3001               	movlw	1
  2282  0152  07C2               	addwf	DecodeGPS@x,f
  2283  0153  3000               	movlw	0
  2284  0154  3DC3               	addwfc	DecodeGPS@x+1,f
  2285  0155  0843               	movf	DecodeGPS@x+1,w
  2286  0156  3A80               	xorlw	128
  2287  0157  00AF               	movwf	??_DecodeGPS
  2288  0158  3080               	movlw	128
  2289  0159  022F               	subwf	??_DecodeGPS,w
  2290  015A  1D03               	skipz
  2291  015B  295E               	goto	u1925
  2292  015C  3006               	movlw	6
  2293  015D  0242               	subwf	DecodeGPS@x,w
  2294  015E                     u1925:	
  2295  015E  1C03               	skipc
  2296  015F  2942               	goto	l2215
  2297  0160                     l2221:	
  2298                           
  2299                           ;launcher_functions.c: 395: }
  2300                           ;launcher_functions.c: 398: x = x + 1;
  2301  0160  0020               	movlb	0	; select bank0
  2302  0161  0842               	movf	DecodeGPS@x,w
  2303  0162  3E01               	addlw	1
  2304  0163  00C2               	movwf	DecodeGPS@x
  2305  0164  3000               	movlw	0
  2306  0165  3D43               	addwfc	DecodeGPS@x+1,w
  2307  0166  00C3               	movwf	DecodeGPS@x+1
  2308                           
  2309                           ;launcher_functions.c: 401: if(gpsMessage[x]!= ',')
  2310  0167  0842               	movf	DecodeGPS@x,w
  2311  0168  3EB1               	addlw	_gpsMessage& (0+255)
  2312  0169  0086               	movwf	6
  2313  016A  0187               	clrf	7
  2314  016B  0801               	movf	1,w
  2315  016C  3A2C               	xorlw	44
  2316  016D  1903               	skipnz
  2317  016E  2A02               	goto	l2253
  2318                           
  2319                           ;launcher_functions.c: 402: {
  2320                           ;launcher_functions.c: 404: latitude[0] = (gpsMessage[x++] - 48)*10;
  2321  016F  300A               	movlw	10
  2322  0170  00AF               	movwf	??_DecodeGPS
  2323  0171  082F               	movf	??_DecodeGPS,w
  2324  0172  00A0               	movwf	___bmul@multiplicand
  2325  0173  0842               	movf	DecodeGPS@x,w
  2326  0174  3EB1               	addlw	_gpsMessage& (0+255)
  2327  0175  0086               	movwf	6
  2328  0176  0187               	clrf	7
  2329  0177  0801               	movf	1,w
  2330  0178  3ED0               	addlw	208
  2331  0179  318D  25DB  3181   	fcall	___bmul
  2332  017C  0020               	movlb	0	; select bank0
  2333  017D  00B0               	movwf	??_DecodeGPS+1
  2334  017E  0830               	movf	??_DecodeGPS+1,w
  2335  017F  00BC               	movwf	DecodeGPS@latitude
  2336  0180  3001               	movlw	1
  2337  0181  07C2               	addwf	DecodeGPS@x,f
  2338  0182  3000               	movlw	0
  2339  0183  3DC3               	addwfc	DecodeGPS@x+1,f
  2340                           
  2341                           ;launcher_functions.c: 405: latitude[0] += (gpsMessage[x++] - 48);
  2342  0184  0842               	movf	DecodeGPS@x,w
  2343  0185  3EB1               	addlw	_gpsMessage& (0+255)
  2344  0186  0086               	movwf	6
  2345  0187  0187               	clrf	7
  2346  0188  0801               	movf	1,w
  2347  0189  3ED0               	addlw	208
  2348  018A  00AF               	movwf	??_DecodeGPS
  2349  018B  082F               	movf	??_DecodeGPS,w
  2350  018C  07BC               	addwf	DecodeGPS@latitude,f
  2351  018D  3001               	movlw	1
  2352  018E  07C2               	addwf	DecodeGPS@x,f
  2353  018F  3000               	movlw	0
  2354  0190  3DC3               	addwfc	DecodeGPS@x+1,f
  2355                           
  2356                           ;launcher_functions.c: 408: latitude[1] = (gpsMessage[x++] - 48)*10;
  2357  0191  300A               	movlw	10
  2358  0192  00AF               	movwf	??_DecodeGPS
  2359  0193  082F               	movf	??_DecodeGPS,w
  2360  0194  00A0               	movwf	___bmul@multiplicand
  2361  0195  0842               	movf	DecodeGPS@x,w
  2362  0196  3EB1               	addlw	_gpsMessage& (0+255)
  2363  0197  0086               	movwf	6
  2364  0198  0187               	clrf	7
  2365  0199  0801               	movf	1,w
  2366  019A  3ED0               	addlw	208
  2367  019B  318D  25DB  3181   	fcall	___bmul
  2368  019E  0020               	movlb	0	; select bank0
  2369  019F  00B0               	movwf	??_DecodeGPS+1
  2370  01A0  0830               	movf	??_DecodeGPS+1,w
  2371  01A1  00BD               	movwf	DecodeGPS@latitude+1
  2372  01A2  3001               	movlw	1
  2373  01A3  07C2               	addwf	DecodeGPS@x,f
  2374  01A4  3000               	movlw	0
  2375  01A5  3DC3               	addwfc	DecodeGPS@x+1,f
  2376                           
  2377                           ;launcher_functions.c: 409: latitude[1] += (gpsMessage[x++] - 48);
  2378  01A6  0842               	movf	DecodeGPS@x,w
  2379  01A7  3EB1               	addlw	_gpsMessage& (0+255)
  2380  01A8  0086               	movwf	6
  2381  01A9  0187               	clrf	7
  2382  01AA  0801               	movf	1,w
  2383  01AB  3ED0               	addlw	208
  2384  01AC  00AF               	movwf	??_DecodeGPS
  2385  01AD  082F               	movf	??_DecodeGPS,w
  2386  01AE  07BD               	addwf	DecodeGPS@latitude+1,f
  2387  01AF  3001               	movlw	1
  2388  01B0  07C2               	addwf	DecodeGPS@x,f
  2389  01B1  3000               	movlw	0
  2390  01B2  3DC3               	addwfc	DecodeGPS@x+1,f
  2391                           
  2392                           ;launcher_functions.c: 412: x = x + 1;
  2393  01B3  0842               	movf	DecodeGPS@x,w
  2394  01B4  3E01               	addlw	1
  2395  01B5  00C2               	movwf	DecodeGPS@x
  2396  01B6  3000               	movlw	0
  2397  01B7  3D43               	addwfc	DecodeGPS@x+1,w
  2398  01B8  00C3               	movwf	DecodeGPS@x+1
  2399                           
  2400                           ;launcher_functions.c: 415: latitude[2] = (gpsMessage[x++] - 48)*10;
  2401  01B9  300A               	movlw	10
  2402  01BA  00AF               	movwf	??_DecodeGPS
  2403  01BB  082F               	movf	??_DecodeGPS,w
  2404  01BC  00A0               	movwf	___bmul@multiplicand
  2405  01BD  0842               	movf	DecodeGPS@x,w
  2406  01BE  3EB1               	addlw	_gpsMessage& (0+255)
  2407  01BF  0086               	movwf	6
  2408  01C0  0187               	clrf	7
  2409  01C1  0801               	movf	1,w
  2410  01C2  3ED0               	addlw	208
  2411  01C3  318D  25DB  3181   	fcall	___bmul
  2412  01C6  0020               	movlb	0	; select bank0
  2413  01C7  00B0               	movwf	??_DecodeGPS+1
  2414  01C8  0830               	movf	??_DecodeGPS+1,w
  2415  01C9  00BE               	movwf	DecodeGPS@latitude+2
  2416  01CA  3001               	movlw	1
  2417  01CB  07C2               	addwf	DecodeGPS@x,f
  2418  01CC  3000               	movlw	0
  2419  01CD  3DC3               	addwfc	DecodeGPS@x+1,f
  2420                           
  2421                           ;launcher_functions.c: 416: latitude[2] += (gpsMessage[x++] - 48);
  2422  01CE  0842               	movf	DecodeGPS@x,w
  2423  01CF  3EB1               	addlw	_gpsMessage& (0+255)
  2424  01D0  0086               	movwf	6
  2425  01D1  0187               	clrf	7
  2426  01D2  0801               	movf	1,w
  2427  01D3  3ED0               	addlw	208
  2428  01D4  00AF               	movwf	??_DecodeGPS
  2429  01D5  082F               	movf	??_DecodeGPS,w
  2430  01D6  07BE               	addwf	DecodeGPS@latitude+2,f
  2431  01D7  3001               	movlw	1
  2432  01D8  07C2               	addwf	DecodeGPS@x,f
  2433  01D9  3000               	movlw	0
  2434  01DA  3DC3               	addwfc	DecodeGPS@x+1,f
  2435                           
  2436                           ;launcher_functions.c: 417: latitude[2] = (latitude[2]*60)/100;
  2437  01DB  3064               	movlw	100
  2438  01DC  00A6               	movwf	___awdiv@divisor
  2439  01DD  3000               	movlw	0
  2440  01DE  00A7               	movwf	___awdiv@divisor+1
  2441  01DF  083E               	movf	DecodeGPS@latitude+2,w
  2442  01E0  00AF               	movwf	??_DecodeGPS
  2443  01E1  01B0               	clrf	??_DecodeGPS+1
  2444  01E2  082F               	movf	??_DecodeGPS,w
  2445  01E3  00A0               	movwf	___wmul@multiplier
  2446  01E4  0830               	movf	??_DecodeGPS+1,w
  2447  01E5  00A1               	movwf	___wmul@multiplier+1
  2448  01E6  303C               	movlw	60
  2449  01E7  00A2               	movwf	___wmul@multiplicand
  2450  01E8  3000               	movlw	0
  2451  01E9  00A3               	movwf	___wmul@multiplicand+1
  2452  01EA  318E  2679  3181   	fcall	___wmul
  2453  01ED  0020               	movlb	0	; select bank0
  2454  01EE  0821               	movf	?___wmul+1,w
  2455  01EF  01A9               	clrf	___awdiv@dividend+1
  2456  01F0  07A9               	addwf	___awdiv@dividend+1,f
  2457  01F1  0820               	movf	?___wmul,w
  2458  01F2  01A8               	clrf	___awdiv@dividend
  2459  01F3  07A8               	addwf	___awdiv@dividend,f
  2460  01F4  318F  27AC  3181   	fcall	___awdiv
  2461  01F7  0020               	movlb	0	; select bank0
  2462  01F8  0826               	movf	?___awdiv,w
  2463  01F9  00B1               	movwf	??_DecodeGPS+2
  2464  01FA  0831               	movf	??_DecodeGPS+2,w
  2465  01FB  00BE               	movwf	DecodeGPS@latitude+2
  2466                           
  2467                           ;launcher_functions.c: 420: x = x + 2;
  2468  01FC  0842               	movf	DecodeGPS@x,w
  2469  01FD  3E02               	addlw	2
  2470  01FE  00C2               	movwf	DecodeGPS@x
  2471  01FF  3000               	movlw	0
  2472  0200  3D43               	addwfc	DecodeGPS@x+1,w
  2473  0201  00C3               	movwf	DecodeGPS@x+1
  2474  0202                     l2253:	
  2475                           
  2476                           ;launcher_functions.c: 421: }
  2477                           ;launcher_functions.c: 424: x = x + 1;
  2478  0202  0842               	movf	DecodeGPS@x,w
  2479  0203  3E01               	addlw	1
  2480  0204  00C2               	movwf	DecodeGPS@x
  2481  0205  3000               	movlw	0
  2482  0206  3D43               	addwfc	DecodeGPS@x+1,w
  2483  0207  00C3               	movwf	DecodeGPS@x+1
  2484                           
  2485                           ;launcher_functions.c: 427: if(gpsMessage[x] != ',')
  2486  0208  0842               	movf	DecodeGPS@x,w
  2487  0209  3EB1               	addlw	_gpsMessage& (0+255)
  2488  020A  0086               	movwf	6
  2489  020B  0187               	clrf	7
  2490  020C  0801               	movf	1,w
  2491  020D  3A2C               	xorlw	44
  2492  020E  1903               	skipnz
  2493  020F  2A1C               	goto	l2261
  2494                           
  2495                           ;launcher_functions.c: 428: northSouth = gpsMessage[x++];
  2496  0210  0842               	movf	DecodeGPS@x,w
  2497  0211  3EB1               	addlw	_gpsMessage& (0+255)
  2498  0212  0086               	movwf	6
  2499  0213  0187               	clrf	7
  2500  0214  0801               	movf	1,w
  2501  0215  00AF               	movwf	??_DecodeGPS
  2502  0216  082F               	movf	??_DecodeGPS,w
  2503  0217  00B9               	movwf	DecodeGPS@northSouth
  2504  0218  3001               	movlw	1
  2505  0219  07C2               	addwf	DecodeGPS@x,f
  2506  021A  3000               	movlw	0
  2507  021B  3DC3               	addwfc	DecodeGPS@x+1,f
  2508  021C                     l2261:	
  2509                           
  2510                           ;launcher_functions.c: 431: x = x + 1;
  2511  021C  0842               	movf	DecodeGPS@x,w
  2512  021D  3E01               	addlw	1
  2513  021E  00C2               	movwf	DecodeGPS@x
  2514  021F  3000               	movlw	0
  2515  0220  3D43               	addwfc	DecodeGPS@x+1,w
  2516  0221  00C3               	movwf	DecodeGPS@x+1
  2517                           
  2518                           ;launcher_functions.c: 434: if(gpsMessage[x]!= ',')
  2519  0222  0842               	movf	DecodeGPS@x,w
  2520  0223  3EB1               	addlw	_gpsMessage& (0+255)
  2521  0224  0086               	movwf	6
  2522  0225  0187               	clrf	7
  2523  0226  0801               	movf	1,w
  2524  0227  3A2C               	xorlw	44
  2525  0228  1903               	skipnz
  2526  0229  2AD2               	goto	l2297
  2527                           
  2528                           ;launcher_functions.c: 435: {
  2529                           ;launcher_functions.c: 437: longitude[0] = (gpsMessage[x++] - 48)*100;
  2530  022A  3064               	movlw	100
  2531  022B  00AF               	movwf	??_DecodeGPS
  2532  022C  082F               	movf	??_DecodeGPS,w
  2533  022D  00A0               	movwf	___bmul@multiplicand
  2534  022E  0842               	movf	DecodeGPS@x,w
  2535  022F  3EB1               	addlw	_gpsMessage& (0+255)
  2536  0230  0086               	movwf	6
  2537  0231  0187               	clrf	7
  2538  0232  0801               	movf	1,w
  2539  0233  3ED0               	addlw	208
  2540  0234  318D  25DB  3181   	fcall	___bmul
  2541  0237  0020               	movlb	0	; select bank0
  2542  0238  00B0               	movwf	??_DecodeGPS+1
  2543  0239  0830               	movf	??_DecodeGPS+1,w
  2544  023A  00BF               	movwf	DecodeGPS@longitude
  2545  023B  3001               	movlw	1
  2546  023C  07C2               	addwf	DecodeGPS@x,f
  2547  023D  3000               	movlw	0
  2548  023E  3DC3               	addwfc	DecodeGPS@x+1,f
  2549                           
  2550                           ;launcher_functions.c: 438: longitude[0] += (gpsMessage[x++] - 48)*10;
  2551  023F  300A               	movlw	10
  2552  0240  00AF               	movwf	??_DecodeGPS
  2553  0241  082F               	movf	??_DecodeGPS,w
  2554  0242  00A0               	movwf	___bmul@multiplicand
  2555  0243  0842               	movf	DecodeGPS@x,w
  2556  0244  3EB1               	addlw	_gpsMessage& (0+255)
  2557  0245  0086               	movwf	6
  2558  0246  0187               	clrf	7
  2559  0247  0801               	movf	1,w
  2560  0248  3ED0               	addlw	208
  2561  0249  318D  25DB  3181   	fcall	___bmul
  2562  024C  0020               	movlb	0	; select bank0
  2563  024D  00B0               	movwf	??_DecodeGPS+1
  2564  024E  0830               	movf	??_DecodeGPS+1,w
  2565  024F  07BF               	addwf	DecodeGPS@longitude,f
  2566  0250  3001               	movlw	1
  2567  0251  07C2               	addwf	DecodeGPS@x,f
  2568  0252  3000               	movlw	0
  2569  0253  3DC3               	addwfc	DecodeGPS@x+1,f
  2570                           
  2571                           ;launcher_functions.c: 439: longitude[0] += (gpsMessage[x++] - 48);
  2572  0254  0842               	movf	DecodeGPS@x,w
  2573  0255  3EB1               	addlw	_gpsMessage& (0+255)
  2574  0256  0086               	movwf	6
  2575  0257  0187               	clrf	7
  2576  0258  0801               	movf	1,w
  2577  0259  3ED0               	addlw	208
  2578  025A  00AF               	movwf	??_DecodeGPS
  2579  025B  082F               	movf	??_DecodeGPS,w
  2580  025C  07BF               	addwf	DecodeGPS@longitude,f
  2581  025D  3001               	movlw	1
  2582  025E  07C2               	addwf	DecodeGPS@x,f
  2583  025F  3000               	movlw	0
  2584  0260  3DC3               	addwfc	DecodeGPS@x+1,f
  2585                           
  2586                           ;launcher_functions.c: 442: longitude[1] = (gpsMessage[x++] - 48)*10;
  2587  0261  300A               	movlw	10
  2588  0262  00AF               	movwf	??_DecodeGPS
  2589  0263  082F               	movf	??_DecodeGPS,w
  2590  0264  00A0               	movwf	___bmul@multiplicand
  2591  0265  0842               	movf	DecodeGPS@x,w
  2592  0266  3EB1               	addlw	_gpsMessage& (0+255)
  2593  0267  0086               	movwf	6
  2594  0268  0187               	clrf	7
  2595  0269  0801               	movf	1,w
  2596  026A  3ED0               	addlw	208
  2597  026B  318D  25DB  3181   	fcall	___bmul
  2598  026E  0020               	movlb	0	; select bank0
  2599  026F  00B0               	movwf	??_DecodeGPS+1
  2600  0270  0830               	movf	??_DecodeGPS+1,w
  2601  0271  00C0               	movwf	DecodeGPS@longitude+1
  2602  0272  3001               	movlw	1
  2603  0273  07C2               	addwf	DecodeGPS@x,f
  2604  0274  3000               	movlw	0
  2605  0275  3DC3               	addwfc	DecodeGPS@x+1,f
  2606                           
  2607                           ;launcher_functions.c: 443: longitude[1] += (gpsMessage[x++] - 48);
  2608  0276  0842               	movf	DecodeGPS@x,w
  2609  0277  3EB1               	addlw	_gpsMessage& (0+255)
  2610  0278  0086               	movwf	6
  2611  0279  0187               	clrf	7
  2612  027A  0801               	movf	1,w
  2613  027B  3ED0               	addlw	208
  2614  027C  00AF               	movwf	??_DecodeGPS
  2615  027D  082F               	movf	??_DecodeGPS,w
  2616  027E  07C0               	addwf	DecodeGPS@longitude+1,f
  2617  027F  3001               	movlw	1
  2618  0280  07C2               	addwf	DecodeGPS@x,f
  2619  0281  3000               	movlw	0
  2620  0282  3DC3               	addwfc	DecodeGPS@x+1,f
  2621                           
  2622                           ;launcher_functions.c: 446: x = x + 1;
  2623  0283  0842               	movf	DecodeGPS@x,w
  2624  0284  3E01               	addlw	1
  2625  0285  00C2               	movwf	DecodeGPS@x
  2626  0286  3000               	movlw	0
  2627  0287  3D43               	addwfc	DecodeGPS@x+1,w
  2628  0288  00C3               	movwf	DecodeGPS@x+1
  2629                           
  2630                           ;launcher_functions.c: 449: longitude[2] = (gpsMessage[x++] - 48)*10;
  2631  0289  300A               	movlw	10
  2632  028A  00AF               	movwf	??_DecodeGPS
  2633  028B  082F               	movf	??_DecodeGPS,w
  2634  028C  00A0               	movwf	___bmul@multiplicand
  2635  028D  0842               	movf	DecodeGPS@x,w
  2636  028E  3EB1               	addlw	_gpsMessage& (0+255)
  2637  028F  0086               	movwf	6
  2638  0290  0187               	clrf	7
  2639  0291  0801               	movf	1,w
  2640  0292  3ED0               	addlw	208
  2641  0293  318D  25DB  3181   	fcall	___bmul
  2642  0296  0020               	movlb	0	; select bank0
  2643  0297  00B0               	movwf	??_DecodeGPS+1
  2644  0298  0830               	movf	??_DecodeGPS+1,w
  2645  0299  00C1               	movwf	DecodeGPS@longitude+2
  2646  029A  3001               	movlw	1
  2647  029B  07C2               	addwf	DecodeGPS@x,f
  2648  029C  3000               	movlw	0
  2649  029D  3DC3               	addwfc	DecodeGPS@x+1,f
  2650                           
  2651                           ;launcher_functions.c: 450: longitude[2] += (gpsMessage[x++] - 48);
  2652  029E  0842               	movf	DecodeGPS@x,w
  2653  029F  3EB1               	addlw	_gpsMessage& (0+255)
  2654  02A0  0086               	movwf	6
  2655  02A1  0187               	clrf	7
  2656  02A2  0801               	movf	1,w
  2657  02A3  3ED0               	addlw	208
  2658  02A4  00AF               	movwf	??_DecodeGPS
  2659  02A5  082F               	movf	??_DecodeGPS,w
  2660  02A6  07C1               	addwf	DecodeGPS@longitude+2,f
  2661  02A7  3001               	movlw	1
  2662  02A8  07C2               	addwf	DecodeGPS@x,f
  2663  02A9  3000               	movlw	0
  2664  02AA  3DC3               	addwfc	DecodeGPS@x+1,f
  2665                           
  2666                           ;launcher_functions.c: 451: longitude[2] = (longitude[2]*60)/100;
  2667  02AB  3064               	movlw	100
  2668  02AC  00A6               	movwf	___awdiv@divisor
  2669  02AD  3000               	movlw	0
  2670  02AE  00A7               	movwf	___awdiv@divisor+1
  2671  02AF  0841               	movf	DecodeGPS@longitude+2,w
  2672  02B0  00AF               	movwf	??_DecodeGPS
  2673  02B1  01B0               	clrf	??_DecodeGPS+1
  2674  02B2  082F               	movf	??_DecodeGPS,w
  2675  02B3  00A0               	movwf	___wmul@multiplier
  2676  02B4  0830               	movf	??_DecodeGPS+1,w
  2677  02B5  00A1               	movwf	___wmul@multiplier+1
  2678  02B6  303C               	movlw	60
  2679  02B7  00A2               	movwf	___wmul@multiplicand
  2680  02B8  3000               	movlw	0
  2681  02B9  00A3               	movwf	___wmul@multiplicand+1
  2682  02BA  318E  2679  3181   	fcall	___wmul
  2683  02BD  0020               	movlb	0	; select bank0
  2684  02BE  0821               	movf	?___wmul+1,w
  2685  02BF  01A9               	clrf	___awdiv@dividend+1
  2686  02C0  07A9               	addwf	___awdiv@dividend+1,f
  2687  02C1  0820               	movf	?___wmul,w
  2688  02C2  01A8               	clrf	___awdiv@dividend
  2689  02C3  07A8               	addwf	___awdiv@dividend,f
  2690  02C4  318F  27AC  3181   	fcall	___awdiv
  2691  02C7  0020               	movlb	0	; select bank0
  2692  02C8  0826               	movf	?___awdiv,w
  2693  02C9  00B1               	movwf	??_DecodeGPS+2
  2694  02CA  0831               	movf	??_DecodeGPS+2,w
  2695  02CB  00C1               	movwf	DecodeGPS@longitude+2
  2696                           
  2697                           ;launcher_functions.c: 454: x = x + 2;
  2698  02CC  0842               	movf	DecodeGPS@x,w
  2699  02CD  3E02               	addlw	2
  2700  02CE  00C2               	movwf	DecodeGPS@x
  2701  02CF  3000               	movlw	0
  2702  02D0  3D43               	addwfc	DecodeGPS@x+1,w
  2703  02D1  00C3               	movwf	DecodeGPS@x+1
  2704  02D2                     l2297:	
  2705                           
  2706                           ;launcher_functions.c: 455: }
  2707                           ;launcher_functions.c: 458: x = x + 1;
  2708  02D2  0842               	movf	DecodeGPS@x,w
  2709  02D3  3E01               	addlw	1
  2710  02D4  00C2               	movwf	DecodeGPS@x
  2711  02D5  3000               	movlw	0
  2712  02D6  3D43               	addwfc	DecodeGPS@x+1,w
  2713  02D7  00C3               	movwf	DecodeGPS@x+1
  2714                           
  2715                           ;launcher_functions.c: 461: if(gpsMessage[x] != ',')
  2716  02D8  0842               	movf	DecodeGPS@x,w
  2717  02D9  3EB1               	addlw	_gpsMessage& (0+255)
  2718  02DA  0086               	movwf	6
  2719  02DB  0187               	clrf	7
  2720  02DC  0801               	movf	1,w
  2721  02DD  3A2C               	xorlw	44
  2722  02DE  1903               	skipnz
  2723  02DF  2AEC               	goto	l2305
  2724                           
  2725                           ;launcher_functions.c: 462: eastWest = gpsMessage[x++];
  2726  02E0  0842               	movf	DecodeGPS@x,w
  2727  02E1  3EB1               	addlw	_gpsMessage& (0+255)
  2728  02E2  0086               	movwf	6
  2729  02E3  0187               	clrf	7
  2730  02E4  0801               	movf	1,w
  2731  02E5  00AF               	movwf	??_DecodeGPS
  2732  02E6  082F               	movf	??_DecodeGPS,w
  2733  02E7  00BA               	movwf	DecodeGPS@eastWest
  2734  02E8  3001               	movlw	1
  2735  02E9  07C2               	addwf	DecodeGPS@x,f
  2736  02EA  3000               	movlw	0
  2737  02EB  3DC3               	addwfc	DecodeGPS@x+1,f
  2738  02EC                     l2305:	
  2739                           
  2740                           ;launcher_functions.c: 465: x = x + 1;
  2741  02EC  0842               	movf	DecodeGPS@x,w
  2742  02ED  3E01               	addlw	1
  2743  02EE  00C2               	movwf	DecodeGPS@x
  2744  02EF  3000               	movlw	0
  2745  02F0  3D43               	addwfc	DecodeGPS@x+1,w
  2746  02F1  00C3               	movwf	DecodeGPS@x+1
  2747  02F2                     l2307:	
  2748                           ;launcher_functions.c: 468: while(gpsMessage[x++] != ','){}
  2749                           
  2750  02F2  0843               	movf	DecodeGPS@x+1,w
  2751  02F3  00B0               	movwf	??_DecodeGPS+1
  2752  02F4  0842               	movf	DecodeGPS@x,w
  2753  02F5  00AF               	movwf	??_DecodeGPS
  2754  02F6  0AC2               	incf	DecodeGPS@x,f
  2755  02F7  1903               	skipnz
  2756  02F8  0AC3               	incf	DecodeGPS@x+1,f
  2757  02F9  082F               	movf	??_DecodeGPS,w
  2758  02FA  3EB1               	addlw	_gpsMessage& (0+255)
  2759  02FB  0086               	movwf	6
  2760  02FC  0187               	clrf	7
  2761  02FD  0801               	movf	1,w
  2762  02FE  3A2C               	xorlw	44
  2763  02FF  1D03               	skipz
  2764  0300  2AF2               	goto	l2307
  2765                           
  2766                           ;launcher_functions.c: 471: status = gpsMessage[x];
  2767  0301  0842               	movf	DecodeGPS@x,w
  2768  0302  3EB1               	addlw	_gpsMessage& (0+255)
  2769  0303  0086               	movwf	6
  2770  0304  0187               	clrf	7
  2771  0305  0801               	movf	1,w
  2772  0306  00AF               	movwf	??_DecodeGPS
  2773  0307  082F               	movf	??_DecodeGPS,w
  2774  0308  00BB               	movwf	DecodeGPS@status
  2775                           
  2776                           ;launcher_functions.c: 473: if(status == 'A')
  2777  0309  083B               	movf	DecodeGPS@status,w
  2778  030A  3A41               	xorlw	65
  2779  030B  1D03               	skipz
  2780  030C  2B0F               	goto	l400
  2781                           
  2782                           ;launcher_functions.c: 474: gpsInvalidFlag = 0;
  2783  030D  01EF               	clrf	_gpsInvalidFlag
  2784  030E  2B11               	goto	l2315
  2785  030F                     l400:	
  2786                           
  2787                           ;launcher_functions.c: 475: else
  2788                           ;launcher_functions.c: 476: gpsInvalidFlag = 1;
  2789  030F  01EF               	clrf	_gpsInvalidFlag
  2790  0310  0AEF               	incf	_gpsInvalidFlag,f
  2791  0311                     l2315:	
  2792                           
  2793                           ;launcher_functions.c: 480: if(!gpsInvalidFlag)
  2794  0311  08EF               	movf	_gpsInvalidFlag,f
  2795  0312  1D03               	skipz
  2796  0313  0008               	return
  2797                           
  2798                           ;launcher_functions.c: 481: {
  2799                           ;launcher_functions.c: 483: for(x=0;x<3;x++)
  2800  0314  01C2               	clrf	DecodeGPS@x
  2801  0315  01C3               	clrf	DecodeGPS@x+1
  2802  0316  0843               	movf	DecodeGPS@x+1,w
  2803  0317  3A80               	xorlw	128
  2804  0318  00AF               	movwf	??_DecodeGPS
  2805  0319  3080               	movlw	128
  2806  031A  022F               	subwf	??_DecodeGPS,w
  2807  031B  1D03               	skipz
  2808  031C  2B1F               	goto	u2005
  2809  031D  3003               	movlw	3
  2810  031E  0242               	subwf	DecodeGPS@x,w
  2811  031F                     u2005:	
  2812  031F  1803               	btfsc	3,0
  2813  0320  2B49               	goto	l2329
  2814  0321                     l2323:	
  2815                           
  2816                           ;launcher_functions.c: 484: {
  2817                           ;launcher_functions.c: 485: validLatitude[x] = latitude[x];
  2818  0321  0020               	movlb	0	; select bank0
  2819  0322  0842               	movf	DecodeGPS@x,w
  2820  0323  3E3C               	addlw	DecodeGPS@latitude& (0+255)
  2821  0324  0086               	movwf	6
  2822  0325  0187               	clrf	7
  2823  0326  0801               	movf	1,w
  2824  0327  00AF               	movwf	??_DecodeGPS
  2825  0328  0842               	movf	DecodeGPS@x,w
  2826  0329  3EAA               	addlw	_validLatitude& (0+255)
  2827  032A  0086               	movwf	6
  2828  032B  0187               	clrf	7
  2829  032C  082F               	movf	??_DecodeGPS,w
  2830  032D  0081               	movwf	1
  2831                           
  2832                           ;launcher_functions.c: 486: validLongitude[x] = longitude[x];
  2833  032E  0842               	movf	DecodeGPS@x,w
  2834  032F  3E3F               	addlw	DecodeGPS@longitude& (0+255)
  2835  0330  0086               	movwf	6
  2836  0331  0187               	clrf	7
  2837  0332  0801               	movf	1,w
  2838  0333  00AF               	movwf	??_DecodeGPS
  2839  0334  0842               	movf	DecodeGPS@x,w
  2840  0335  3EAD               	addlw	_validLongitude& (0+255)
  2841  0336  0086               	movwf	6
  2842  0337  0187               	clrf	7
  2843  0338  082F               	movf	??_DecodeGPS,w
  2844  0339  0081               	movwf	1
  2845  033A  3001               	movlw	1
  2846  033B  07C2               	addwf	DecodeGPS@x,f
  2847  033C  3000               	movlw	0
  2848  033D  3DC3               	addwfc	DecodeGPS@x+1,f
  2849  033E  0843               	movf	DecodeGPS@x+1,w
  2850  033F  3A80               	xorlw	128
  2851  0340  00AF               	movwf	??_DecodeGPS
  2852  0341  3080               	movlw	128
  2853  0342  022F               	subwf	??_DecodeGPS,w
  2854  0343  1D03               	skipz
  2855  0344  2B47               	goto	u2015
  2856  0345  3003               	movlw	3
  2857  0346  0242               	subwf	DecodeGPS@x,w
  2858  0347                     u2015:	
  2859  0347  1C03               	skipc
  2860  0348  2B21               	goto	l2323
  2861  0349                     l2329:	
  2862                           
  2863                           ;launcher_functions.c: 487: }
  2864                           ;launcher_functions.c: 488: validNorthSouth = northSouth;
  2865  0349  0020               	movlb	0	; select bank0
  2866  034A  0839               	movf	DecodeGPS@northSouth,w
  2867  034B  00AF               	movwf	??_DecodeGPS
  2868  034C  082F               	movf	??_DecodeGPS,w
  2869  034D  0021               	movlb	1	; select bank1
  2870  034E  00EE               	movwf	_validNorthSouth^(0+128)
  2871                           
  2872                           ;launcher_functions.c: 489: validEastWest = eastWest;
  2873  034F  0020               	movlb	0	; select bank0
  2874  0350  083A               	movf	DecodeGPS@eastWest,w
  2875  0351  00AF               	movwf	??_DecodeGPS
  2876  0352  082F               	movf	??_DecodeGPS,w
  2877  0353  0021               	movlb	1	; select bank1
  2878  0354  00ED               	movwf	_validEastWest^(0+128)
  2879  0355  0008               	return
  2880  0356                     __end_of_DecodeGPS:	
  2881                           
  2882                           	psect	text5
  2883  0E79                     __ptext5:	
  2884 ;; *************** function ___wmul *****************
  2885 ;; Defined at:
  2886 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2889 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  product         2    4[BANK0 ] unsigned int 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  2    0[BANK0 ] unsigned int 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2901 ;;      Params:         0       4       0       0       0       0       0       0
  2902 ;;      Locals:         0       2       0       0       0       0       0       0
  2903 ;;      Temps:          0       0       0       0       0       0       0       0
  2904 ;;      Totals:         0       6       0       0       0       0       0       0
  2905 ;;Total ram usage:        6 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    2
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_DecodeGPS
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           
  2916                           ;psect for function ___wmul
  2917  0E79                     ___wmul:	
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2921  0E79  0020               	movlb	0	; select bank0
  2922  0E7A  01A4               	clrf	___wmul@product
  2923  0E7B  01A5               	clrf	___wmul@product+1
  2924  0E7C                     l1935:	
  2925  0E7C  1C20               	btfss	___wmul@multiplier,0
  2926  0E7D  2E82               	goto	l568
  2927  0E7E  0822               	movf	___wmul@multiplicand,w
  2928  0E7F  07A4               	addwf	___wmul@product,f
  2929  0E80  0823               	movf	___wmul@multiplicand+1,w
  2930  0E81  3DA5               	addwfc	___wmul@product+1,f
  2931  0E82                     l568:	
  2932  0E82  3001               	movlw	1
  2933  0E83                     u1405:	
  2934  0E83  35A2               	lslf	___wmul@multiplicand,f
  2935  0E84  0DA3               	rlf	___wmul@multiplicand+1,f
  2936  0E85  0B89               	decfsz	9,f
  2937  0E86  2E83               	goto	u1405
  2938  0E87  3001               	movlw	1
  2939  0E88                     u1415:	
  2940  0E88  36A1               	lsrf	___wmul@multiplier+1,f
  2941  0E89  0CA0               	rrf	___wmul@multiplier,f
  2942  0E8A  0B89               	decfsz	9,f
  2943  0E8B  2E88               	goto	u1415
  2944  0E8C  0821               	movf	___wmul@multiplier+1,w
  2945  0E8D  0420               	iorwf	___wmul@multiplier,w
  2946  0E8E  1D03               	skipz
  2947  0E8F  2E7C               	goto	l1935
  2948  0E90  0825               	movf	___wmul@product+1,w
  2949  0E91  01A1               	clrf	?___wmul+1
  2950  0E92  07A1               	addwf	?___wmul+1,f
  2951  0E93  0824               	movf	___wmul@product,w
  2952  0E94  01A0               	clrf	?___wmul
  2953  0E95  07A0               	addwf	?___wmul,f
  2954  0E96  0008               	return
  2955  0E97                     __end_of___wmul:	
  2956                           
  2957                           	psect	text6
  2958  0DDB                     __ptext6:	
  2959 ;; *************** function ___bmul *****************
  2960 ;; Defined at:
  2961 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  multiplier      1    wreg     unsigned char 
  2964 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2967 ;;  product         1    2[BANK0 ] unsigned char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      unsigned char 
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2977 ;;      Params:         0       1       0       0       0       0       0       0
  2978 ;;      Locals:         0       2       0       0       0       0       0       0
  2979 ;;      Temps:          0       1       0       0       0       0       0       0
  2980 ;;      Totals:         0       4       0       0       0       0       0       0
  2981 ;;Total ram usage:        4 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    2
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_DecodeGPS
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function ___bmul
  2993  0DDB                     ___bmul:	
  2994                           
  2995                           ;incstack = 0
  2996                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2997                           ;___bmul@multiplier stored from wreg
  2998  0DDB  0020               	movlb	0	; select bank0
  2999  0DDC  00A3               	movwf	___bmul@multiplier
  3000  0DDD  01A2               	clrf	___bmul@product
  3001  0DDE                     l1947:	
  3002  0DDE  1C23               	btfss	___bmul@multiplier,0
  3003  0DDF  2DE4               	goto	l1951
  3004  0DE0  0820               	movf	___bmul@multiplicand,w
  3005  0DE1  00A1               	movwf	??___bmul
  3006  0DE2  0821               	movf	??___bmul,w
  3007  0DE3  07A2               	addwf	___bmul@product,f
  3008  0DE4                     l1951:	
  3009  0DE4  1003               	clrc
  3010  0DE5  0DA0               	rlf	___bmul@multiplicand,f
  3011  0DE6  1003               	clrc
  3012  0DE7  0CA3               	rrf	___bmul@multiplier,f
  3013  0DE8  08A3               	movf	___bmul@multiplier,f
  3014  0DE9  1D03               	skipz
  3015  0DEA  2DDE               	goto	l1947
  3016  0DEB  0822               	movf	___bmul@product,w
  3017  0DEC  0008               	return
  3018  0DED                     __end_of___bmul:	
  3019                           
  3020                           	psect	text7
  3021  0FAC                     __ptext7:	
  3022 ;; *************** function ___awdiv *****************
  3023 ;; Defined at:
  3024 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  divisor         2    6[BANK0 ] int 
  3027 ;;  dividend        2    8[BANK0 ] int 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  quotient        2   13[BANK0 ] int 
  3030 ;;  sign            1   12[BANK0 ] unsigned char 
  3031 ;;  counter         1   11[BANK0 ] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  2    6[BANK0 ] int 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3041 ;;      Params:         0       4       0       0       0       0       0       0
  3042 ;;      Locals:         0       4       0       0       0       0       0       0
  3043 ;;      Temps:          0       1       0       0       0       0       0       0
  3044 ;;      Totals:         0       9       0       0       0       0       0       0
  3045 ;;Total ram usage:        9 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    2
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_DecodeGPS
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function ___awdiv
  3057  0FAC                     ___awdiv:	
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3061  0FAC  0020               	movlb	0	; select bank0
  3062  0FAD  01AC               	clrf	___awdiv@sign
  3063  0FAE  1FA7               	btfss	___awdiv@divisor+1,7
  3064  0FAF  2FB7               	goto	l1969
  3065  0FB0  09A6               	comf	___awdiv@divisor,f
  3066  0FB1  09A7               	comf	___awdiv@divisor+1,f
  3067  0FB2  0AA6               	incf	___awdiv@divisor,f
  3068  0FB3  1903               	skipnz
  3069  0FB4  0AA7               	incf	___awdiv@divisor+1,f
  3070  0FB5  01AC               	clrf	___awdiv@sign
  3071  0FB6  0AAC               	incf	___awdiv@sign,f
  3072  0FB7                     l1969:	
  3073  0FB7  1FA9               	btfss	___awdiv@dividend+1,7
  3074  0FB8  2FC2               	goto	l1975
  3075  0FB9  09A8               	comf	___awdiv@dividend,f
  3076  0FBA  09A9               	comf	___awdiv@dividend+1,f
  3077  0FBB  0AA8               	incf	___awdiv@dividend,f
  3078  0FBC  1903               	skipnz
  3079  0FBD  0AA9               	incf	___awdiv@dividend+1,f
  3080  0FBE  3001               	movlw	1
  3081  0FBF  00AA               	movwf	??___awdiv
  3082  0FC0  082A               	movf	??___awdiv,w
  3083  0FC1  06AC               	xorwf	___awdiv@sign,f
  3084  0FC2                     l1975:	
  3085  0FC2  01AD               	clrf	___awdiv@quotient
  3086  0FC3  01AE               	clrf	___awdiv@quotient+1
  3087  0FC4  0827               	movf	___awdiv@divisor+1,w
  3088  0FC5  0426               	iorwf	___awdiv@divisor,w
  3089  0FC6  1903               	skipnz
  3090  0FC7  2FF1               	goto	l1997
  3091  0FC8  01AB               	clrf	___awdiv@counter
  3092  0FC9  0AAB               	incf	___awdiv@counter,f
  3093  0FCA                     l1985:	
  3094  0FCA  1BA7               	btfsc	___awdiv@divisor+1,7
  3095  0FCB  2FD6               	goto	l1987
  3096  0FCC  3001               	movlw	1
  3097  0FCD                     u1485:	
  3098  0FCD  35A6               	lslf	___awdiv@divisor,f
  3099  0FCE  0DA7               	rlf	___awdiv@divisor+1,f
  3100  0FCF  0B89               	decfsz	9,f
  3101  0FD0  2FCD               	goto	u1485
  3102  0FD1  3001               	movlw	1
  3103  0FD2  00AA               	movwf	??___awdiv
  3104  0FD3  082A               	movf	??___awdiv,w
  3105  0FD4  07AB               	addwf	___awdiv@counter,f
  3106  0FD5  2FCA               	goto	l1985
  3107  0FD6                     l1987:	
  3108  0FD6  3001               	movlw	1
  3109  0FD7                     u1505:	
  3110  0FD7  35AD               	lslf	___awdiv@quotient,f
  3111  0FD8  0DAE               	rlf	___awdiv@quotient+1,f
  3112  0FD9  0B89               	decfsz	9,f
  3113  0FDA  2FD7               	goto	u1505
  3114  0FDB  0827               	movf	___awdiv@divisor+1,w
  3115  0FDC  0229               	subwf	___awdiv@dividend+1,w
  3116  0FDD  1D03               	skipz
  3117  0FDE  2FE1               	goto	u1515
  3118  0FDF  0826               	movf	___awdiv@divisor,w
  3119  0FE0  0228               	subwf	___awdiv@dividend,w
  3120  0FE1                     u1515:	
  3121  0FE1  1C03               	skipc
  3122  0FE2  2FE8               	goto	l1993
  3123  0FE3  0826               	movf	___awdiv@divisor,w
  3124  0FE4  02A8               	subwf	___awdiv@dividend,f
  3125  0FE5  0827               	movf	___awdiv@divisor+1,w
  3126  0FE6  3BA9               	subwfb	___awdiv@dividend+1,f
  3127  0FE7  142D               	bsf	___awdiv@quotient,0
  3128  0FE8                     l1993:	
  3129  0FE8  3001               	movlw	1
  3130  0FE9                     u1525:	
  3131  0FE9  36A7               	lsrf	___awdiv@divisor+1,f
  3132  0FEA  0CA6               	rrf	___awdiv@divisor,f
  3133  0FEB  0B89               	decfsz	9,f
  3134  0FEC  2FE9               	goto	u1525
  3135  0FED  3001               	movlw	1
  3136  0FEE  02AB               	subwf	___awdiv@counter,f
  3137  0FEF  1D03               	btfss	3,2
  3138  0FF0  2FD6               	goto	l1987
  3139  0FF1                     l1997:	
  3140  0FF1  082C               	movf	___awdiv@sign,w
  3141  0FF2  1903               	btfsc	3,2
  3142  0FF3  2FF9               	goto	l2001
  3143  0FF4  09AD               	comf	___awdiv@quotient,f
  3144  0FF5  09AE               	comf	___awdiv@quotient+1,f
  3145  0FF6  0AAD               	incf	___awdiv@quotient,f
  3146  0FF7  1903               	skipnz
  3147  0FF8  0AAE               	incf	___awdiv@quotient+1,f
  3148  0FF9                     l2001:	
  3149  0FF9  082E               	movf	___awdiv@quotient+1,w
  3150  0FFA  01A7               	clrf	?___awdiv+1
  3151  0FFB  07A7               	addwf	?___awdiv+1,f
  3152  0FFC  082D               	movf	___awdiv@quotient,w
  3153  0FFD  01A6               	clrf	?___awdiv
  3154  0FFE  07A6               	addwf	?___awdiv,f
  3155  0FFF  0008               	return
  3156  1000                     __end_of___awdiv:	
  3157                           
  3158                           	psect	text8
  3159  0648                     __ptext8:	
  3160 ;; *************** function _SetupGPS *****************
  3161 ;; Defined at:
  3162 ;;		line 333 in file "launcher_functions.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  message        22   36[BANK0 ] unsigned char [22]
  3167 ;;  startSequenc    6   58[BANK0 ] unsigned char [6]
  3168 ;;  MID             4   64[BANK0 ] unsigned char [4]
  3169 ;;  x               2   68[BANK0 ] int 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;		None               void
  3172 ;; Registers used:
  3173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3179 ;;      Params:         0       0       0       0       0       0       0       0
  3180 ;;      Locals:         0      34       0       0       0       0       0       0
  3181 ;;      Temps:          0       3       0       0       0       0       0       0
  3182 ;;      Totals:         0      37       0       0       0       0       0       0
  3183 ;;Total ram usage:       37 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    4
  3186 ;; This function calls:
  3187 ;;		_sprintf
  3188 ;;		_uart_write_message
  3189 ;; This function is called by:
  3190 ;;		_main
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _SetupGPS
  3196  0648                     _SetupGPS:	
  3197                           
  3198                           ;launcher_functions.c: 335: int x;
  3199                           ;launcher_functions.c: 336: unsigned char startSequence[6] = "$PSRF";
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in _SetupGPS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3203  0648  30E3               	movlw	low SetupGPS@F4919
  3204  0649  0086               	movwf	6
  3205  064A  3000               	movlw	high SetupGPS@F4919
  3206  064B  0087               	movwf	7
  3207  064C  305A               	movlw	low SetupGPS@startSequence
  3208  064D  0084               	movwf	4
  3209  064E  3000               	movlw	high SetupGPS@startSequence
  3210  064F  0085               	movwf	5
  3211  0650  3006               	movlw	6
  3212  0651  0020               	movlb	0	; select bank0
  3213  0652  00C1               	movwf	??_SetupGPS
  3214  0653                     u2020:	
  3215  0653  0016               	moviw fsr1++
  3216  0654  001A               	movwi fsr0++
  3217  0655  0BC1               	decfsz	??_SetupGPS,f
  3218  0656  2E53               	goto	u2020
  3219                           
  3220                           ;launcher_functions.c: 337: unsigned char MID[4] = "103";
  3221  0657  0021               	movlb	1	; select bank1
  3222  0658  086C               	movf	(SetupGPS@F4921+3)^(0+128),w
  3223  0659  0020               	movlb	0	; select bank0
  3224  065A  00E3               	movwf	SetupGPS@MID+3
  3225  065B  0021               	movlb	1	; select bank1
  3226  065C  086B               	movf	(SetupGPS@F4921+2)^(0+128),w
  3227  065D  0020               	movlb	0	; select bank0
  3228  065E  00E2               	movwf	SetupGPS@MID+2
  3229  065F  0021               	movlb	1	; select bank1
  3230  0660  086A               	movf	(SetupGPS@F4921+1)^(0+128),w
  3231  0661  0020               	movlb	0	; select bank0
  3232  0662  00E1               	movwf	SetupGPS@MID+1
  3233  0663  0021               	movlb	1	; select bank1
  3234  0664  0869               	movf	SetupGPS@F4921^(0+128),w
  3235  0665  0020               	movlb	0	; select bank0
  3236  0666  00E0               	movwf	SetupGPS@MID
  3237                           
  3238                           ;launcher_functions.c: 338: unsigned char message[22];
  3239                           ;launcher_functions.c: 341: for(x = 0; x < 6; x++)
  3240  0667  01E4               	clrf	SetupGPS@x
  3241  0668  01E5               	clrf	SetupGPS@x+1
  3242  0669  0865               	movf	SetupGPS@x+1,w
  3243  066A  3A80               	xorlw	128
  3244  066B  00C1               	movwf	??_SetupGPS
  3245  066C  3080               	movlw	128
  3246  066D  0241               	subwf	??_SetupGPS,w
  3247  066E  1D03               	skipz
  3248  066F  2E72               	goto	u2035
  3249  0670  3006               	movlw	6
  3250  0671  0264               	subwf	SetupGPS@x,w
  3251  0672                     u2035:	
  3252  0672  1803               	btfsc	3,0
  3253  0673  2EB2               	goto	l2477
  3254  0674                     l2467:	
  3255                           
  3256                           ;launcher_functions.c: 342: {
  3257                           ;launcher_functions.c: 343: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3258  0674  3015               	movlw	21
  3259  0675  0020               	movlb	0	; select bank0
  3260  0676  00C3               	movwf	??_SetupGPS+2
  3261  0677  304B               	movlw	75
  3262  0678  00C2               	movwf	??_SetupGPS+1
  3263  0679  30D1               	movlw	209
  3264  067A  00C1               	movwf	??_SetupGPS
  3265  067B                     u2677:	
  3266  067B  0BC1               	decfsz	??_SetupGPS,f
  3267  067C  2E7B               	goto	u2677
  3268  067D  0BC2               	decfsz	??_SetupGPS+1,f
  3269  067E  2E7B               	goto	u2677
  3270  067F  0BC3               	decfsz	??_SetupGPS+2,f
  3271  0680  2E7B               	goto	u2677
  3272  0681  0000               	nop
  3273                           
  3274                           ;launcher_functions.c: 344: sprintf(message, "%s%s,0%d,00,00,00*", startSequence, MID, x
      +                          );
  3275  0682  300A               	movlw	low (STR_1| (0+32768))
  3276  0683  0020               	movlb	0	; select bank0
  3277  0684  00AE               	movwf	sprintf@f
  3278  0685  3088               	movlw	high (STR_1| (0+32768))
  3279  0686  00AF               	movwf	sprintf@f+1
  3280  0687  305A               	movlw	SetupGPS@startSequence& (0+255)
  3281  0688  00C1               	movwf	??_SetupGPS
  3282  0689  0841               	movf	??_SetupGPS,w
  3283  068A  00B0               	movwf	?_sprintf+2
  3284  068B  3060               	movlw	SetupGPS@MID& (0+255)
  3285  068C  00C2               	movwf	??_SetupGPS+1
  3286  068D  0842               	movf	??_SetupGPS+1,w
  3287  068E  00B1               	movwf	?_sprintf+3
  3288  068F  0865               	movf	SetupGPS@x+1,w
  3289  0690  01B3               	clrf	?_sprintf+5
  3290  0691  07B3               	addwf	?_sprintf+5,f
  3291  0692  0864               	movf	SetupGPS@x,w
  3292  0693  01B2               	clrf	?_sprintf+4
  3293  0694  07B2               	addwf	?_sprintf+4,f
  3294  0695  3044               	movlw	SetupGPS@message& (0+255)
  3295  0696  3184  2497  3186   	fcall	_sprintf
  3296                           
  3297                           ;launcher_functions.c: 345: uart_write_message(message, 22);
  3298  0699  3016               	movlw	22
  3299  069A  0020               	movlb	0	; select bank0
  3300  069B  00A8               	movwf	uart_write_message@size
  3301  069C  3000               	movlw	0
  3302  069D  00A9               	movwf	uart_write_message@size+1
  3303  069E  3044               	movlw	SetupGPS@message& (0+255)
  3304  069F  3186  26DA  3186   	fcall	_uart_write_message
  3305  06A2  3001               	movlw	1
  3306  06A3  0020               	movlb	0	; select bank0
  3307  06A4  07E4               	addwf	SetupGPS@x,f
  3308  06A5  3000               	movlw	0
  3309  06A6  3DE5               	addwfc	SetupGPS@x+1,f
  3310  06A7  0865               	movf	SetupGPS@x+1,w
  3311  06A8  3A80               	xorlw	128
  3312  06A9  00C1               	movwf	??_SetupGPS
  3313  06AA  3080               	movlw	128
  3314  06AB  0241               	subwf	??_SetupGPS,w
  3315  06AC  1D03               	skipz
  3316  06AD  2EB0               	goto	u2045
  3317  06AE  3006               	movlw	6
  3318  06AF  0264               	subwf	SetupGPS@x,w
  3319  06B0                     u2045:	
  3320  06B0  1C03               	skipc
  3321  06B1  2E74               	goto	l2467
  3322  06B2                     l2477:	
  3323                           
  3324                           ;launcher_functions.c: 346: }
  3325                           ;launcher_functions.c: 348: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3326  06B2  3015               	movlw	21
  3327  06B3  0020               	movlb	0	; select bank0
  3328  06B4  00C3               	movwf	??_SetupGPS+2
  3329  06B5  304B               	movlw	75
  3330  06B6  00C2               	movwf	??_SetupGPS+1
  3331  06B7  30D1               	movlw	209
  3332  06B8  00C1               	movwf	??_SetupGPS
  3333  06B9                     u2687:	
  3334  06B9  0BC1               	decfsz	??_SetupGPS,f
  3335  06BA  2EB9               	goto	u2687
  3336  06BB  0BC2               	decfsz	??_SetupGPS+1,f
  3337  06BC  2EB9               	goto	u2687
  3338  06BD  0BC3               	decfsz	??_SetupGPS+2,f
  3339  06BE  2EB9               	goto	u2687
  3340  06BF  0000               	nop
  3341                           
  3342                           ;launcher_functions.c: 350: sprintf(message, "%s%s,01,01,00,00*", startSequence, MID);
  3343  06C0  301D               	movlw	low (STR_2| (0+32768))
  3344  06C1  0020               	movlb	0	; select bank0
  3345  06C2  00AE               	movwf	sprintf@f
  3346  06C3  3088               	movlw	high (STR_2| (0+32768))
  3347  06C4  00AF               	movwf	sprintf@f+1
  3348  06C5  305A               	movlw	SetupGPS@startSequence& (0+255)
  3349  06C6  00C1               	movwf	??_SetupGPS
  3350  06C7  0841               	movf	??_SetupGPS,w
  3351  06C8  00B0               	movwf	?_sprintf+2
  3352  06C9  3060               	movlw	SetupGPS@MID& (0+255)
  3353  06CA  00C2               	movwf	??_SetupGPS+1
  3354  06CB  0842               	movf	??_SetupGPS+1,w
  3355  06CC  00B1               	movwf	?_sprintf+3
  3356  06CD  3044               	movlw	SetupGPS@message& (0+255)
  3357  06CE  3184  2497  3186   	fcall	_sprintf
  3358                           
  3359                           ;launcher_functions.c: 351: uart_write_message(message, 22);
  3360  06D1  3016               	movlw	22
  3361  06D2  0020               	movlb	0	; select bank0
  3362  06D3  00A8               	movwf	uart_write_message@size
  3363  06D4  3000               	movlw	0
  3364  06D5  00A9               	movwf	uart_write_message@size+1
  3365  06D6  3044               	movlw	SetupGPS@message& (0+255)
  3366  06D7  3186  26DA         	fcall	_uart_write_message
  3367  06D9  0008               	return
  3368  06DA                     __end_of_SetupGPS:	
  3369                           
  3370                           	psect	text9
  3371  06DA                     __ptext9:	
  3372 ;; *************** function _uart_write_message *****************
  3373 ;; Defined at:
  3374 ;;		line 289 in file "launcher_functions.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  data            1    wreg     PTR unsigned char 
  3377 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  3378 ;;  size            2    8[BANK0 ] int 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  data            1   20[BANK0 ] PTR unsigned char 
  3381 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  3382 ;;  ascii_checks    2   21[BANK0 ] unsigned char [2]
  3383 ;;  x               2   17[BANK0 ] int 
  3384 ;;  checksum        1   19[BANK0 ] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;		None               void
  3387 ;; Registers used:
  3388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3394 ;;      Params:         0       2       0       0       0       0       0       0
  3395 ;;      Locals:         0      10       0       0       0       0       0       0
  3396 ;;      Temps:          0       3       0       0       0       0       0       0
  3397 ;;      Totals:         0      15       0       0       0       0       0       0
  3398 ;;Total ram usage:       15 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    3
  3401 ;; This function calls:
  3402 ;;		_compute_checksum
  3403 ;;		_uart_xmit
  3404 ;; This function is called by:
  3405 ;;		_SetupGPS
  3406 ;;		_UpdateGPS
  3407 ;;		_DisableGPS
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function _uart_write_message
  3413  06DA                     _uart_write_message:	
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in _uart_write_message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3417                           ;uart_write_message@data stored from wreg
  3418  06DA  0020               	movlb	0	; select bank0
  3419  06DB  00B4               	movwf	uart_write_message@data
  3420                           
  3421                           ;launcher_functions.c: 291: int x;
  3422                           ;launcher_functions.c: 292: unsigned char checksum;
  3423                           ;launcher_functions.c: 293: unsigned char ascii_checksum[2];
  3424                           ;launcher_functions.c: 295: checksum = compute_checksum(data, size);
  3425  06DC  0829               	movf	uart_write_message@size+1,w
  3426  06DD  01A1               	clrf	compute_checksum@size+1
  3427  06DE  07A1               	addwf	compute_checksum@size+1,f
  3428  06DF  0828               	movf	uart_write_message@size,w
  3429  06E0  01A0               	clrf	compute_checksum@size
  3430  06E1  07A0               	addwf	compute_checksum@size,f
  3431  06E2  0834               	movf	uart_write_message@data,w
  3432  06E3  3187  27B0  3186   	fcall	_compute_checksum
  3433  06E6  0020               	movlb	0	; select bank0
  3434  06E7  00AA               	movwf	??_uart_write_message
  3435  06E8  082A               	movf	??_uart_write_message,w
  3436  06E9  00B3               	movwf	uart_write_message@checksum
  3437                           
  3438                           ;launcher_functions.c: 296: ascii_checksum[0] = checksum >> 4;
  3439  06EA  0833               	movf	uart_write_message@checksum,w
  3440  06EB  00AA               	movwf	??_uart_write_message
  3441  06EC  3004               	movlw	4
  3442  06ED                     u1745:	
  3443  06ED  36AA               	lsrf	??_uart_write_message,f
  3444  06EE  0B89               	decfsz	9,f
  3445  06EF  2EED               	goto	u1745
  3446  06F0  082A               	movf	??_uart_write_message,w
  3447  06F1  00AB               	movwf	??_uart_write_message+1
  3448  06F2  082B               	movf	??_uart_write_message+1,w
  3449  06F3  00B5               	movwf	uart_write_message@ascii_checksum
  3450                           
  3451                           ;launcher_functions.c: 297: ascii_checksum[1] = checksum & 0x0F;
  3452  06F4  0833               	movf	uart_write_message@checksum,w
  3453  06F5  390F               	andlw	15
  3454  06F6  00AA               	movwf	??_uart_write_message
  3455  06F7  082A               	movf	??_uart_write_message,w
  3456  06F8  00B6               	movwf	uart_write_message@ascii_checksum+1
  3457                           
  3458                           ;launcher_functions.c: 299: ascii_checksum[0] += (ascii_checksum[0] < 10 ? 48 : 55);
  3459  06F9  300A               	movlw	10
  3460  06FA  0235               	subwf	uart_write_message@ascii_checksum,w
  3461  06FB  1C03               	skipc
  3462  06FC  2EFF               	goto	l2107
  3463  06FD  3037               	movlw	55
  3464  06FE  2F00               	goto	L1
  3465  06FF                     l2107:	
  3466  06FF  3030               	movlw	48
  3467  0700                     L1:	
  3468  0700  00AD               	movwf	_uart_write_message$1371
  3469  0701  3000               	movlw	0
  3470  0702  00AE               	movwf	_uart_write_message$1371+1
  3471  0703  082D               	movf	_uart_write_message$1371,w
  3472  0704  00AA               	movwf	??_uart_write_message
  3473  0705  082A               	movf	??_uart_write_message,w
  3474  0706  07B5               	addwf	uart_write_message@ascii_checksum,f
  3475                           
  3476                           ;launcher_functions.c: 300: ascii_checksum[1] += (ascii_checksum[1] < 10 ? 48 : 55);
  3477  0707  300A               	movlw	10
  3478  0708  0236               	subwf	uart_write_message@ascii_checksum+1,w
  3479  0709  1C03               	skipc
  3480  070A  2F0D               	goto	l2115
  3481  070B  3037               	movlw	55
  3482  070C  2F0E               	goto	L2
  3483  070D                     l2115:	
  3484  070D  3030               	movlw	48
  3485  070E                     L2:	
  3486  070E  00AF               	movwf	_uart_write_message$1372
  3487  070F  3000               	movlw	0
  3488  0710  00B0               	movwf	_uart_write_message$1372+1
  3489  0711  082F               	movf	_uart_write_message$1372,w
  3490  0712  00AA               	movwf	??_uart_write_message
  3491  0713  082A               	movf	??_uart_write_message,w
  3492  0714  07B6               	addwf	uart_write_message@ascii_checksum+1,f
  3493                           
  3494                           ;launcher_functions.c: 302: for(x=0; x<size-1; x++)
  3495  0715  01B1               	clrf	uart_write_message@x
  3496  0716  01B2               	clrf	uart_write_message@x+1
  3497  0717                     l2125:	
  3498  0717  0828               	movf	uart_write_message@size,w
  3499  0718  3EFF               	addlw	255
  3500  0719  00AA               	movwf	??_uart_write_message
  3501  071A  30FF               	movlw	255
  3502  071B  3D29               	addwfc	uart_write_message@size+1,w
  3503  071C  00AB               	movwf	??_uart_write_message+1
  3504  071D  0832               	movf	uart_write_message@x+1,w
  3505  071E  3A80               	xorlw	128
  3506  071F  00AC               	movwf	??_uart_write_message+2
  3507  0720  082B               	movf	??_uart_write_message+1,w
  3508  0721  3A80               	xorlw	128
  3509  0722  022C               	subwf	??_uart_write_message+2,w
  3510  0723  1D03               	skipz
  3511  0724  2F27               	goto	u1775
  3512  0725  082A               	movf	??_uart_write_message,w
  3513  0726  0231               	subwf	uart_write_message@x,w
  3514  0727                     u1775:	
  3515  0727  1803               	btfsc	3,0
  3516  0728  2F3A               	goto	l2127
  3517                           
  3518                           ;launcher_functions.c: 303: {
  3519                           ;launcher_functions.c: 304: uart_xmit(data[x]);
  3520  0729  0020               	movlb	0	; select bank0
  3521  072A  0831               	movf	uart_write_message@x,w
  3522  072B  0734               	addwf	uart_write_message@data,w
  3523  072C  00AA               	movwf	??_uart_write_message
  3524  072D  082A               	movf	??_uart_write_message,w
  3525  072E  0086               	movwf	6
  3526  072F  0187               	clrf	7
  3527  0730  0801               	movf	1,w
  3528  0731  318D  2572  3186   	fcall	_uart_xmit
  3529  0734  3001               	movlw	1
  3530  0735  0020               	movlb	0	; select bank0
  3531  0736  07B1               	addwf	uart_write_message@x,f
  3532  0737  3000               	movlw	0
  3533  0738  3DB2               	addwfc	uart_write_message@x+1,f
  3534  0739  2F17               	goto	l2125
  3535  073A                     l2127:	
  3536                           
  3537                           ;launcher_functions.c: 305: }
  3538                           ;launcher_functions.c: 306: uart_xmit(ascii_checksum[0]);
  3539  073A  0020               	movlb	0	; select bank0
  3540  073B  0835               	movf	uart_write_message@ascii_checksum,w
  3541  073C  318D  2572  3186   	fcall	_uart_xmit
  3542                           
  3543                           ;launcher_functions.c: 307: uart_xmit(ascii_checksum[1]);
  3544  073F  0020               	movlb	0	; select bank0
  3545  0740  0836               	movf	uart_write_message@ascii_checksum+1,w
  3546  0741  318D  2572  3186   	fcall	_uart_xmit
  3547                           
  3548                           ;launcher_functions.c: 309: uart_xmit(0x0D);
  3549  0744  300D               	movlw	13
  3550  0745  318D  2572  3186   	fcall	_uart_xmit
  3551                           
  3552                           ;launcher_functions.c: 310: uart_xmit(0x0A);
  3553  0748  300A               	movlw	10
  3554  0749  318D  2572  3186   	fcall	_uart_xmit
  3555  074C                     l352:	
  3556                           ;launcher_functions.c: 311: while(!TXSTAbits.TRMT);
  3557                           
  3558  074C  0023               	movlb	3	; select bank3
  3559  074D  189E               	btfsc	30,1	;volatile
  3560  074E  0008               	return
  3561  074F  2F4C               	goto	l352
  3562  0750                     __end_of_uart_write_message:	
  3563                           
  3564                           	psect	text10
  3565  0D72                     __ptext10:	
  3566 ;; *************** function _uart_xmit *****************
  3567 ;; Defined at:
  3568 ;;		line 281 in file "launcher_functions.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  mydata_byte     1    wreg     unsigned char 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  mydata_byte     1    0[BANK0 ] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;		None               void
  3575 ;; Registers used:
  3576 ;;		wreg
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3582 ;;      Params:         0       0       0       0       0       0       0       0
  3583 ;;      Locals:         0       1       0       0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0       0       0       0
  3585 ;;      Totals:         0       1       0       0       0       0       0       0
  3586 ;;Total ram usage:        1 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    2
  3589 ;; This function calls:
  3590 ;;		Nothing
  3591 ;; This function is called by:
  3592 ;;		_uart_write_message
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _uart_xmit
  3598  0D72                     _uart_xmit:	
  3599                           
  3600                           ;incstack = 0
  3601                           ; Regs used in _uart_xmit: [wreg]
  3602                           ;uart_xmit@mydata_byte stored from wreg
  3603  0D72  0020               	movlb	0	; select bank0
  3604  0D73  00A0               	movwf	uart_xmit@mydata_byte
  3605  0D74                     l335:	
  3606                           ;launcher_functions.c: 284: while(!TXSTAbits.TRMT);
  3607                           
  3608  0D74  0023               	movlb	3	; select bank3
  3609  0D75  1C9E               	btfss	30,1	;volatile
  3610  0D76  2D74               	goto	l335
  3611                           
  3612                           ;launcher_functions.c: 285: TXREG = mydata_byte;
  3613  0D77  0020               	movlb	0	; select bank0
  3614  0D78  0820               	movf	uart_xmit@mydata_byte,w
  3615  0D79  0023               	movlb	3	; select bank3
  3616  0D7A  009A               	movwf	26	;volatile
  3617  0D7B  0008               	return
  3618  0D7C                     __end_of_uart_xmit:	
  3619                           
  3620                           	psect	text11
  3621  07B0                     __ptext11:	
  3622 ;; *************** function _compute_checksum *****************
  3623 ;; Defined at:
  3624 ;;		line 270 in file "launcher_functions.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  data            1    wreg     PTR unsigned char 
  3627 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  3628 ;;  size            2    0[BANK0 ] int 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  data            1    5[BANK0 ] PTR unsigned char 
  3631 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  3632 ;;  x               2    6[BANK0 ] int 
  3633 ;;  checksum        1    4[BANK0 ] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      unsigned char 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3643 ;;      Params:         0       2       0       0       0       0       0       0
  3644 ;;      Locals:         0       4       0       0       0       0       0       0
  3645 ;;      Temps:          0       2       0       0       0       0       0       0
  3646 ;;      Totals:         0       8       0       0       0       0       0       0
  3647 ;;Total ram usage:        8 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    2
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_uart_write_message
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           
  3658                           ;psect for function _compute_checksum
  3659  07B0                     _compute_checksum:	
  3660                           
  3661                           ;incstack = 0
  3662                           ; Regs used in _compute_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3663                           ;compute_checksum@data stored from wreg
  3664  07B0  0020               	movlb	0	; select bank0
  3665  07B1  00A5               	movwf	compute_checksum@data
  3666                           
  3667                           ;launcher_functions.c: 272: unsigned char checksum = 0;
  3668  07B2  01A4               	clrf	compute_checksum@checksum
  3669                           
  3670                           ;launcher_functions.c: 273: int x;
  3671                           ;launcher_functions.c: 274: for(x=0; x<size; x++)
  3672  07B3  01A6               	clrf	compute_checksum@x
  3673  07B4  01A7               	clrf	compute_checksum@x+1
  3674  07B5                     l1923:	
  3675  07B5  0827               	movf	compute_checksum@x+1,w
  3676  07B6  3A80               	xorlw	128
  3677  07B7  00A2               	movwf	??_compute_checksum
  3678  07B8  0821               	movf	compute_checksum@size+1,w
  3679  07B9  3A80               	xorlw	128
  3680  07BA  0222               	subwf	??_compute_checksum,w
  3681  07BB  1D03               	skipz
  3682  07BC  2FBF               	goto	u1375
  3683  07BD  0820               	movf	compute_checksum@size,w
  3684  07BE  0226               	subwf	compute_checksum@x,w
  3685  07BF                     u1375:	
  3686  07BF  1803               	btfsc	3,0
  3687  07C0  2FEF               	goto	l1925
  3688                           
  3689                           ;launcher_functions.c: 275: {
  3690                           ;launcher_functions.c: 276: if ((data[x] != '$') && (data[x] != '*') && (data[x] != '!')
      +                          )
  3691  07C1  0020               	movlb	0	; select bank0
  3692  07C2  0826               	movf	compute_checksum@x,w
  3693  07C3  0725               	addwf	compute_checksum@data,w
  3694  07C4  00A2               	movwf	??_compute_checksum
  3695  07C5  0822               	movf	??_compute_checksum,w
  3696  07C6  0086               	movwf	6
  3697  07C7  0187               	clrf	7
  3698  07C8  0801               	movf	1,w
  3699  07C9  3A24               	xorlw	36
  3700  07CA  1903               	skipnz
  3701  07CB  2FEA               	goto	l1921
  3702  07CC  0826               	movf	compute_checksum@x,w
  3703  07CD  0725               	addwf	compute_checksum@data,w
  3704  07CE  00A2               	movwf	??_compute_checksum
  3705  07CF  0822               	movf	??_compute_checksum,w
  3706  07D0  0086               	movwf	6
  3707  07D1  0187               	clrf	7
  3708  07D2  0801               	movf	1,w
  3709  07D3  3A2A               	xorlw	42
  3710  07D4  1903               	skipnz
  3711  07D5  2FEA               	goto	l1921
  3712  07D6  0826               	movf	compute_checksum@x,w
  3713  07D7  0725               	addwf	compute_checksum@data,w
  3714  07D8  00A2               	movwf	??_compute_checksum
  3715  07D9  0822               	movf	??_compute_checksum,w
  3716  07DA  0086               	movwf	6
  3717  07DB  0187               	clrf	7
  3718  07DC  0801               	movf	1,w
  3719  07DD  3A21               	xorlw	33
  3720  07DE  1903               	skipnz
  3721  07DF  2FEA               	goto	l1921
  3722                           
  3723                           ;launcher_functions.c: 277: checksum ^= data[x];
  3724  07E0  0826               	movf	compute_checksum@x,w
  3725  07E1  0725               	addwf	compute_checksum@data,w
  3726  07E2  00A2               	movwf	??_compute_checksum
  3727  07E3  0822               	movf	??_compute_checksum,w
  3728  07E4  0086               	movwf	6
  3729  07E5  0187               	clrf	7
  3730  07E6  0801               	movf	1,w
  3731  07E7  00A3               	movwf	??_compute_checksum+1
  3732  07E8  0823               	movf	??_compute_checksum+1,w
  3733  07E9  06A4               	xorwf	compute_checksum@checksum,f
  3734  07EA                     l1921:	
  3735  07EA  3001               	movlw	1
  3736  07EB  07A6               	addwf	compute_checksum@x,f
  3737  07EC  3000               	movlw	0
  3738  07ED  3DA7               	addwfc	compute_checksum@x+1,f
  3739  07EE  2FB5               	goto	l1923
  3740  07EF                     l1925:	
  3741                           
  3742                           ;launcher_functions.c: 278: }
  3743                           ;launcher_functions.c: 279: return checksum;
  3744  07EF  0020               	movlb	0	; select bank0
  3745  07F0  0824               	movf	compute_checksum@checksum,w
  3746  07F1  0008               	return
  3747  07F2                     __end_of_compute_checksum:	
  3748                           
  3749                           	psect	text12
  3750  0497                     __ptext12:	
  3751 ;; *************** function _sprintf *****************
  3752 ;; Defined at:
  3753 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  sp              1    wreg     PTR unsigned char 
  3756 ;;		 -> SetupGPS@message(22), 
  3757 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  3758 ;;		 -> STR_2(18), STR_1(19), 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  3761 ;;		 -> SetupGPS@message(22), 
  3762 ;;  _val            4   28[BANK0 ] struct .
  3763 ;;  c               1   32[BANK0 ] char 
  3764 ;;  ap              1   26[BANK0 ] PTR void [1]
  3765 ;;		 -> ?_sprintf(2), 
  3766 ;;  prec            1   25[BANK0 ] char 
  3767 ;;  flag            1   24[BANK0 ] unsigned char 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  2   14[BANK0 ] int 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3777 ;;      Params:         0       6       0       0       0       0       0       0
  3778 ;;      Locals:         0       9       0       0       0       0       0       0
  3779 ;;      Temps:          0       4       0       0       0       0       0       0
  3780 ;;      Totals:         0      19       0       0       0       0       0       0
  3781 ;;Total ram usage:       19 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    3
  3784 ;; This function calls:
  3785 ;;		___lwdiv
  3786 ;;		___lwmod
  3787 ;; This function is called by:
  3788 ;;		_SetupGPS
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           
  3793                           ;psect for function _sprintf
  3794  0497                     _sprintf:	
  3795                           
  3796                           ;incstack = 0
  3797                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3798                           ;sprintf@sp stored from wreg
  3799  0497  0020               	movlb	0	; select bank0
  3800  0498  00BB               	movwf	sprintf@sp
  3801                           
  3802                           ;doprnt.c: 494: va_list ap;
  3803                           ;doprnt.c: 499: signed char c;
  3804                           ;doprnt.c: 506: signed char prec;
  3805                           ;doprnt.c: 508: unsigned char flag;
  3806                           ;doprnt.c: 527: union {
  3807                           ;doprnt.c: 528: unsigned int _val;
  3808                           ;doprnt.c: 529: struct {
  3809                           ;doprnt.c: 530: const char * _cp;
  3810                           ;doprnt.c: 531: unsigned _len;
  3811                           ;doprnt.c: 532: } _str;
  3812                           ;doprnt.c: 533: } _val;
  3813                           ;doprnt.c: 542: *ap = __va_start();
  3814  0499  3030               	movlw	(?_sprintf+2)& (0+255)
  3815  049A  00B4               	movwf	??_sprintf
  3816  049B  0834               	movf	??_sprintf,w
  3817  049C  00BA               	movwf	sprintf@ap
  3818  049D                     l2197:	
  3819                           ;doprnt.c: 545: while(c = *f++) {
  3820                           
  3821  049D  082F               	movf	sprintf@f+1,w
  3822  049E  00B5               	movwf	??_sprintf+1
  3823  049F  082E               	movf	sprintf@f,w
  3824  04A0  00B4               	movwf	??_sprintf
  3825  04A1  0AAE               	incf	sprintf@f,f
  3826  04A2  1903               	skipnz
  3827  04A3  0AAF               	incf	sprintf@f+1,f
  3828  04A4  0834               	movf	??_sprintf,w
  3829  04A5  0084               	movwf	4
  3830  04A6  0835               	movf	??_sprintf+1,w
  3831  04A7  0085               	movwf	5
  3832  04A8  0800               	movf	0,w	;code access
  3833  04A9  00B6               	movwf	??_sprintf+2
  3834  04AA  0836               	movf	??_sprintf+2,w
  3835  04AB  00C0               	movwf	sprintf@c
  3836  04AC  08C0               	movf	sprintf@c,f
  3837  04AD  1903               	btfsc	3,2
  3838  04AE  2D98               	goto	l2199
  3839                           
  3840                           ;doprnt.c: 547: if(c != '%')
  3841  04AF  0840               	movf	sprintf@c,w
  3842  04B0  3A25               	xorlw	37
  3843  04B1  1903               	skipnz
  3844  04B2  2CBF               	goto	l2137
  3845                           
  3846                           ;doprnt.c: 549: {
  3847                           ;doprnt.c: 550: ((*sp++ = (c)));
  3848  04B3  0840               	movf	sprintf@c,w
  3849  04B4  00B4               	movwf	??_sprintf
  3850  04B5  083B               	movf	sprintf@sp,w
  3851  04B6  0086               	movwf	6
  3852  04B7  0187               	clrf	7
  3853  04B8  0834               	movf	??_sprintf,w
  3854  04B9  0081               	movwf	1
  3855  04BA  3001               	movlw	1
  3856  04BB  00B4               	movwf	??_sprintf
  3857  04BC  0834               	movf	??_sprintf,w
  3858  04BD  07BB               	addwf	sprintf@sp,f
  3859                           
  3860                           ;doprnt.c: 551: continue;
  3861  04BE  2C9D               	goto	l2197
  3862  04BF                     l2137:	
  3863                           
  3864                           ;doprnt.c: 552: }
  3865                           ;doprnt.c: 557: flag = 0;
  3866  04BF  01B8               	clrf	sprintf@flag
  3867                           
  3868                           ;doprnt.c: 644: switch(c = *f++) {
  3869  04C0  2CF0               	goto	l2157
  3870  04C1                     l2139:	
  3871                           ;doprnt.c: 737: case 's':
  3872                           
  3873                           ;doprnt.c: 707: case 'i':
  3874                           ;doprnt.c: 708: break;
  3875                           
  3876                           ;doprnt.c: 706: case 'd':
  3877                           
  3878                           ;doprnt.c: 647: goto alldone;
  3879                           
  3880                           ;doprnt.c: 646: case 0:
  3881                           
  3882                           
  3883                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  3884  04C1  083A               	movf	sprintf@ap,w
  3885  04C2  0086               	movwf	6
  3886  04C3  0187               	clrf	7
  3887  04C4  0801               	movf	1,w
  3888  04C5  00BC               	movwf	sprintf@_val
  3889  04C6  3000               	movlw	0
  3890  04C7  00BD               	movwf	sprintf@_val+1
  3891  04C8  3001               	movlw	1
  3892  04C9  00B4               	movwf	??_sprintf
  3893  04CA  0834               	movf	??_sprintf,w
  3894  04CB  07BA               	addwf	sprintf@ap,f
  3895                           
  3896                           ;doprnt.c: 749: if(!_val._str._cp)
  3897  04CC  083D               	movf	sprintf@_val+1,w
  3898  04CD  043C               	iorwf	sprintf@_val,w
  3899  04CE  1D03               	skipz
  3900  04CF  2CD4               	goto	l2153
  3901                           
  3902                           ;doprnt.c: 750: _val._str._cp = "(null)";
  3903  04D0  302F               	movlw	low (STR_3| (0+32768))
  3904  04D1  00BC               	movwf	sprintf@_val
  3905  04D2  3088               	movlw	high (STR_3| (0+32768))
  3906  04D3  00BD               	movwf	sprintf@_val+1
  3907  04D4                     l2153:	
  3908                           ;doprnt.c: 786: while(*_val._str._cp)
  3909                           
  3910  04D4  083C               	movf	sprintf@_val,w
  3911  04D5  0084               	movwf	4
  3912  04D6  083D               	movf	sprintf@_val+1,w
  3913  04D7  0085               	movwf	5
  3914  04D8  0800               	movf	0,w	;code access
  3915  04D9  3800               	iorlw	0
  3916  04DA  1903               	btfsc	3,2
  3917  04DB  2C9D               	goto	l2197
  3918                           
  3919                           ;doprnt.c: 787: ((*sp++ = (*_val._str._cp++)));
  3920  04DC  083C               	movf	sprintf@_val,w
  3921  04DD  0084               	movwf	4
  3922  04DE  083D               	movf	sprintf@_val+1,w
  3923  04DF  0085               	movwf	5
  3924  04E0  0800               	movf	0,w	;code access
  3925  04E1  00B4               	movwf	??_sprintf
  3926  04E2  083B               	movf	sprintf@sp,w
  3927  04E3  0086               	movwf	6
  3928  04E4  0187               	clrf	7
  3929  04E5  0834               	movf	??_sprintf,w
  3930  04E6  0081               	movwf	1
  3931  04E7  3001               	movlw	1
  3932  04E8  07BC               	addwf	sprintf@_val,f
  3933  04E9  3000               	movlw	0
  3934  04EA  3DBD               	addwfc	sprintf@_val+1,f
  3935  04EB  3001               	movlw	1
  3936  04EC  00B4               	movwf	??_sprintf
  3937  04ED  0834               	movf	??_sprintf,w
  3938  04EE  07BB               	addwf	sprintf@sp,f
  3939  04EF  2CD4               	goto	l2153
  3940  04F0                     l2157:	
  3941                           ;doprnt.c: 831: }
  3942                           
  3943                           ;doprnt.c: 822: continue;
  3944                           
  3945                           ;doprnt.c: 811: default:
  3946                           
  3947                           ;doprnt.c: 788: continue;
  3948                           
  3949  04F0  082F               	movf	sprintf@f+1,w
  3950  04F1  00B5               	movwf	??_sprintf+1
  3951  04F2  082E               	movf	sprintf@f,w
  3952  04F3  00B4               	movwf	??_sprintf
  3953  04F4  0AAE               	incf	sprintf@f,f
  3954  04F5  1903               	skipnz
  3955  04F6  0AAF               	incf	sprintf@f+1,f
  3956  04F7  0834               	movf	??_sprintf,w
  3957  04F8  0084               	movwf	4
  3958  04F9  0835               	movf	??_sprintf+1,w
  3959  04FA  0085               	movwf	5
  3960  04FB  0800               	movf	0,w	;code access
  3961  04FC  00C0               	movwf	sprintf@c
  3962                           
  3963                           ; Switch size 1, requested type "space"
  3964                           ; Number of cases is 4, Range of values is 0 to 115
  3965                           ; switch strategies available:
  3966                           ; Name         Instructions Cycles
  3967                           ; simple_byte           13     7 (average)
  3968                           ; direct_byte          238     6 (fixed)
  3969                           ; jumptable            260     6 (fixed)
  3970                           ;	Chosen strategy is simple_byte
  3971  04FD  3A00               	xorlw	0	; case 0
  3972  04FE  1903               	skipnz
  3973  04FF  2D98               	goto	l2199
  3974  0500  3A64               	xorlw	100	; case 100
  3975  0501  1903               	skipnz
  3976  0502  2D0A               	goto	l2159
  3977  0503  3A0D               	xorlw	13	; case 105
  3978  0504  1903               	skipnz
  3979  0505  2D0A               	goto	l2159
  3980  0506  3A1A               	xorlw	26	; case 115
  3981  0507  1903               	skipnz
  3982  0508  2CC1               	goto	l2139
  3983  0509  2C9D               	goto	l2197
  3984  050A                     l2159:	
  3985                           
  3986                           ;doprnt.c: 1262: {
  3987                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3988  050A  083A               	movf	sprintf@ap,w
  3989  050B  0086               	movwf	6
  3990  050C  0187               	clrf	7
  3991  050D  3F40               	moviw [0]fsr1
  3992  050E  00BC               	movwf	sprintf@_val
  3993  050F  3F41               	moviw [1]fsr1
  3994  0510  00BD               	movwf	sprintf@_val+1
  3995  0511  3002               	movlw	2
  3996  0512  00B4               	movwf	??_sprintf
  3997  0513  0834               	movf	??_sprintf,w
  3998  0514  07BA               	addwf	sprintf@ap,f
  3999                           
  4000                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  4001  0515  1FBD               	btfss	sprintf@_val+1,7
  4002  0516  2D20               	goto	l2169
  4003                           
  4004                           ;doprnt.c: 1271: flag |= 0x03;
  4005  0517  3003               	movlw	3
  4006  0518  00B4               	movwf	??_sprintf
  4007  0519  0834               	movf	??_sprintf,w
  4008  051A  04B8               	iorwf	sprintf@flag,f
  4009                           
  4010                           ;doprnt.c: 1272: _val._val = -_val._val;
  4011  051B  09BC               	comf	sprintf@_val,f
  4012  051C  09BD               	comf	sprintf@_val+1,f
  4013  051D  0ABC               	incf	sprintf@_val,f
  4014  051E  1903               	skipnz
  4015  051F  0ABD               	incf	sprintf@_val+1,f
  4016  0520                     l2169:	
  4017                           
  4018                           ;doprnt.c: 1273: }
  4019                           ;doprnt.c: 1275: }
  4020                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4021  0520  01C0               	clrf	sprintf@c
  4022  0521  0AC0               	incf	sprintf@c,f
  4023  0522  0840               	movf	sprintf@c,w
  4024  0523  3A05               	xorlw	5
  4025  0524  1903               	btfsc	3,2
  4026  0525  2D45               	goto	l2181
  4027  0526                     l2173:	
  4028                           
  4029                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4030  0526  0840               	movf	sprintf@c,w
  4031  0527  00B4               	movwf	??_sprintf
  4032  0528  01B5               	clrf	??_sprintf+1
  4033  0529  35B4               	lslf	??_sprintf,f
  4034  052A  0DB5               	rlf	??_sprintf+1,f
  4035  052B  3000               	movlw	low (_dpowers| (0+32768))
  4036  052C  0734               	addwf	??_sprintf,w
  4037  052D  0084               	movwf	4
  4038  052E  3088               	movlw	high (_dpowers| (0+32768))
  4039  052F  3D35               	addwfc	??_sprintf+1,w
  4040  0530  0085               	movwf	5
  4041  0531  3F00               	moviw [0]fsr0
  4042  0532  00B6               	movwf	??_sprintf+2
  4043  0533  3F01               	moviw [1]fsr0
  4044  0534  00B7               	movwf	??_sprintf+3
  4045  0535  0837               	movf	??_sprintf+3,w
  4046  0536  023D               	subwf	sprintf@_val+1,w
  4047  0537  1D03               	skipz
  4048  0538  2D3B               	goto	u1845
  4049  0539  0836               	movf	??_sprintf+2,w
  4050  053A  023C               	subwf	sprintf@_val,w
  4051  053B                     u1845:	
  4052  053B  1C03               	btfss	3,0
  4053  053C  2D45               	goto	l2181
  4054                           
  4055                           ;doprnt.c: 1316: break;
  4056  053D  3001               	movlw	1
  4057  053E  00B4               	movwf	??_sprintf
  4058  053F  0834               	movf	??_sprintf,w
  4059  0540  07C0               	addwf	sprintf@c,f
  4060  0541  0840               	movf	sprintf@c,w
  4061  0542  3A05               	xorlw	5
  4062  0543  1D03               	skipz
  4063  0544  2D26               	goto	l2173
  4064  0545                     l2181:	
  4065                           
  4066                           ;doprnt.c: 1431: {
  4067                           ;doprnt.c: 1447: if(flag & 0x03)
  4068  0545  0838               	movf	sprintf@flag,w
  4069  0546  3903               	andlw	3
  4070  0547  1903               	btfsc	3,2
  4071  0548  2D54               	goto	l2187
  4072                           
  4073                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4074  0549  302D               	movlw	45
  4075  054A  00B4               	movwf	??_sprintf
  4076  054B  083B               	movf	sprintf@sp,w
  4077  054C  0086               	movwf	6
  4078  054D  0187               	clrf	7
  4079  054E  0834               	movf	??_sprintf,w
  4080  054F  0081               	movwf	1
  4081  0550  3001               	movlw	1
  4082  0551  00B4               	movwf	??_sprintf
  4083  0552  0834               	movf	??_sprintf,w
  4084  0553  07BB               	addwf	sprintf@sp,f
  4085  0554                     l2187:	
  4086                           
  4087                           ;doprnt.c: 1478: }
  4088                           ;doprnt.c: 1481: prec = c;
  4089  0554  0840               	movf	sprintf@c,w
  4090  0555  00B4               	movwf	??_sprintf
  4091  0556  0834               	movf	??_sprintf,w
  4092  0557  00B9               	movwf	sprintf@prec
  4093  0558                     l2195:	
  4094                           ;doprnt.c: 1483: while(prec--) {
  4095                           
  4096  0558  30FF               	movlw	-1
  4097  0559  00B4               	movwf	??_sprintf
  4098  055A  0834               	movf	??_sprintf,w
  4099  055B  07B9               	addwf	sprintf@prec,f
  4100  055C  0839               	movf	sprintf@prec,w
  4101  055D  3AFF               	xorlw	255
  4102  055E  1903               	btfsc	3,2
  4103  055F  2C9D               	goto	l2197
  4104                           
  4105                           ;doprnt.c: 1487: {
  4106                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4107  0560  300A               	movlw	10
  4108  0561  00A8               	movwf	___lwmod@divisor
  4109  0562  3000               	movlw	0
  4110  0563  00A9               	movwf	___lwmod@divisor+1
  4111  0564  0839               	movf	sprintf@prec,w
  4112  0565  00B4               	movwf	??_sprintf
  4113  0566  01B5               	clrf	??_sprintf+1
  4114  0567  35B4               	lslf	??_sprintf,f
  4115  0568  0DB5               	rlf	??_sprintf+1,f
  4116  0569  3000               	movlw	low (_dpowers| (0+32768))
  4117  056A  0734               	addwf	??_sprintf,w
  4118  056B  0084               	movwf	4
  4119  056C  3088               	movlw	high (_dpowers| (0+32768))
  4120  056D  3D35               	addwfc	??_sprintf+1,w
  4121  056E  0085               	movwf	5
  4122  056F  3F00               	moviw [0]fsr0
  4123  0570  00A0               	movwf	___lwdiv@divisor
  4124  0571  3F01               	moviw [1]fsr0
  4125  0572  00A1               	movwf	___lwdiv@divisor+1
  4126  0573  083D               	movf	sprintf@_val+1,w
  4127  0574  01A3               	clrf	___lwdiv@dividend+1
  4128  0575  07A3               	addwf	___lwdiv@dividend+1,f
  4129  0576  083C               	movf	sprintf@_val,w
  4130  0577  01A2               	clrf	___lwdiv@dividend
  4131  0578  07A2               	addwf	___lwdiv@dividend,f
  4132  0579  318F  2775  3184   	fcall	___lwdiv
  4133  057C  0020               	movlb	0	; select bank0
  4134  057D  0821               	movf	?___lwdiv+1,w
  4135  057E  01AB               	clrf	___lwmod@dividend+1
  4136  057F  07AB               	addwf	___lwmod@dividend+1,f
  4137  0580  0820               	movf	?___lwdiv,w
  4138  0581  01AA               	clrf	___lwmod@dividend
  4139  0582  07AA               	addwf	___lwmod@dividend,f
  4140  0583  318F  2746  3184   	fcall	___lwmod
  4141  0586  0020               	movlb	0	; select bank0
  4142  0587  0828               	movf	?___lwmod,w
  4143  0588  3E30               	addlw	48
  4144  0589  00B6               	movwf	??_sprintf+2
  4145  058A  0836               	movf	??_sprintf+2,w
  4146  058B  00C0               	movwf	sprintf@c
  4147                           
  4148                           ;doprnt.c: 1532: }
  4149                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4150  058C  0840               	movf	sprintf@c,w
  4151  058D  00B4               	movwf	??_sprintf
  4152  058E  083B               	movf	sprintf@sp,w
  4153  058F  0086               	movwf	6
  4154  0590  0187               	clrf	7
  4155  0591  0834               	movf	??_sprintf,w
  4156  0592  0081               	movwf	1
  4157  0593  3001               	movlw	1
  4158  0594  00B4               	movwf	??_sprintf
  4159  0595  0834               	movf	??_sprintf,w
  4160  0596  07BB               	addwf	sprintf@sp,f
  4161  0597  2D58               	goto	l2195
  4162  0598                     l2199:	
  4163                           ;doprnt.c: 1534: }
  4164                           ;doprnt.c: 1542: }
  4165                           ;doprnt.c: 1544: alldone:
  4166                           
  4167                           
  4168                           ;doprnt.c: 1547: *sp = 0;
  4169  0598  083B               	movf	sprintf@sp,w
  4170  0599  0086               	movwf	6
  4171  059A  0187               	clrf	7
  4172  059B  0181               	clrf	1
  4173  059C  0008               	return
  4174  059D                     __end_of_sprintf:	
  4175                           ;doprnt.c: 1549: return 0;
  4176                           ;	Return value of _sprintf is never used
  4177                           
  4178                           
  4179                           	psect	text13
  4180  0F46                     __ptext13:	
  4181 ;; *************** function ___lwmod *****************
  4182 ;; Defined at:
  4183 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  divisor         2    8[BANK0 ] unsigned int 
  4186 ;;  dividend        2   10[BANK0 ] unsigned int 
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  counter         1   13[BANK0 ] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  2    8[BANK0 ] unsigned int 
  4191 ;; Registers used:
  4192 ;;		wreg, status,2, status,0
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4198 ;;      Params:         0       4       0       0       0       0       0       0
  4199 ;;      Locals:         0       1       0       0       0       0       0       0
  4200 ;;      Temps:          0       1       0       0       0       0       0       0
  4201 ;;      Totals:         0       6       0       0       0       0       0       0
  4202 ;;Total ram usage:        6 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    2
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_sprintf
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function ___lwmod
  4214  0F46                     ___lwmod:	
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4218  0F46  0020               	movlb	0	; select bank0
  4219  0F47  0829               	movf	___lwmod@divisor+1,w
  4220  0F48  0428               	iorwf	___lwmod@divisor,w
  4221  0F49  1903               	skipnz
  4222  0F4A  2F6E               	goto	l2049
  4223  0F4B  01AD               	clrf	___lwmod@counter
  4224  0F4C  0AAD               	incf	___lwmod@counter,f
  4225  0F4D                     l2039:	
  4226  0F4D  1BA9               	btfsc	___lwmod@divisor+1,7
  4227  0F4E  2F59               	goto	l2041
  4228  0F4F  3001               	movlw	1
  4229  0F50                     u1635:	
  4230  0F50  35A8               	lslf	___lwmod@divisor,f
  4231  0F51  0DA9               	rlf	___lwmod@divisor+1,f
  4232  0F52  0B89               	decfsz	9,f
  4233  0F53  2F50               	goto	u1635
  4234  0F54  3001               	movlw	1
  4235  0F55  00AC               	movwf	??___lwmod
  4236  0F56  082C               	movf	??___lwmod,w
  4237  0F57  07AD               	addwf	___lwmod@counter,f
  4238  0F58  2F4D               	goto	l2039
  4239  0F59                     l2041:	
  4240  0F59  0829               	movf	___lwmod@divisor+1,w
  4241  0F5A  022B               	subwf	___lwmod@dividend+1,w
  4242  0F5B  1D03               	skipz
  4243  0F5C  2F5F               	goto	u1655
  4244  0F5D  0828               	movf	___lwmod@divisor,w
  4245  0F5E  022A               	subwf	___lwmod@dividend,w
  4246  0F5F                     u1655:	
  4247  0F5F  1C03               	skipc
  4248  0F60  2F65               	goto	l2045
  4249  0F61  0828               	movf	___lwmod@divisor,w
  4250  0F62  02AA               	subwf	___lwmod@dividend,f
  4251  0F63  0829               	movf	___lwmod@divisor+1,w
  4252  0F64  3BAB               	subwfb	___lwmod@dividend+1,f
  4253  0F65                     l2045:	
  4254  0F65  3001               	movlw	1
  4255  0F66                     u1665:	
  4256  0F66  36A9               	lsrf	___lwmod@divisor+1,f
  4257  0F67  0CA8               	rrf	___lwmod@divisor,f
  4258  0F68  0B89               	decfsz	9,f
  4259  0F69  2F66               	goto	u1665
  4260  0F6A  3001               	movlw	1
  4261  0F6B  02AD               	subwf	___lwmod@counter,f
  4262  0F6C  1D03               	btfss	3,2
  4263  0F6D  2F59               	goto	l2041
  4264  0F6E                     l2049:	
  4265  0F6E  082B               	movf	___lwmod@dividend+1,w
  4266  0F6F  01A9               	clrf	?___lwmod+1
  4267  0F70  07A9               	addwf	?___lwmod+1,f
  4268  0F71  082A               	movf	___lwmod@dividend,w
  4269  0F72  01A8               	clrf	?___lwmod
  4270  0F73  07A8               	addwf	?___lwmod,f
  4271  0F74  0008               	return
  4272  0F75                     __end_of___lwmod:	
  4273                           
  4274                           	psect	text14
  4275  0F75                     __ptext14:	
  4276 ;; *************** function ___lwdiv *****************
  4277 ;; Defined at:
  4278 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  divisor         2    0[BANK0 ] unsigned int 
  4281 ;;  dividend        2    2[BANK0 ] unsigned int 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  quotient        2    5[BANK0 ] unsigned int 
  4284 ;;  counter         1    7[BANK0 ] unsigned char 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  2    0[BANK0 ] unsigned int 
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, status,0
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4294 ;;      Params:         0       4       0       0       0       0       0       0
  4295 ;;      Locals:         0       3       0       0       0       0       0       0
  4296 ;;      Temps:          0       1       0       0       0       0       0       0
  4297 ;;      Totals:         0       8       0       0       0       0       0       0
  4298 ;;Total ram usage:        8 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    2
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_sprintf
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function ___lwdiv
  4310  0F75                     ___lwdiv:	
  4311                           
  4312                           ;incstack = 0
  4313                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4314  0F75  0020               	movlb	0	; select bank0
  4315  0F76  01A5               	clrf	___lwdiv@quotient
  4316  0F77  01A6               	clrf	___lwdiv@quotient+1
  4317  0F78  0821               	movf	___lwdiv@divisor+1,w
  4318  0F79  0420               	iorwf	___lwdiv@divisor,w
  4319  0F7A  1903               	skipnz
  4320  0F7B  2FA5               	goto	l2027
  4321  0F7C  01A7               	clrf	___lwdiv@counter
  4322  0F7D  0AA7               	incf	___lwdiv@counter,f
  4323  0F7E                     l2015:	
  4324  0F7E  1BA1               	btfsc	___lwdiv@divisor+1,7
  4325  0F7F  2F8A               	goto	l2017
  4326  0F80  3001               	movlw	1
  4327  0F81                     u1565:	
  4328  0F81  35A0               	lslf	___lwdiv@divisor,f
  4329  0F82  0DA1               	rlf	___lwdiv@divisor+1,f
  4330  0F83  0B89               	decfsz	9,f
  4331  0F84  2F81               	goto	u1565
  4332  0F85  3001               	movlw	1
  4333  0F86  00A4               	movwf	??___lwdiv
  4334  0F87  0824               	movf	??___lwdiv,w
  4335  0F88  07A7               	addwf	___lwdiv@counter,f
  4336  0F89  2F7E               	goto	l2015
  4337  0F8A                     l2017:	
  4338  0F8A  3001               	movlw	1
  4339  0F8B                     u1585:	
  4340  0F8B  35A5               	lslf	___lwdiv@quotient,f
  4341  0F8C  0DA6               	rlf	___lwdiv@quotient+1,f
  4342  0F8D  0B89               	decfsz	9,f
  4343  0F8E  2F8B               	goto	u1585
  4344  0F8F  0821               	movf	___lwdiv@divisor+1,w
  4345  0F90  0223               	subwf	___lwdiv@dividend+1,w
  4346  0F91  1D03               	skipz
  4347  0F92  2F95               	goto	u1595
  4348  0F93  0820               	movf	___lwdiv@divisor,w
  4349  0F94  0222               	subwf	___lwdiv@dividend,w
  4350  0F95                     u1595:	
  4351  0F95  1C03               	skipc
  4352  0F96  2F9C               	goto	l2023
  4353  0F97  0820               	movf	___lwdiv@divisor,w
  4354  0F98  02A2               	subwf	___lwdiv@dividend,f
  4355  0F99  0821               	movf	___lwdiv@divisor+1,w
  4356  0F9A  3BA3               	subwfb	___lwdiv@dividend+1,f
  4357  0F9B  1425               	bsf	___lwdiv@quotient,0
  4358  0F9C                     l2023:	
  4359  0F9C  3001               	movlw	1
  4360  0F9D                     u1605:	
  4361  0F9D  36A1               	lsrf	___lwdiv@divisor+1,f
  4362  0F9E  0CA0               	rrf	___lwdiv@divisor,f
  4363  0F9F  0B89               	decfsz	9,f
  4364  0FA0  2F9D               	goto	u1605
  4365  0FA1  3001               	movlw	1
  4366  0FA2  02A7               	subwf	___lwdiv@counter,f
  4367  0FA3  1D03               	btfss	3,2
  4368  0FA4  2F8A               	goto	l2017
  4369  0FA5                     l2027:	
  4370  0FA5  0826               	movf	___lwdiv@quotient+1,w
  4371  0FA6  01A1               	clrf	?___lwdiv+1
  4372  0FA7  07A1               	addwf	?___lwdiv+1,f
  4373  0FA8  0825               	movf	___lwdiv@quotient,w
  4374  0FA9  01A0               	clrf	?___lwdiv
  4375  0FAA  07A0               	addwf	?___lwdiv,f
  4376  0FAB  0008               	return
  4377  0FAC                     __end_of___lwdiv:	
  4378                           
  4379                           	psect	text15
  4380  0356                     __ptext15:	
  4381 ;; *************** function _RecordMode *****************
  4382 ;; Defined at:
  4383 ;;		line 513 in file "launcher_functions.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  address         4   30[BANK0 ] long 
  4388 ;;  x               2   28[BANK0 ] int 
  4389 ;;  count           2   26[BANK0 ] int 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;		None               void
  4392 ;; Registers used:
  4393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4399 ;;      Params:         0       0       0       0       0       0       0       0
  4400 ;;      Locals:         0       8       0       0       0       0       0       0
  4401 ;;      Temps:          0       5       0       0       0       0       0       0
  4402 ;;      Totals:         0      13       0       0       0       0       0       0
  4403 ;;Total ram usage:       13 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    5
  4406 ;; This function calls:
  4407 ;;		_ReadBuffer
  4408 ;;		_WriteBuffer
  4409 ;;		_WriteOverheadSPI
  4410 ;;		_WriteSPI
  4411 ;; This function is called by:
  4412 ;;		_main
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _RecordMode
  4418  0356                     _RecordMode:	
  4419                           
  4420                           ;launcher_functions.c: 515: PORTAbits.RA4 = 1;
  4421                           
  4422                           ;incstack = 0
  4423                           ; Regs used in _RecordMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4424  0356  0020               	movlb	0	; select bank0
  4425  0357  160C               	bsf	12,4	;volatile
  4426                           
  4427                           ;launcher_functions.c: 516: long int address = 3;
  4428  0358  3000               	movlw	0
  4429  0359  00C1               	movwf	RecordMode@address+3
  4430  035A  3000               	movlw	0
  4431  035B  00C0               	movwf	RecordMode@address+2
  4432  035C  3000               	movlw	0
  4433  035D  00BF               	movwf	RecordMode@address+1
  4434  035E  3003               	movlw	3
  4435  035F  00BE               	movwf	RecordMode@address
  4436                           
  4437                           ;launcher_functions.c: 517: int count = 0;
  4438  0360  01BA               	clrf	RecordMode@count
  4439  0361  01BB               	clrf	RecordMode@count+1
  4440                           
  4441                           ;launcher_functions.c: 518: int x;
  4442                           ;launcher_functions.c: 520: (start) = 0;
  4443  0362  01FB               	clrf	_start
  4444  0363  01FC               	clrf	_start+1
  4445                           
  4446                           ;launcher_functions.c: 521: (end) = 0;
  4447  0364  01F9               	clrf	_end
  4448  0365  01FA               	clrf	_end+1
  4449                           
  4450                           ;launcher_functions.c: 524: WriteOverheadSPI(address);
  4451  0366  0841               	movf	RecordMode@address+3,w
  4452  0367  00AA               	movwf	WriteOverheadSPI@address+3
  4453  0368  0840               	movf	RecordMode@address+2,w
  4454  0369  00A9               	movwf	WriteOverheadSPI@address+2
  4455  036A  083F               	movf	RecordMode@address+1,w
  4456  036B  00A8               	movwf	WriteOverheadSPI@address+1
  4457  036C  083E               	movf	RecordMode@address,w
  4458  036D  00A7               	movwf	WriteOverheadSPI@address
  4459  036E  3187  2750  3183   	fcall	_WriteOverheadSPI
  4460                           
  4461                           ;launcher_functions.c: 525: for(x=0;x<3;x++)
  4462  0371  0020               	movlb	0	; select bank0
  4463  0372  01BC               	clrf	RecordMode@x
  4464  0373  01BD               	clrf	RecordMode@x+1
  4465  0374  083D               	movf	RecordMode@x+1,w
  4466  0375  3A80               	xorlw	128
  4467  0376  00B5               	movwf	??_RecordMode
  4468  0377  3080               	movlw	128
  4469  0378  0235               	subwf	??_RecordMode,w
  4470  0379  1D03               	skipz
  4471  037A  2B7D               	goto	u2055
  4472  037B  3003               	movlw	3
  4473  037C  023C               	subwf	RecordMode@x,w
  4474  037D                     u2055:	
  4475  037D  1803               	btfsc	3,0
  4476  037E  2B98               	goto	l2507
  4477  037F                     l2501:	
  4478                           
  4479                           ;launcher_functions.c: 526: {
  4480                           ;launcher_functions.c: 527: WriteBuffer(validLongitude[x]);
  4481  037F  0020               	movlb	0	; select bank0
  4482  0380  083C               	movf	RecordMode@x,w
  4483  0381  3EAD               	addlw	_validLongitude& (0+255)
  4484  0382  0086               	movwf	6
  4485  0383  0187               	clrf	7
  4486  0384  0801               	movf	1,w
  4487  0385  318E  262F  3183   	fcall	_WriteBuffer
  4488  0388  3001               	movlw	1
  4489  0389  0020               	movlb	0	; select bank0
  4490  038A  07BC               	addwf	RecordMode@x,f
  4491  038B  3000               	movlw	0
  4492  038C  3DBD               	addwfc	RecordMode@x+1,f
  4493  038D  083D               	movf	RecordMode@x+1,w
  4494  038E  3A80               	xorlw	128
  4495  038F  00B5               	movwf	??_RecordMode
  4496  0390  3080               	movlw	128
  4497  0391  0235               	subwf	??_RecordMode,w
  4498  0392  1D03               	skipz
  4499  0393  2B96               	goto	u2065
  4500  0394  3003               	movlw	3
  4501  0395  023C               	subwf	RecordMode@x,w
  4502  0396                     u2065:	
  4503  0396  1C03               	skipc
  4504  0397  2B7F               	goto	l2501
  4505  0398                     l2507:	
  4506                           
  4507                           ;launcher_functions.c: 528: }
  4508                           ;launcher_functions.c: 529: WriteBuffer(validNorthSouth);
  4509  0398  0021               	movlb	1	; select bank1
  4510  0399  086E               	movf	_validNorthSouth^(0+128),w
  4511  039A  318E  262F  3183   	fcall	_WriteBuffer
  4512                           
  4513                           ;launcher_functions.c: 530: for(x=0;x<3;x++)
  4514  039D  0020               	movlb	0	; select bank0
  4515  039E  01BC               	clrf	RecordMode@x
  4516  039F  01BD               	clrf	RecordMode@x+1
  4517  03A0  083D               	movf	RecordMode@x+1,w
  4518  03A1  3A80               	xorlw	128
  4519  03A2  00B5               	movwf	??_RecordMode
  4520  03A3  3080               	movlw	128
  4521  03A4  0235               	subwf	??_RecordMode,w
  4522  03A5  1D03               	skipz
  4523  03A6  2BA9               	goto	u2075
  4524  03A7  3003               	movlw	3
  4525  03A8  023C               	subwf	RecordMode@x,w
  4526  03A9                     u2075:	
  4527  03A9  1803               	btfsc	3,0
  4528  03AA  2BC4               	goto	l2521
  4529  03AB                     l2515:	
  4530                           
  4531                           ;launcher_functions.c: 531: {
  4532                           ;launcher_functions.c: 532: WriteBuffer(validLatitude[x]);
  4533  03AB  0020               	movlb	0	; select bank0
  4534  03AC  083C               	movf	RecordMode@x,w
  4535  03AD  3EAA               	addlw	_validLatitude& (0+255)
  4536  03AE  0086               	movwf	6
  4537  03AF  0187               	clrf	7
  4538  03B0  0801               	movf	1,w
  4539  03B1  318E  262F  3183   	fcall	_WriteBuffer
  4540  03B4  3001               	movlw	1
  4541  03B5  0020               	movlb	0	; select bank0
  4542  03B6  07BC               	addwf	RecordMode@x,f
  4543  03B7  3000               	movlw	0
  4544  03B8  3DBD               	addwfc	RecordMode@x+1,f
  4545  03B9  083D               	movf	RecordMode@x+1,w
  4546  03BA  3A80               	xorlw	128
  4547  03BB  00B5               	movwf	??_RecordMode
  4548  03BC  3080               	movlw	128
  4549  03BD  0235               	subwf	??_RecordMode,w
  4550  03BE  1D03               	skipz
  4551  03BF  2BC2               	goto	u2085
  4552  03C0  3003               	movlw	3
  4553  03C1  023C               	subwf	RecordMode@x,w
  4554  03C2                     u2085:	
  4555  03C2  1C03               	skipc
  4556  03C3  2BAB               	goto	l2515
  4557  03C4                     l2521:	
  4558                           
  4559                           ;launcher_functions.c: 533: }
  4560                           ;launcher_functions.c: 534: WriteBuffer(validEastWest);
  4561  03C4  0021               	movlb	1	; select bank1
  4562  03C5  086D               	movf	_validEastWest^(0+128),w
  4563  03C6  318E  262F  3183   	fcall	_WriteBuffer
  4564                           
  4565                           ;launcher_functions.c: 536: TMR1IF = 0;
  4566  03C9  0020               	movlb	0	; select bank0
  4567  03CA  1011               	bcf	17,0	;volatile
  4568                           
  4569                           ;launcher_functions.c: 537: TMR1IE = 1;
  4570  03CB  0021               	movlb	1	; select bank1
  4571  03CC  1411               	bsf	17,0	;volatile
  4572                           
  4573                           ;launcher_functions.c: 538: TMR1ON = 1;
  4574  03CD  0020               	movlb	0	; select bank0
  4575  03CE  1418               	bsf	24,0	;volatile
  4576                           
  4577                           ;launcher_functions.c: 540: while(((recordFlag) || !((((start))==((end)))?(1):(0))) && (
      +                          address < 131072))
  4578  03CF  2C06               	goto	l2545
  4579  03D0                     l2529:	
  4580                           
  4581                           ;launcher_functions.c: 541: {
  4582                           ;launcher_functions.c: 542: if(count>=256)
  4583  03D0  083B               	movf	RecordMode@count+1,w
  4584  03D1  3A80               	xorlw	128
  4585  03D2  00B5               	movwf	??_RecordMode
  4586  03D3  3081               	movlw	129
  4587  03D4  0235               	subwf	??_RecordMode,w
  4588  03D5  1D03               	skipz
  4589  03D6  2BD9               	goto	u2095
  4590  03D7  3000               	movlw	0
  4591  03D8  023A               	subwf	RecordMode@count,w
  4592  03D9                     u2095:	
  4593  03D9  1C03               	skipc
  4594  03DA  2BEB               	goto	l2537
  4595                           
  4596                           ;launcher_functions.c: 543: {
  4597                           ;launcher_functions.c: 544: LATC2 = (1);
  4598  03DB  0022               	movlb	2	; select bank2
  4599  03DC  150E               	bsf	14,2	;volatile
  4600                           
  4601                           ;launcher_functions.c: 545: count = 0;
  4602  03DD  0020               	movlb	0	; select bank0
  4603  03DE  01BA               	clrf	RecordMode@count
  4604  03DF  01BB               	clrf	RecordMode@count+1
  4605                           
  4606                           ;launcher_functions.c: 546: WriteOverheadSPI(address);
  4607  03E0  0841               	movf	RecordMode@address+3,w
  4608  03E1  00AA               	movwf	WriteOverheadSPI@address+3
  4609  03E2  0840               	movf	RecordMode@address+2,w
  4610  03E3  00A9               	movwf	WriteOverheadSPI@address+2
  4611  03E4  083F               	movf	RecordMode@address+1,w
  4612  03E5  00A8               	movwf	WriteOverheadSPI@address+1
  4613  03E6  083E               	movf	RecordMode@address,w
  4614  03E7  00A7               	movwf	WriteOverheadSPI@address
  4615  03E8  3187  2750  3183   	fcall	_WriteOverheadSPI
  4616  03EB                     l2537:	
  4617                           
  4618                           ;launcher_functions.c: 547: }
  4619                           ;launcher_functions.c: 548: if(!((((start))==((end)))?(1):(0)))
  4620  03EB  087A               	movf	_end+1,w
  4621  03EC  067C               	xorwf	_start+1,w
  4622  03ED  1D03               	skipz
  4623  03EE  2BF1               	goto	u2105
  4624  03EF  0879               	movf	_end,w
  4625  03F0  067B               	xorwf	_start,w
  4626  03F1                     u2105:	
  4627  03F1  1903               	skipnz
  4628  03F2  2C06               	goto	l2545
  4629                           
  4630                           ;launcher_functions.c: 549: {
  4631                           ;launcher_functions.c: 550: WriteSPI(ReadBuffer());
  4632  03F3  318E  2617  3183   	fcall	_ReadBuffer
  4633  03F6  318D  25ED  3183   	fcall	_WriteSPI
  4634                           
  4635                           ;launcher_functions.c: 551: address++;
  4636  03F9  3001               	movlw	1
  4637  03FA  0020               	movlb	0	; select bank0
  4638  03FB  07BE               	addwf	RecordMode@address,f
  4639  03FC  3000               	movlw	0
  4640  03FD  3DBF               	addwfc	RecordMode@address+1,f
  4641  03FE  3000               	movlw	0
  4642  03FF  3DC0               	addwfc	RecordMode@address+2,f
  4643  0400  3000               	movlw	0
  4644  0401  3DC1               	addwfc	RecordMode@address+3,f
  4645                           
  4646                           ;launcher_functions.c: 552: count++;
  4647  0402  3001               	movlw	1
  4648  0403  07BA               	addwf	RecordMode@count,f
  4649  0404  3000               	movlw	0
  4650  0405  3DBB               	addwfc	RecordMode@count+1,f
  4651  0406                     l2545:	
  4652  0406  0020               	movlb	0	; select bank0
  4653  0407  08EE               	movf	_recordFlag,f
  4654  0408  1D03               	skipz
  4655  0409  2C12               	goto	l2549
  4656  040A  087A               	movf	_end+1,w
  4657  040B  067C               	xorwf	_start+1,w
  4658  040C  1D03               	skipz
  4659  040D  2C10               	goto	u2125
  4660  040E  0879               	movf	_end,w
  4661  040F  067B               	xorwf	_start,w
  4662  0410                     u2125:	
  4663  0410  1903               	skipnz
  4664  0411  2C26               	goto	l431
  4665  0412                     l2549:	
  4666  0412  0841               	movf	RecordMode@address+3,w
  4667  0413  3A80               	xorlw	128
  4668  0414  00B5               	movwf	??_RecordMode
  4669  0415  3000               	movlw	0
  4670  0416  3A80               	xorlw	128
  4671  0417  0235               	subwf	??_RecordMode,w
  4672  0418  1D03               	skipz
  4673  0419  2C24               	goto	u2133
  4674  041A  3002               	movlw	2
  4675  041B  0240               	subwf	RecordMode@address+2,w
  4676  041C  1D03               	skipz
  4677  041D  2C24               	goto	u2133
  4678  041E  3000               	movlw	0
  4679  041F  023F               	subwf	RecordMode@address+1,w
  4680  0420  1D03               	skipz
  4681  0421  2C24               	goto	u2133
  4682  0422  3000               	movlw	0
  4683  0423  023E               	subwf	RecordMode@address,w
  4684  0424                     u2133:	
  4685  0424  1C03               	skipc
  4686  0425  2BD0               	goto	l2529
  4687  0426                     l431:	
  4688                           
  4689                           ;launcher_functions.c: 553: }
  4690                           ;launcher_functions.c: 555: }
  4691                           ;launcher_functions.c: 556: LATC2 = (1);
  4692  0426  0022               	movlb	2	; select bank2
  4693  0427  150E               	bsf	14,2	;volatile
  4694                           
  4695                           ;launcher_functions.c: 557: TMR1IE = 0;
  4696  0428  0021               	movlb	1	; select bank1
  4697  0429  1011               	bcf	17,0	;volatile
  4698                           
  4699                           ;launcher_functions.c: 558: TMR1ON = 0;
  4700  042A  0020               	movlb	0	; select bank0
  4701  042B  1018               	bcf	24,0	;volatile
  4702                           
  4703                           ;launcher_functions.c: 559: _delay((unsigned long)((5)*(16000000/4000.0)));
  4704  042C  301A               	movlw	26
  4705  042D  00B6               	movwf	??_RecordMode+1
  4706  042E  30F8               	movlw	248
  4707  042F  00B5               	movwf	??_RecordMode
  4708  0430                     u2697:	
  4709  0430  0BB5               	decfsz	??_RecordMode,f
  4710  0431  2C30               	goto	u2697
  4711  0432  0BB6               	decfsz	??_RecordMode+1,f
  4712  0433  2C30               	goto	u2697
  4713  0434  0000               	nop
  4714                           
  4715                           ;launcher_functions.c: 560: WriteOverheadSPI(3-3);
  4716  0435  3000               	movlw	0
  4717  0436  0020               	movlb	0	; select bank0
  4718  0437  00AA               	movwf	WriteOverheadSPI@address+3
  4719  0438  3000               	movlw	0
  4720  0439  00A9               	movwf	WriteOverheadSPI@address+2
  4721  043A  3000               	movlw	0
  4722  043B  00A8               	movwf	WriteOverheadSPI@address+1
  4723  043C  3000               	movlw	0
  4724  043D  00A7               	movwf	WriteOverheadSPI@address
  4725  043E  3187  2750  3183   	fcall	_WriteOverheadSPI
  4726                           
  4727                           ;launcher_functions.c: 561: if(address >= 131072)
  4728  0441  0020               	movlb	0	; select bank0
  4729  0442  0841               	movf	RecordMode@address+3,w
  4730  0443  3A80               	xorlw	128
  4731  0444  00B5               	movwf	??_RecordMode
  4732  0445  3000               	movlw	0
  4733  0446  3A80               	xorlw	128
  4734  0447  0235               	subwf	??_RecordMode,w
  4735  0448  1D03               	skipz
  4736  0449  2C54               	goto	u2143
  4737  044A  3002               	movlw	2
  4738  044B  0240               	subwf	RecordMode@address+2,w
  4739  044C  1D03               	skipz
  4740  044D  2C54               	goto	u2143
  4741  044E  3000               	movlw	0
  4742  044F  023F               	subwf	RecordMode@address+1,w
  4743  0450  1D03               	skipz
  4744  0451  2C54               	goto	u2143
  4745  0452  3000               	movlw	0
  4746  0453  023E               	subwf	RecordMode@address,w
  4747  0454                     u2143:	
  4748  0454  1C03               	skipc
  4749  0455  2C60               	goto	l2559
  4750                           
  4751                           ;launcher_functions.c: 562: {
  4752                           ;launcher_functions.c: 563: WriteSPI((131072 - 1)>>16);
  4753  0456  3001               	movlw	1
  4754  0457  318D  25ED  3183   	fcall	_WriteSPI
  4755                           
  4756                           ;launcher_functions.c: 564: WriteSPI((131072 - 1)>>8);
  4757  045A  30FF               	movlw	255
  4758  045B  318D  25ED  3183   	fcall	_WriteSPI
  4759                           
  4760                           ;launcher_functions.c: 565: WriteSPI(131072 - 1);
  4761  045E  30FF               	movlw	255
  4762  045F  2C8C               	goto	L3
  4763  0460                     l2559:	
  4764                           ;launcher_functions.c: 566: }
  4765                           
  4766                           
  4767                           ;launcher_functions.c: 567: else
  4768                           ;launcher_functions.c: 568: {
  4769                           ;launcher_functions.c: 569: WriteSPI(address>>16);
  4770  0460  0020               	movlb	0	; select bank0
  4771  0461  083E               	movf	RecordMode@address,w
  4772  0462  00B5               	movwf	??_RecordMode
  4773  0463  083F               	movf	RecordMode@address+1,w
  4774  0464  00B6               	movwf	??_RecordMode+1
  4775  0465  0840               	movf	RecordMode@address+2,w
  4776  0466  00B7               	movwf	??_RecordMode+2
  4777  0467  0841               	movf	RecordMode@address+3,w
  4778  0468  00B8               	movwf	??_RecordMode+3
  4779  0469  3010               	movlw	16
  4780  046A  00B9               	movwf	??_RecordMode+4
  4781  046B                     u2155:	
  4782  046B  37B8               	asrf	??_RecordMode+3,f
  4783  046C  0CB7               	rrf	??_RecordMode+2,f
  4784  046D  0CB6               	rrf	??_RecordMode+1,f
  4785  046E  0CB5               	rrf	??_RecordMode,f
  4786  046F  0BB9               	decfsz	??_RecordMode+4,f
  4787  0470  2C6B               	goto	u2155
  4788  0471  0835               	movf	??_RecordMode,w
  4789  0472  318D  25ED  3183   	fcall	_WriteSPI
  4790                           
  4791                           ;launcher_functions.c: 570: WriteSPI(address>>8);
  4792  0475  0020               	movlb	0	; select bank0
  4793  0476  083E               	movf	RecordMode@address,w
  4794  0477  00B5               	movwf	??_RecordMode
  4795  0478  083F               	movf	RecordMode@address+1,w
  4796  0479  00B6               	movwf	??_RecordMode+1
  4797  047A  0840               	movf	RecordMode@address+2,w
  4798  047B  00B7               	movwf	??_RecordMode+2
  4799  047C  0841               	movf	RecordMode@address+3,w
  4800  047D  00B8               	movwf	??_RecordMode+3
  4801  047E  3008               	movlw	8
  4802  047F  00B9               	movwf	??_RecordMode+4
  4803  0480                     u2165:	
  4804  0480  37B8               	asrf	??_RecordMode+3,f
  4805  0481  0CB7               	rrf	??_RecordMode+2,f
  4806  0482  0CB6               	rrf	??_RecordMode+1,f
  4807  0483  0CB5               	rrf	??_RecordMode,f
  4808  0484  0BB9               	decfsz	??_RecordMode+4,f
  4809  0485  2C80               	goto	u2165
  4810  0486  0835               	movf	??_RecordMode,w
  4811  0487  318D  25ED  3183   	fcall	_WriteSPI
  4812                           
  4813                           ;launcher_functions.c: 571: WriteSPI(address);
  4814  048A  0020               	movlb	0	; select bank0
  4815  048B  083E               	movf	RecordMode@address,w
  4816  048C                     L3:	
  4817  048C  318D  25ED         	fcall	_WriteSPI
  4818                           
  4819                           ;launcher_functions.c: 572: }
  4820                           ;launcher_functions.c: 573: LATC2 = (1);
  4821  048E  0022               	movlb	2	; select bank2
  4822  048F  150E               	bsf	14,2	;volatile
  4823                           
  4824                           ;launcher_functions.c: 574: (start) = 0;
  4825  0490  01FB               	clrf	_start
  4826  0491  01FC               	clrf	_start+1
  4827                           
  4828                           ;launcher_functions.c: 575: (end) = 0;
  4829  0492  01F9               	clrf	_end
  4830  0493  01FA               	clrf	_end+1
  4831                           
  4832                           ;launcher_functions.c: 576: PORTAbits.RA4 = 0;
  4833  0494  0020               	movlb	0	; select bank0
  4834  0495  120C               	bcf	12,4	;volatile
  4835  0496  0008               	return
  4836  0497                     __end_of_RecordMode:	
  4837                           
  4838                           	psect	text16
  4839  0750                     __ptext16:	
  4840 ;; *************** function _WriteOverheadSPI *****************
  4841 ;; Defined at:
  4842 ;;		line 168 in file "launcher_functions.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  address         4    7[BANK0 ] long 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  address_byte    3   17[BANK0 ] unsigned char [3]
  4847 ;;  StatusReg       1   20[BANK0 ] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;		None               void
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0, pclath, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4857 ;;      Params:         0       4       0       0       0       0       0       0
  4858 ;;      Locals:         0       4       0       0       0       0       0       0
  4859 ;;      Temps:          0       6       0       0       0       0       0       0
  4860 ;;      Totals:         0      14       0       0       0       0       0       0
  4861 ;;Total ram usage:       14 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    4
  4864 ;; This function calls:
  4865 ;;		_ReadStatusSPI
  4866 ;;		_WriteSPI
  4867 ;; This function is called by:
  4868 ;;		_RecordMode
  4869 ;;		_PreRecordMode
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _WriteOverheadSPI
  4875  0750                     _WriteOverheadSPI:	
  4876                           
  4877                           ;launcher_functions.c: 170: unsigned char address_bytes[3];
  4878                           ;launcher_functions.c: 171: unsigned char StatusReg;
  4879                           ;launcher_functions.c: 173: address_bytes[0]=(unsigned char)(address>>16);
  4880                           
  4881                           ;incstack = 0
  4882                           ; Regs used in _WriteOverheadSPI: [wreg+status,2+status,0+pclath+cstack]
  4883  0750  0020               	movlb	0	; select bank0
  4884  0751  0827               	movf	WriteOverheadSPI@address,w
  4885  0752  00AB               	movwf	??_WriteOverheadSPI
  4886  0753  0828               	movf	WriteOverheadSPI@address+1,w
  4887  0754  00AC               	movwf	??_WriteOverheadSPI+1
  4888  0755  0829               	movf	WriteOverheadSPI@address+2,w
  4889  0756  00AD               	movwf	??_WriteOverheadSPI+2
  4890  0757  082A               	movf	WriteOverheadSPI@address+3,w
  4891  0758  00AE               	movwf	??_WriteOverheadSPI+3
  4892  0759  3010               	movlw	16
  4893  075A  00AF               	movwf	??_WriteOverheadSPI+4
  4894  075B                     u1695:	
  4895  075B  37AE               	asrf	??_WriteOverheadSPI+3,f
  4896  075C  0CAD               	rrf	??_WriteOverheadSPI+2,f
  4897  075D  0CAC               	rrf	??_WriteOverheadSPI+1,f
  4898  075E  0CAB               	rrf	??_WriteOverheadSPI,f
  4899  075F  0BAF               	decfsz	??_WriteOverheadSPI+4,f
  4900  0760  2F5B               	goto	u1695
  4901  0761  082B               	movf	??_WriteOverheadSPI,w
  4902  0762  00B0               	movwf	??_WriteOverheadSPI+5
  4903  0763  0830               	movf	??_WriteOverheadSPI+5,w
  4904  0764  00B1               	movwf	WriteOverheadSPI@address_bytes
  4905                           
  4906                           ;launcher_functions.c: 174: address_bytes[1]=(unsigned char)(address>>8);
  4907  0765  0827               	movf	WriteOverheadSPI@address,w
  4908  0766  00AB               	movwf	??_WriteOverheadSPI
  4909  0767  0828               	movf	WriteOverheadSPI@address+1,w
  4910  0768  00AC               	movwf	??_WriteOverheadSPI+1
  4911  0769  0829               	movf	WriteOverheadSPI@address+2,w
  4912  076A  00AD               	movwf	??_WriteOverheadSPI+2
  4913  076B  082A               	movf	WriteOverheadSPI@address+3,w
  4914  076C  00AE               	movwf	??_WriteOverheadSPI+3
  4915  076D  3008               	movlw	8
  4916  076E  00AF               	movwf	??_WriteOverheadSPI+4
  4917  076F                     u1705:	
  4918  076F  37AE               	asrf	??_WriteOverheadSPI+3,f
  4919  0770  0CAD               	rrf	??_WriteOverheadSPI+2,f
  4920  0771  0CAC               	rrf	??_WriteOverheadSPI+1,f
  4921  0772  0CAB               	rrf	??_WriteOverheadSPI,f
  4922  0773  0BAF               	decfsz	??_WriteOverheadSPI+4,f
  4923  0774  2F6F               	goto	u1705
  4924  0775  082B               	movf	??_WriteOverheadSPI,w
  4925  0776  00B0               	movwf	??_WriteOverheadSPI+5
  4926  0777  0830               	movf	??_WriteOverheadSPI+5,w
  4927  0778  00B2               	movwf	WriteOverheadSPI@address_bytes+1
  4928                           
  4929                           ;launcher_functions.c: 175: address_bytes[2]=(unsigned char)(address);
  4930  0779  0827               	movf	WriteOverheadSPI@address,w
  4931  077A  00AB               	movwf	??_WriteOverheadSPI
  4932  077B  082B               	movf	??_WriteOverheadSPI,w
  4933  077C  00B3               	movwf	WriteOverheadSPI@address_bytes+2
  4934  077D                     l2073:	
  4935                           ;launcher_functions.c: 177: do
  4936                           
  4937                           
  4938                           ;launcher_functions.c: 178: {
  4939                           ;launcher_functions.c: 179: StatusReg = (ReadStatusSPI() & 0x01);
  4940  077D  318D  25A6  3187   	fcall	_ReadStatusSPI
  4941  0780  3901               	andlw	1
  4942  0781  0020               	movlb	0	; select bank0
  4943  0782  00AB               	movwf	??_WriteOverheadSPI
  4944  0783  082B               	movf	??_WriteOverheadSPI,w
  4945  0784  00B4               	movwf	WriteOverheadSPI@StatusReg
  4946                           
  4947                           ;launcher_functions.c: 180: } while (StatusReg);
  4948  0785  08B4               	movf	WriteOverheadSPI@StatusReg,f
  4949  0786  1D03               	skipz
  4950  0787  2F7D               	goto	l2073
  4951                           
  4952                           ;launcher_functions.c: 183: LATC2 = (0);
  4953  0788  0022               	movlb	2	; select bank2
  4954  0789  110E               	bcf	14,2	;volatile
  4955                           
  4956                           ;launcher_functions.c: 184: WriteSPI((0x06));
  4957  078A  3006               	movlw	6
  4958  078B  318D  25ED  3187   	fcall	_WriteSPI
  4959                           
  4960                           ;launcher_functions.c: 185: LATC2 = (1);
  4961  078E  0022               	movlb	2	; select bank2
  4962  078F  150E               	bsf	14,2	;volatile
  4963  0790                     l305:	
  4964                           ;launcher_functions.c: 187: do
  4965                           
  4966                           
  4967                           ;launcher_functions.c: 188: {
  4968                           ;launcher_functions.c: 189: StatusReg = (ReadStatusSPI() & 0x02);
  4969  0790  318D  25A6  3187   	fcall	_ReadStatusSPI
  4970  0793  3902               	andlw	2
  4971  0794  0020               	movlb	0	; select bank0
  4972  0795  00AB               	movwf	??_WriteOverheadSPI
  4973  0796  082B               	movf	??_WriteOverheadSPI,w
  4974  0797  00B4               	movwf	WriteOverheadSPI@StatusReg
  4975                           
  4976                           ;launcher_functions.c: 190: } while (!StatusReg);
  4977  0798  0834               	movf	WriteOverheadSPI@StatusReg,w
  4978  0799  1903               	btfsc	3,2
  4979  079A  2F90               	goto	l305
  4980                           
  4981                           ;launcher_functions.c: 194: LATC2=(0);
  4982  079B  0022               	movlb	2	; select bank2
  4983  079C  110E               	bcf	14,2	;volatile
  4984                           
  4985                           ;launcher_functions.c: 195: WriteSPI((0x02));
  4986  079D  3002               	movlw	2
  4987  079E  318D  25ED  3187   	fcall	_WriteSPI
  4988                           
  4989                           ;launcher_functions.c: 196: WriteSPI(address_bytes[0]);
  4990  07A1  0020               	movlb	0	; select bank0
  4991  07A2  0831               	movf	WriteOverheadSPI@address_bytes,w
  4992  07A3  318D  25ED  3187   	fcall	_WriteSPI
  4993                           
  4994                           ;launcher_functions.c: 197: WriteSPI(address_bytes[1]);
  4995  07A6  0020               	movlb	0	; select bank0
  4996  07A7  0832               	movf	WriteOverheadSPI@address_bytes+1,w
  4997  07A8  318D  25ED  3187   	fcall	_WriteSPI
  4998                           
  4999                           ;launcher_functions.c: 198: WriteSPI(address_bytes[2]);
  5000  07AB  0020               	movlb	0	; select bank0
  5001  07AC  0833               	movf	WriteOverheadSPI@address_bytes+2,w
  5002  07AD  318D  25ED         	fcall	_WriteSPI
  5003  07AF  0008               	return
  5004  07B0                     __end_of_WriteOverheadSPI:	
  5005                           ;launcher_functions.c: 200: return;
  5006                           
  5007                           
  5008                           	psect	text17
  5009  0DA6                     __ptext17:	
  5010 ;; *************** function _ReadStatusSPI *****************
  5011 ;; Defined at:
  5012 ;;		line 156 in file "launcher_functions.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;		None
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  dataRead        1    6[BANK0 ] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  1    wreg      unsigned char 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0, pclath, cstack
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5026 ;;      Params:         0       0       0       0       0       0       0       0
  5027 ;;      Locals:         0       1       0       0       0       0       0       0
  5028 ;;      Temps:          0       1       0       0       0       0       0       0
  5029 ;;      Totals:         0       2       0       0       0       0       0       0
  5030 ;;Total ram usage:        2 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    3
  5033 ;; This function calls:
  5034 ;;		_ReadSPI
  5035 ;;		_WriteSPI
  5036 ;; This function is called by:
  5037 ;;		_WriteOverheadSPI
  5038 ;;		_ReadOverheadSPI
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           
  5043                           ;psect for function _ReadStatusSPI
  5044  0DA6                     _ReadStatusSPI:	
  5045                           
  5046                           ;launcher_functions.c: 158: unsigned char dataRead;
  5047                           ;launcher_functions.c: 160: LATC2=(0);
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _ReadStatusSPI: [wreg+status,2+status,0+pclath+cstack]
  5051  0DA6  0022               	movlb	2	; select bank2
  5052  0DA7  110E               	bcf	14,2	;volatile
  5053                           
  5054                           ;launcher_functions.c: 161: WriteSPI((0x05));
  5055  0DA8  3005               	movlw	5
  5056  0DA9  318D  25ED  318D   	fcall	_WriteSPI
  5057                           
  5058                           ;launcher_functions.c: 162: dataRead = ReadSPI();
  5059  0DAC  318D  257C         	fcall	_ReadSPI
  5060  0DAE  0020               	movlb	0	; select bank0
  5061  0DAF  00A5               	movwf	??_ReadStatusSPI
  5062  0DB0  0825               	movf	??_ReadStatusSPI,w
  5063  0DB1  00A6               	movwf	ReadStatusSPI@dataRead
  5064                           
  5065                           ;launcher_functions.c: 163: LATC2=(1);
  5066  0DB2  0022               	movlb	2	; select bank2
  5067  0DB3  150E               	bsf	14,2	;volatile
  5068                           
  5069                           ;launcher_functions.c: 165: return(dataRead);
  5070  0DB4  0020               	movlb	0	; select bank0
  5071  0DB5  0826               	movf	ReadStatusSPI@dataRead,w
  5072  0DB6  0008               	return
  5073  0DB7                     __end_of_ReadStatusSPI:	
  5074                           
  5075                           	psect	text18
  5076  0DED                     __ptext18:	
  5077 ;; *************** function _WriteSPI *****************
  5078 ;; Defined at:
  5079 ;;		line 136 in file "launcher_functions.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  databyte        1    wreg     unsigned char 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  databyte        1    4[BANK0 ] unsigned char 
  5084 ;;  temp            2    2[BANK0 ] unsigned int 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;		None               void
  5087 ;; Registers used:
  5088 ;;		wreg
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5094 ;;      Params:         0       0       0       0       0       0       0       0
  5095 ;;      Locals:         0       3       0       0       0       0       0       0
  5096 ;;      Temps:          0       2       0       0       0       0       0       0
  5097 ;;      Totals:         0       5       0       0       0       0       0       0
  5098 ;;Total ram usage:        5 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    2
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_ReadStatusSPI
  5105 ;;		_WriteOverheadSPI
  5106 ;;		_RecordMode
  5107 ;;		_ReadOverheadSPI
  5108 ;;		_PreRecordMode
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _WriteSPI
  5114  0DED                     _WriteSPI:	
  5115                           
  5116                           ;incstack = 0
  5117                           ; Regs used in _WriteSPI: [wreg]
  5118                           ;WriteSPI@databyte stored from wreg
  5119  0DED  0020               	movlb	0	; select bank0
  5120  0DEE  00A4               	movwf	WriteSPI@databyte
  5121                           
  5122                           ;launcher_functions.c: 138: unsigned int temp;
  5123                           ;launcher_functions.c: 139: temp = SSPBUF;
  5124  0DEF  0024               	movlb	4	; select bank4
  5125  0DF0  0811               	movf	17,w	;volatile
  5126  0DF1  0020               	movlb	0	; select bank0
  5127  0DF2  00A0               	movwf	??_WriteSPI
  5128  0DF3  01A1               	clrf	??_WriteSPI+1
  5129  0DF4  0820               	movf	??_WriteSPI,w
  5130  0DF5  00A2               	movwf	WriteSPI@temp
  5131  0DF6  0821               	movf	??_WriteSPI+1,w
  5132  0DF7  00A3               	movwf	WriteSPI@temp+1
  5133                           
  5134                           ;launcher_functions.c: 140: PIR1bits.SSP1IF=0;
  5135  0DF8  1191               	bcf	17,3	;volatile
  5136                           
  5137                           ;launcher_functions.c: 141: SSPBUF = databyte;
  5138  0DF9  0824               	movf	WriteSPI@databyte,w
  5139  0DFA  0024               	movlb	4	; select bank4
  5140  0DFB  0091               	movwf	17	;volatile
  5141  0DFC                     l288:	
  5142                           ;launcher_functions.c: 142: while(!PIR1bits.SSP1IF);
  5143                           
  5144  0DFC  0020               	movlb	0	; select bank0
  5145  0DFD  1991               	btfsc	17,3	;volatile
  5146  0DFE  0008               	return
  5147  0DFF  2DFC               	goto	l288
  5148  0E00                     __end_of_WriteSPI:	
  5149                           
  5150                           	psect	text19
  5151  0D7C                     __ptext19:	
  5152 ;; *************** function _ReadSPI *****************
  5153 ;; Defined at:
  5154 ;;		line 145 in file "launcher_functions.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;		None
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  dataByte        1    1[BANK0 ] unsigned char 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      unsigned char 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5168 ;;      Params:         0       0       0       0       0       0       0       0
  5169 ;;      Locals:         0       1       0       0       0       0       0       0
  5170 ;;      Temps:          0       1       0       0       0       0       0       0
  5171 ;;      Totals:         0       2       0       0       0       0       0       0
  5172 ;;Total ram usage:        2 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    2
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_ReadStatusSPI
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           
  5183                           ;psect for function _ReadSPI
  5184  0D7C                     _ReadSPI:	
  5185                           
  5186                           ;launcher_functions.c: 147: unsigned char dataByte;
  5187                           ;launcher_functions.c: 149: SSPBUF = 0x00;
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _ReadSPI: [wreg+status,2]
  5191  0D7C  0024               	movlb	4	; select bank4
  5192  0D7D  0191               	clrf	17	;volatile
  5193  0D7E                     l294:	
  5194                           ;launcher_functions.c: 150: while(!SSPSTATbits.BF);
  5195                           
  5196  0D7E  1C14               	btfss	20,0	;volatile
  5197  0D7F  2D7E               	goto	l294
  5198                           
  5199                           ;launcher_functions.c: 151: dataByte = SSPBUF;
  5200  0D80  0811               	movf	17,w	;volatile
  5201  0D81  0020               	movlb	0	; select bank0
  5202  0D82  00A0               	movwf	??_ReadSPI
  5203  0D83  0820               	movf	??_ReadSPI,w
  5204  0D84  00A1               	movwf	ReadSPI@dataByte
  5205                           
  5206                           ;launcher_functions.c: 152: PIR1bits.SSP1IF=0;
  5207  0D85  1191               	bcf	17,3	;volatile
  5208                           
  5209                           ;launcher_functions.c: 153: return (dataByte);
  5210  0D86  0821               	movf	ReadSPI@dataByte,w
  5211  0D87  0008               	return
  5212  0D88                     __end_of_ReadSPI:	
  5213                           
  5214                           	psect	text20
  5215  0E2F                     __ptext20:	
  5216 ;; *************** function _WriteBuffer *****************
  5217 ;; Defined at:
  5218 ;;		line 205 in file "launcher_functions.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  data            1    wreg     unsigned char 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  data            1    1[BANK0 ] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;		None               void
  5225 ;; Registers used:
  5226 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5232 ;;      Params:         0       0       0       0       0       0       0       0
  5233 ;;      Locals:         0       1       0       0       0       0       0       0
  5234 ;;      Temps:          0       1       0       0       0       0       0       0
  5235 ;;      Totals:         0       2       0       0       0       0       0       0
  5236 ;;Total ram usage:        2 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    2
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_RecordMode
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _WriteBuffer
  5248  0E2F                     _WriteBuffer:	
  5249                           
  5250                           ;incstack = 0
  5251                           ; Regs used in _WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  5252                           ;WriteBuffer@data stored from wreg
  5253  0E2F  0020               	movlb	0	; select bank0
  5254  0E30  00A1               	movwf	WriteBuffer@data
  5255                           
  5256                           ;launcher_functions.c: 207: buffer[end] = data;
  5257  0E31  0821               	movf	WriteBuffer@data,w
  5258  0E32  00A0               	movwf	??_WriteBuffer
  5259  0E33  0879               	movf	_end,w
  5260  0E34  3EA0               	addlw	_buffer& (0+255)
  5261  0E35  0086               	movwf	6
  5262  0E36  3001               	movlw	1	; select bank3/4
  5263  0E37  0087               	movwf	7
  5264  0E38  0820               	movf	??_WriteBuffer,w
  5265  0E39  0081               	movwf	1
  5266                           
  5267                           ;launcher_functions.c: 209: if (end == 51)
  5268  0E3A  3033               	movlw	51
  5269  0E3B  0679               	xorwf	_end,w
  5270  0E3C  047A               	iorwf	_end+1,w
  5271  0E3D  1D03               	skipz
  5272  0E3E  2E42               	goto	l2067
  5273                           
  5274                           ;launcher_functions.c: 210: end = 0;
  5275  0E3F  01F9               	clrf	_end
  5276  0E40  01FA               	clrf	_end+1
  5277  0E41  0008               	return
  5278  0E42                     l2067:	
  5279                           
  5280                           ;launcher_functions.c: 211: else
  5281                           ;launcher_functions.c: 212: end++;
  5282  0E42  3001               	movlw	1
  5283  0E43  07F9               	addwf	_end,f
  5284  0E44  3000               	movlw	0
  5285  0E45  3DFA               	addwfc	_end+1,f
  5286  0E46  0008               	return
  5287  0E47                     __end_of_WriteBuffer:	
  5288                           
  5289                           	psect	text21
  5290  0E17                     __ptext21:	
  5291 ;; *************** function _ReadBuffer *****************
  5292 ;; Defined at:
  5293 ;;		line 215 in file "launcher_functions.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  read_data       1    1[BANK0 ] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      unsigned char 
  5300 ;; Registers used:
  5301 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5307 ;;      Params:         0       0       0       0       0       0       0       0
  5308 ;;      Locals:         0       1       0       0       0       0       0       0
  5309 ;;      Temps:          0       1       0       0       0       0       0       0
  5310 ;;      Totals:         0       2       0       0       0       0       0       0
  5311 ;;Total ram usage:        2 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    2
  5314 ;; This function calls:
  5315 ;;		Nothing
  5316 ;; This function is called by:
  5317 ;;		_RecordMode
  5318 ;;		_PreRecordMode
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _ReadBuffer
  5324  0E17                     _ReadBuffer:	
  5325                           
  5326                           ;launcher_functions.c: 217: unsigned char read_data;
  5327                           ;launcher_functions.c: 219: read_data = buffer[start];
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  5331  0E17  087B               	movf	_start,w
  5332  0E18  3EA0               	addlw	_buffer& (0+255)
  5333  0E19  0086               	movwf	6
  5334  0E1A  3001               	movlw	1	; select bank3/4
  5335  0E1B  0087               	movwf	7
  5336  0E1C  0801               	movf	1,w
  5337  0E1D  0020               	movlb	0	; select bank0
  5338  0E1E  00A0               	movwf	??_ReadBuffer
  5339  0E1F  0820               	movf	??_ReadBuffer,w
  5340  0E20  00A1               	movwf	ReadBuffer@read_data
  5341                           
  5342                           ;launcher_functions.c: 220: if (start == 51)
  5343  0E21  3033               	movlw	51
  5344  0E22  067B               	xorwf	_start,w
  5345  0E23  047C               	iorwf	_start+1,w
  5346  0E24  1D03               	skipz
  5347  0E25  2E29               	goto	l2093
  5348                           
  5349                           ;launcher_functions.c: 221: start = 0;
  5350  0E26  01FB               	clrf	_start
  5351  0E27  01FC               	clrf	_start+1
  5352  0E28  2E2D               	goto	l316
  5353  0E29                     l2093:	
  5354                           
  5355                           ;launcher_functions.c: 222: else
  5356                           ;launcher_functions.c: 223: start++;
  5357  0E29  3001               	movlw	1
  5358  0E2A  07FB               	addwf	_start,f
  5359  0E2B  3000               	movlw	0
  5360  0E2C  3DFC               	addwfc	_start+1,f
  5361  0E2D                     l316:	
  5362                           
  5363                           ;launcher_functions.c: 224: return read_data;
  5364  0E2D  0821               	movf	ReadBuffer@read_data,w
  5365  0E2E  0008               	return
  5366  0E2F                     __end_of_ReadBuffer:	
  5367                           
  5368                           	psect	text22
  5369  0D63                     __ptext22:	
  5370 ;; *************** function _InitWatchdog *****************
  5371 ;; Defined at:
  5372 ;;		line 127 in file "launcher_functions.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;		None               void
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5386 ;;      Params:         0       0       0       0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0
  5389 ;;      Totals:         0       0       0       0       0       0       0       0
  5390 ;;Total ram usage:        0 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    2
  5393 ;; This function calls:
  5394 ;;		Nothing
  5395 ;; This function is called by:
  5396 ;;		_main
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           
  5401                           ;psect for function _InitWatchdog
  5402  0D63                     _InitWatchdog:	
  5403                           
  5404                           ;launcher_functions.c: 130: WDTCONbits.WDTPS = 0x0A;
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in _InitWatchdog: [wreg+status,2+status,0]
  5408  0D63  0021               	movlb	1	; select bank1
  5409  0D64  0817               	movf	23,w	;volatile
  5410  0D65  39C1               	andlw	-63
  5411  0D66  3814               	iorlw	20
  5412  0D67  0097               	movwf	23	;volatile
  5413                           
  5414                           ;launcher_functions.c: 131: WDTCONbits.SWDTEN = 0;
  5415  0D68  1017               	bcf	23,0	;volatile
  5416  0D69  0008               	return
  5417  0D6A                     __end_of_InitWatchdog:	
  5418                           
  5419                           	psect	text23
  5420  0D88                     __ptext23:	
  5421 ;; *************** function _InitTimer1 *****************
  5422 ;; Defined at:
  5423 ;;		line 96 in file "launcher_functions.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;		None               void
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5437 ;;      Params:         0       0       0       0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0       0
  5440 ;;      Totals:         0       0       0       0       0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    2
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_main
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function _InitTimer1
  5453  0D88                     _InitTimer1:	
  5454                           
  5455                           ;launcher_functions.c: 98: T1CONbits.TMR1CS = 0;
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _InitTimer1: [wreg+status,2+status,0]
  5459  0D88  303F               	movlw	-193
  5460  0D89  0020               	movlb	0	; select bank0
  5461  0D8A  0598               	andwf	24,f	;volatile
  5462                           
  5463                           ;launcher_functions.c: 99: T1CONbits.T1CKPS = 2;
  5464  0D8B  0818               	movf	24,w	;volatile
  5465  0D8C  39CF               	andlw	-49
  5466  0D8D  3820               	iorlw	32
  5467  0D8E  0098               	movwf	24	;volatile
  5468                           
  5469                           ;launcher_functions.c: 100: T1CONbits.nT1SYNC = 1;
  5470  0D8F  1518               	bsf	24,2	;volatile
  5471                           
  5472                           ;launcher_functions.c: 101: T1GCONbits.TMR1GE = 0;
  5473  0D90  1399               	bcf	25,7	;volatile
  5474                           
  5475                           ;launcher_functions.c: 102: TMR1H = 0xFF;
  5476  0D91  30FF               	movlw	255
  5477  0D92  0097               	movwf	23	;volatile
  5478                           
  5479                           ;launcher_functions.c: 103: TMR1L = 0xCD;
  5480  0D93  30CD               	movlw	205
  5481  0D94  0096               	movwf	22	;volatile
  5482                           
  5483                           ;launcher_functions.c: 104: T1CONbits.TMR1ON = 1;
  5484  0D95  1418               	bsf	24,0	;volatile
  5485  0D96  0008               	return
  5486  0D97                     __end_of_InitTimer1:	
  5487                           
  5488                           	psect	text24
  5489  0DC9                     __ptext24:	
  5490 ;; *************** function _InitSPI *****************
  5491 ;; Defined at:
  5492 ;;		line 108 in file "launcher_functions.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5506 ;;      Params:         0       0       0       0       0       0       0       0
  5507 ;;      Locals:         0       0       0       0       0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0       0       0       0
  5509 ;;      Totals:         0       0       0       0       0       0       0       0
  5510 ;;Total ram usage:        0 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    2
  5513 ;; This function calls:
  5514 ;;		Nothing
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _InitSPI
  5522  0DC9                     _InitSPI:	
  5523                           
  5524                           ;launcher_functions.c: 111: TRISCbits.TRISC2 = 0;
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _InitSPI: [wreg+status,2+status,0]
  5528  0DC9  0021               	movlb	1	; select bank1
  5529  0DCA  110E               	bcf	14,2	;volatile
  5530                           
  5531                           ;launcher_functions.c: 112: TRISCbits.TRISC3 = 0;
  5532  0DCB  118E               	bcf	14,3	;volatile
  5533                           
  5534                           ;launcher_functions.c: 113: TRISCbits.TRISC4 = 1;
  5535  0DCC  160E               	bsf	14,4	;volatile
  5536                           
  5537                           ;launcher_functions.c: 114: TRISCbits.TRISC5 = 0;
  5538  0DCD  128E               	bcf	14,5	;volatile
  5539                           
  5540                           ;launcher_functions.c: 116: LATC2 = (1);
  5541  0DCE  0022               	movlb	2	; select bank2
  5542  0DCF  150E               	bsf	14,2	;volatile
  5543                           
  5544                           ;launcher_functions.c: 119: SSPCON1bits.SSPEN=0x00;
  5545  0DD0  0024               	movlb	4	; select bank4
  5546  0DD1  1295               	bcf	21,5	;volatile
  5547                           
  5548                           ;launcher_functions.c: 120: SSPCON1bits.SSPM=0x01;
  5549  0DD2  0815               	movf	21,w	;volatile
  5550  0DD3  39F0               	andlw	-16
  5551  0DD4  3801               	iorlw	1
  5552  0DD5  0095               	movwf	21	;volatile
  5553                           
  5554                           ;launcher_functions.c: 121: SSPCON1bits.CKP=0;
  5555  0DD6  1215               	bcf	21,4	;volatile
  5556                           
  5557                           ;launcher_functions.c: 122: SSPSTATbits.CKE=1;
  5558  0DD7  1714               	bsf	20,6	;volatile
  5559                           
  5560                           ;launcher_functions.c: 123: SSPSTATbits.SMP=0;
  5561  0DD8  1394               	bcf	20,7	;volatile
  5562                           
  5563                           ;launcher_functions.c: 124: SSPCON1bits.SSPEN=0x01;
  5564  0DD9  1695               	bsf	21,5	;volatile
  5565  0DDA  0008               	return
  5566  0DDB                     __end_of_InitSPI:	
  5567                           
  5568                           	psect	text25
  5569  0EEC                     __ptext25:	
  5570 ;; *************** function _InitGPIO *****************
  5571 ;; Defined at:
  5572 ;;		line 13 in file "launcher_functions.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;		None
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;		None
  5577 ;; Return value:  Size  Location     Type
  5578 ;;		None               void
  5579 ;; Registers used:
  5580 ;;		status,2
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5586 ;;      Params:         0       0       0       0       0       0       0       0
  5587 ;;      Locals:         0       0       0       0       0       0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0
  5589 ;;      Totals:         0       0       0       0       0       0       0       0
  5590 ;;Total ram usage:        0 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    2
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_main
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _InitGPIO
  5602  0EEC                     _InitGPIO:	
  5603                           
  5604                           ;launcher_functions.c: 18: TRISAbits.TRISA1 = 1;
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _InitGPIO: [status,2]
  5608  0EEC  0021               	movlb	1	; select bank1
  5609  0EED  148C               	bsf	12,1	;volatile
  5610                           
  5611                           ;launcher_functions.c: 19: ANSELAbits.ANSA1 = 0;
  5612  0EEE  0023               	movlb	3	; select bank3
  5613  0EEF  108C               	bcf	12,1	;volatile
  5614                           
  5615                           ;launcher_functions.c: 20: IOCAPbits.IOCAP1 = 1;
  5616  0EF0  0027               	movlb	7	; select bank7
  5617  0EF1  1491               	bsf	17,1	;volatile
  5618                           
  5619                           ;launcher_functions.c: 21: IOCANbits.IOCAN1 = 1;
  5620  0EF2  1492               	bsf	18,1	;volatile
  5621                           
  5622                           ;launcher_functions.c: 22: IOCAF = 0x00;
  5623  0EF3  0193               	clrf	19	;volatile
  5624                           
  5625                           ;launcher_functions.c: 23: INTCONbits.IOCIE = 1;
  5626  0EF4  158B               	bsf	11,3	;volatile
  5627                           
  5628                           ;launcher_functions.c: 26: TRISBbits.TRISB3 = 1;
  5629  0EF5  0021               	movlb	1	; select bank1
  5630  0EF6  158D               	bsf	13,3	;volatile
  5631                           
  5632                           ;launcher_functions.c: 27: ANSELBbits.ANSB3 = 0;
  5633  0EF7  0023               	movlb	3	; select bank3
  5634  0EF8  118D               	bcf	13,3	;volatile
  5635                           
  5636                           ;launcher_functions.c: 28: IOCBNbits.IOCBN3 = 1;
  5637  0EF9  0027               	movlb	7	; select bank7
  5638  0EFA  1595               	bsf	21,3	;volatile
  5639                           
  5640                           ;launcher_functions.c: 29: IOCBPbits.IOCBP3 = 1;
  5641  0EFB  1594               	bsf	20,3	;volatile
  5642                           
  5643                           ;launcher_functions.c: 30: IOCBF = 0x00;
  5644  0EFC  0196               	clrf	22	;volatile
  5645                           
  5646                           ;launcher_functions.c: 31: INTCONbits.IOCIE = 1;
  5647  0EFD  158B               	bsf	11,3	;volatile
  5648                           
  5649                           ;launcher_functions.c: 34: TRISAbits.TRISA0 = 1;
  5650  0EFE  0021               	movlb	1	; select bank1
  5651  0EFF  140C               	bsf	12,0	;volatile
  5652                           
  5653                           ;launcher_functions.c: 36: TRISAbits.TRISA2 = 1;
  5654  0F00  150C               	bsf	12,2	;volatile
  5655                           
  5656                           ;launcher_functions.c: 37: TRISAbits.TRISA3 = 1;
  5657  0F01  158C               	bsf	12,3	;volatile
  5658                           
  5659                           ;launcher_functions.c: 38: TRISAbits.TRISA4 = 0;
  5660  0F02  120C               	bcf	12,4	;volatile
  5661                           
  5662                           ;launcher_functions.c: 39: TRISAbits.TRISA5 = 0;
  5663  0F03  128C               	bcf	12,5	;volatile
  5664                           
  5665                           ;launcher_functions.c: 40: TRISAbits.TRISA6 = 0;
  5666  0F04  130C               	bcf	12,6	;volatile
  5667                           
  5668                           ;launcher_functions.c: 41: TRISAbits.TRISA7 = 0;
  5669  0F05  138C               	bcf	12,7	;volatile
  5670                           
  5671                           ;launcher_functions.c: 44: TRISBbits.TRISB0 = 0;
  5672  0F06  100D               	bcf	13,0	;volatile
  5673                           
  5674                           ;launcher_functions.c: 45: TRISBbits.TRISB1 = 1;
  5675  0F07  148D               	bsf	13,1	;volatile
  5676                           
  5677                           ;launcher_functions.c: 46: TRISBbits.TRISB2 = 0;
  5678  0F08  110D               	bcf	13,2	;volatile
  5679                           
  5680                           ;launcher_functions.c: 48: TRISBbits.TRISB4 = 0;
  5681  0F09  120D               	bcf	13,4	;volatile
  5682                           
  5683                           ;launcher_functions.c: 49: TRISBbits.TRISB5 = 0;
  5684  0F0A  128D               	bcf	13,5	;volatile
  5685                           
  5686                           ;launcher_functions.c: 51: PORTBbits.RB0 = 0;
  5687  0F0B  0020               	movlb	0	; select bank0
  5688  0F0C  100D               	bcf	13,0	;volatile
  5689                           
  5690                           ;launcher_functions.c: 52: PORTBbits.RB4 = 0;
  5691  0F0D  120D               	bcf	13,4	;volatile
  5692                           
  5693                           ;launcher_functions.c: 53: PORTBbits.RB5 = 0;
  5694  0F0E  128D               	bcf	13,5	;volatile
  5695                           
  5696                           ;launcher_functions.c: 55: ANSELBbits.ANSB0 = 0;
  5697  0F0F  0023               	movlb	3	; select bank3
  5698  0F10  100D               	bcf	13,0	;volatile
  5699                           
  5700                           ;launcher_functions.c: 56: ANSELBbits.ANSB1 = 0;
  5701  0F11  108D               	bcf	13,1	;volatile
  5702                           
  5703                           ;launcher_functions.c: 57: ANSELBbits.ANSB2 = 0;
  5704  0F12  110D               	bcf	13,2	;volatile
  5705                           
  5706                           ;launcher_functions.c: 59: ANSELBbits.ANSB4 = 0;
  5707  0F13  120D               	bcf	13,4	;volatile
  5708                           
  5709                           ;launcher_functions.c: 60: ANSELBbits.ANSB5 = 0;
  5710  0F14  128D               	bcf	13,5	;volatile
  5711                           
  5712                           ;launcher_functions.c: 63: TRISCbits.TRISC0 = 0;
  5713  0F15  0021               	movlb	1	; select bank1
  5714  0F16  100E               	bcf	14,0	;volatile
  5715                           
  5716                           ;launcher_functions.c: 64: TRISCbits.TRISC1 = 0;
  5717  0F17  108E               	bcf	14,1	;volatile
  5718  0F18  0008               	return
  5719  0F19                     __end_of_InitGPIO:	
  5720                           
  5721                           	psect	text26
  5722  0D6A                     __ptext26:	
  5723 ;; *************** function _InitCLK *****************
  5724 ;; Defined at:
  5725 ;;		line 8 in file "launcher_functions.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;		None               void
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5739 ;;      Params:         0       0       0       0       0       0       0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0       0
  5742 ;;      Totals:         0       0       0       0       0       0       0       0
  5743 ;;Total ram usage:        0 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    2
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_main
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _InitCLK
  5755  0D6A                     _InitCLK:	
  5756                           
  5757                           ;launcher_functions.c: 10: OSCCONbits.IRCF = 0xF;
  5758                           
  5759                           ;incstack = 0
  5760                           ; Regs used in _InitCLK: [wreg+status,2+status,0]
  5761  0D6A  3078               	movlw	120
  5762  0D6B  0021               	movlb	1	; select bank1
  5763  0D6C  0499               	iorwf	25,f	;volatile
  5764                           
  5765                           ;launcher_functions.c: 11: OSCCONbits.SCS = 2;
  5766  0D6D  0819               	movf	25,w	;volatile
  5767  0D6E  39FC               	andlw	-4
  5768  0D6F  3802               	iorlw	2
  5769  0D70  0099               	movwf	25	;volatile
  5770  0D71  0008               	return
  5771  0D72                     __end_of_InitCLK:	
  5772                           
  5773                           	psect	text27
  5774  0E60                     __ptext27:	
  5775 ;; *************** function _InitADC *****************
  5776 ;; Defined at:
  5777 ;;		line 73 in file "launcher_functions.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;		None
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;		None
  5782 ;; Return value:  Size  Location     Type
  5783 ;;		None               void
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5791 ;;      Params:         0       0       0       0       0       0       0       0
  5792 ;;      Locals:         0       0       0       0       0       0       0       0
  5793 ;;      Temps:          0       0       0       0       0       0       0       0
  5794 ;;      Totals:         0       0       0       0       0       0       0       0
  5795 ;;Total ram usage:        0 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    2
  5798 ;; This function calls:
  5799 ;;		Nothing
  5800 ;; This function is called by:
  5801 ;;		_main
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           
  5806                           ;psect for function _InitADC
  5807  0E60                     _InitADC:	
  5808                           
  5809                           ;launcher_functions.c: 76: TRISAbits.TRISA0 = 1;
  5810                           
  5811                           ;incstack = 0
  5812                           ; Regs used in _InitADC: [wreg+status,2+status,0]
  5813  0E60  0021               	movlb	1	; select bank1
  5814  0E61  140C               	bsf	12,0	;volatile
  5815                           
  5816                           ;launcher_functions.c: 77: ANSELAbits.ANSA0 = 1;
  5817  0E62  0023               	movlb	3	; select bank3
  5818  0E63  140C               	bsf	12,0	;volatile
  5819                           
  5820                           ;launcher_functions.c: 80: ADCON1bits.ADCS = 0x05;
  5821  0E64  0021               	movlb	1	; select bank1
  5822  0E65  081E               	movf	30,w	;volatile
  5823  0E66  398F               	andlw	-113
  5824  0E67  3850               	iorlw	80
  5825  0E68  009E               	movwf	30	;volatile
  5826                           
  5827                           ;launcher_functions.c: 81: ADCON1bits.ADPREF = 0x00;
  5828  0E69  30FC               	movlw	-4
  5829  0E6A  059E               	andwf	30,f	;volatile
  5830                           
  5831                           ;launcher_functions.c: 82: ADCON1bits.ADNREF = 0x00;
  5832  0E6B  111E               	bcf	30,2	;volatile
  5833                           
  5834                           ;launcher_functions.c: 83: ADCON0bits.CHS = 0x00;
  5835  0E6C  3083               	movlw	-125
  5836  0E6D  059D               	andwf	29,f	;volatile
  5837                           
  5838                           ;launcher_functions.c: 84: ADCON2bits.CHSN = 0xF;
  5839  0E6E  300F               	movlw	15
  5840  0E6F  049F               	iorwf	31,f	;volatile
  5841                           
  5842                           ;launcher_functions.c: 85: ADCON1bits.ADFM = 0;
  5843  0E70  139E               	bcf	30,7	;volatile
  5844                           
  5845                           ;launcher_functions.c: 86: ADCON0bits.ADRMD = 1;
  5846  0E71  179D               	bsf	29,7	;volatile
  5847                           
  5848                           ;launcher_functions.c: 87: ADCON0bits.ADON = 1;
  5849  0E72  141D               	bsf	29,0	;volatile
  5850                           
  5851                           ;launcher_functions.c: 90: ADIF = 0;
  5852  0E73  0020               	movlb	0	; select bank0
  5853  0E74  1311               	bcf	17,6	;volatile
  5854                           
  5855                           ;launcher_functions.c: 91: ADIE = 1;
  5856  0E75  0021               	movlb	1	; select bank1
  5857  0E76  1711               	bsf	17,6	;volatile
  5858                           
  5859                           ;launcher_functions.c: 92: PEIE = 1;
  5860  0E77  170B               	bsf	11,6	;volatile
  5861  0E78  0008               	return
  5862  0E79                     __end_of_InitADC:	
  5863                           
  5864                           	psect	text28
  5865  0E47                     __ptext28:	
  5866 ;; *************** function _Hibernate *****************
  5867 ;; Defined at:
  5868 ;;		line 501 in file "launcher_functions.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  count           1    1[BANK0 ] unsigned char 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;		None               void
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5882 ;;      Params:         0       0       0       0       0       0       0       0
  5883 ;;      Locals:         0       1       0       0       0       0       0       0
  5884 ;;      Temps:          0       1       0       0       0       0       0       0
  5885 ;;      Totals:         0       2       0       0       0       0       0       0
  5886 ;;Total ram usage:        2 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    2
  5889 ;; This function calls:
  5890 ;;		Nothing
  5891 ;; This function is called by:
  5892 ;;		_main
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _Hibernate
  5898  0E47                     _Hibernate:	
  5899                           
  5900                           ;launcher_functions.c: 503: unsigned char count = 0;
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in _Hibernate: [wreg+status,2+status,0]
  5904  0E47  0020               	movlb	0	; select bank0
  5905  0E48  01A1               	clrf	Hibernate@count
  5906                           
  5907                           ;launcher_functions.c: 504: WDTCONbits.WDTPS = 14;
  5908  0E49  0021               	movlb	1	; select bank1
  5909  0E4A  0817               	movf	23,w	;volatile
  5910  0E4B  39C1               	andlw	-63
  5911  0E4C  381C               	iorlw	28
  5912  0E4D  0097               	movwf	23	;volatile
  5913                           
  5914                           ;launcher_functions.c: 505: WDTCONbits.SWDTEN = 1;
  5915  0E4E  1417               	bsf	23,0	;volatile
  5916                           
  5917                           ;launcher_functions.c: 506: while(!recordFlag && count++ < 3)
  5918  0E4F  2E59               	goto	l2603
  5919  0E50                     l2605:	
  5920  0E50  3001               	movlw	1
  5921  0E51  00A0               	movwf	??_Hibernate
  5922  0E52  0820               	movf	??_Hibernate,w
  5923  0E53  07A1               	addwf	Hibernate@count,f
  5924  0E54  3004               	movlw	4
  5925  0E55  0221               	subwf	Hibernate@count,w
  5926  0E56  1803               	btfsc	3,0
  5927  0E57  2E5D               	goto	l415
  5928  0E58  0063               	sleep	;# 
  5929  0E59                     l2603:	
  5930  0E59  0020               	movlb	0	; select bank0
  5931  0E5A  08EE               	movf	_recordFlag,f
  5932  0E5B  1903               	btfsc	3,2
  5933  0E5C  2E50               	goto	l2605
  5934  0E5D                     l415:	
  5935                           
  5936                           ;launcher_functions.c: 509: }
  5937                           ;launcher_functions.c: 510: WDTCONbits.SWDTEN = 0;
  5938  0E5D  0021               	movlb	1	; select bank1
  5939  0E5E  1017               	bcf	23,0	;volatile
  5940  0E5F  0008               	return
  5941  0E60                     __end_of_Hibernate:	
  5942                           
  5943                           	psect	text29
  5944  0DB7                     __ptext29:	
  5945 ;; *************** function _GoToSleep *****************
  5946 ;; Defined at:
  5947 ;;		line 493 in file "launcher_functions.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  count           1    wreg     unsigned char 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  count           1    1[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;		None               void
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5961 ;;      Params:         0       0       0       0       0       0       0       0
  5962 ;;      Locals:         0       1       0       0       0       0       0       0
  5963 ;;      Temps:          0       1       0       0       0       0       0       0
  5964 ;;      Totals:         0       2       0       0       0       0       0       0
  5965 ;;Total ram usage:        2 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    2
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_main
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           
  5976                           ;psect for function _GoToSleep
  5977  0DB7                     _GoToSleep:	
  5978                           
  5979                           ;incstack = 0
  5980                           ; Regs used in _GoToSleep: [wreg+status,2+status,0]
  5981                           ;GoToSleep@count stored from wreg
  5982  0DB7  0020               	movlb	0	; select bank0
  5983  0DB8  00A1               	movwf	GoToSleep@count
  5984                           
  5985                           ;launcher_functions.c: 495: WDTCONbits.WDTPS = count;
  5986  0DB9  0821               	movf	GoToSleep@count,w
  5987  0DBA  00A0               	movwf	??_GoToSleep
  5988  0DBB  0DA0               	rlf	??_GoToSleep,f
  5989  0DBC  0021               	movlb	1	; select bank1
  5990  0DBD  0817               	movf	23,w	;volatile
  5991  0DBE  0020               	movlb	0	; select bank0
  5992  0DBF  0620               	xorwf	??_GoToSleep,w
  5993  0DC0  39C1               	andlw	-63
  5994  0DC1  0620               	xorwf	??_GoToSleep,w
  5995  0DC2  0021               	movlb	1	; select bank1
  5996  0DC3  0097               	movwf	23	;volatile
  5997                           
  5998                           ;launcher_functions.c: 496: WDTCONbits.SWDTEN = 1;
  5999  0DC4  1417               	bsf	23,0	;volatile
  6000  0DC5  0063               	sleep	;# 
  6001                           
  6002                           ;launcher_functions.c: 498: WDTCONbits.SWDTEN = 0;
  6003  0DC6  0021               	movlb	1	; select bank1
  6004  0DC7  1017               	bcf	23,0	;volatile
  6005  0DC8  0008               	return
  6006  0DC9                     __end_of_GoToSleep:	
  6007                           
  6008                           	psect	intentry
  6009  0004                     __pintentry:	
  6010 ;; *************** function _isr *****************
  6011 ;; Defined at:
  6012 ;;		line 115 in file "launcher_main.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;		None               void
  6019 ;; Registers used:
  6020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6026 ;;      Params:         0       0       0       0       0       0       0       0
  6027 ;;      Locals:         2       0       0       0       0       0       0       0
  6028 ;;      Temps:          5       0       0       0       0       0       0       0
  6029 ;;      Totals:         7       0       0       0       0       0       0       0
  6030 ;;Total ram usage:        7 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    1
  6033 ;; This function calls:
  6034 ;;		i1_WriteBuffer
  6035 ;; This function is called by:
  6036 ;;		Interrupt level 1
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040  0004                     _isr:	
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6044  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6045  0005  3180               	pagesel	$
  6046  0006  0020               	movlb	0	; select bank0
  6047  0007  087F               	movf	127,w
  6048  0008  00F6               	movwf	??_isr+4
  6049                           
  6050                           ;launcher_main.c: 118: if (PIR1bits.RCIF)
  6051  0009  1E91               	btfss	17,5	;volatile
  6052  000A  282C               	goto	i1l2709
  6053                           
  6054                           ;launcher_main.c: 119: {
  6055                           ;launcher_main.c: 121: if(OERR)
  6056  000B  0023               	movlb	3	; select bank3
  6057  000C  1C9D               	btfss	29,1	;volatile
  6058  000D  2810               	goto	i1l2697
  6059                           
  6060                           ;launcher_main.c: 122: {
  6061                           ;launcher_main.c: 123: RCSTAbits.CREN = 0;
  6062  000E  121D               	bcf	29,4	;volatile
  6063                           
  6064                           ;launcher_main.c: 124: RCSTAbits.CREN = 1;
  6065  000F  161D               	bsf	29,4	;volatile
  6066  0010                     i1l2697:	
  6067                           
  6068                           ;launcher_main.c: 125: }
  6069                           ;launcher_main.c: 126: gpsMessage[gpsIndex++] = RCREG;
  6070  0010  0819               	movf	25,w	;volatile
  6071  0011  00F2               	movwf	??_isr
  6072  0012  0021               	movlb	1	; select bank1
  6073  0013  086F               	movf	_gpsIndex^(0+128),w
  6074  0014  3EB1               	addlw	_gpsMessage& (0+255)
  6075  0015  0086               	movwf	6
  6076  0016  0187               	clrf	7
  6077  0017  0872               	movf	??_isr,w
  6078  0018  0081               	movwf	1
  6079  0019  3001               	movlw	1
  6080  001A  00F2               	movwf	??_isr
  6081  001B  0872               	movf	??_isr,w
  6082  001C  07EF               	addwf	_gpsIndex^(0+128),f	;volatile
  6083                           
  6084                           ;launcher_main.c: 127: if(gpsMessage[gpsIndex-1] == 0x0A)
  6085  001D  086F               	movf	_gpsIndex^(0+128),w
  6086  001E  3EFF               	addlw	255
  6087  001F  3EB1               	addlw	_gpsMessage& (0+255)
  6088  0020  0086               	movwf	6
  6089  0021  0187               	clrf	7
  6090  0022  0801               	movf	1,w
  6091  0023  3A0A               	xorlw	10
  6092  0024  1D03               	skipz
  6093  0025  2829               	goto	i1l2705
  6094                           
  6095                           ;launcher_main.c: 128: {
  6096                           ;launcher_main.c: 129: messageDoneFlag = 1;
  6097  0026  01FD               	clrf	_messageDoneFlag
  6098  0027  0AFD               	incf	_messageDoneFlag,f
  6099                           
  6100                           ;launcher_main.c: 130: }
  6101  0028  282A               	goto	i1l2707
  6102  0029                     i1l2705:	
  6103                           
  6104                           ;launcher_main.c: 131: else
  6105                           ;launcher_main.c: 132: {
  6106                           ;launcher_main.c: 133: messageDoneFlag = 0;
  6107  0029  01FD               	clrf	_messageDoneFlag
  6108  002A                     i1l2707:	
  6109                           
  6110                           ;launcher_main.c: 134: }
  6111                           ;launcher_main.c: 135: PIR1bits.RCIF = 0;
  6112  002A  0020               	movlb	0	; select bank0
  6113  002B  1291               	bcf	17,5	;volatile
  6114  002C                     i1l2709:	
  6115                           
  6116                           ;launcher_main.c: 136: }
  6117                           ;launcher_main.c: 139: if (TMR1IF && TMR1IE)
  6118  002C  1C11               	btfss	17,0	;volatile
  6119  002D  283D               	goto	i1l2719
  6120  002E  0021               	movlb	1	; select bank1
  6121  002F  1C11               	btfss	17,0	;volatile
  6122  0030  283D               	goto	i1l2719
  6123                           
  6124                           ;launcher_main.c: 140: {
  6125                           ;launcher_main.c: 141: TMR1H = 0xFF;
  6126  0031  30FF               	movlw	255
  6127  0032  0020               	movlb	0	; select bank0
  6128  0033  0097               	movwf	23	;volatile
  6129                           
  6130                           ;launcher_main.c: 142: TMR1L = 0xCD;
  6131  0034  30CD               	movlw	205
  6132  0035  0096               	movwf	22	;volatile
  6133                           
  6134                           ;launcher_main.c: 143: TMR1IF = 0;
  6135  0036  1011               	bcf	17,0	;volatile
  6136                           
  6137                           ;launcher_main.c: 145: if(recordFlag)
  6138  0037  086E               	movf	_recordFlag,w
  6139  0038  1903               	btfsc	3,2
  6140  0039  283D               	goto	i1l2719
  6141                           
  6142                           ;launcher_main.c: 146: {
  6143                           ;launcher_main.c: 147: ADCON0bits.ADGO = 1;
  6144  003A  0021               	movlb	1	; select bank1
  6145  003B  149D               	bsf	29,1	;volatile
  6146  003C  0020               	movlb	0	; select bank0
  6147  003D                     i1l2719:	
  6148                           
  6149                           ;launcher_main.c: 148: }
  6150                           ;launcher_main.c: 149: }
  6151                           ;launcher_main.c: 152: if(PIR1bits.ADIF & PIE1bits.ADIE)
  6152  003D  0021               	movlb	1	; select bank1
  6153  003E  0E11               	swapf	17,w	;volatile
  6154  003F  0C89               	rrf	9,f
  6155  0040  0C89               	rrf	9,f
  6156  0041  3901               	andlw	1
  6157  0042  00F2               	movwf	??_isr
  6158  0043  0020               	movlb	0	; select bank0
  6159  0044  0E11               	swapf	17,w	;volatile
  6160  0045  0C89               	rrf	9,f
  6161  0046  0C89               	rrf	9,f
  6162  0047  3901               	andlw	1
  6163  0048  0572               	andwf	??_isr,w
  6164  0049  1903               	btfsc	3,2
  6165  004A  287F               	goto	i1l2735
  6166                           
  6167                           ;launcher_main.c: 153: {
  6168                           ;launcher_main.c: 154: if(!((((end))==(51))?((((start))==0)?(1):(0)):((((end)+1)==((star
      +                          t)))?(1):(0))))
  6169  004B  3033               	movlw	51
  6170  004C  0679               	xorwf	_end,w
  6171  004D  047A               	iorwf	_end+1,w
  6172  004E  1903               	skipnz
  6173  004F  2865               	goto	i1l2725
  6174  0050  0879               	movf	_end,w
  6175  0051  3E01               	addlw	1
  6176  0052  00F2               	movwf	??_isr
  6177  0053  3000               	movlw	0
  6178  0054  3D7A               	addwfc	_end+1,w
  6179  0055  00F3               	movwf	??_isr+1
  6180  0056  087C               	movf	_start+1,w
  6181  0057  0673               	xorwf	??_isr+1,w
  6182  0058  1D03               	skipz
  6183  0059  285C               	goto	u239_25
  6184  005A  087B               	movf	_start,w
  6185  005B  0672               	xorwf	??_isr,w
  6186  005C                     u239_25:	
  6187  005C  3000               	movlw	0
  6188  005D  1903               	skipnz
  6189  005E  3001               	movlw	1
  6190  005F  00F4               	movwf	??_isr+2
  6191  0060  01F5               	clrf	??_isr+3
  6192  0061  0874               	movf	??_isr+2,w
  6193  0062  00F7               	movwf	_isr$606
  6194  0063  0875               	movf	??_isr+3,w
  6195  0064  286F               	goto	L4
  6196  0065                     i1l2725:	
  6197  0065  087C               	movf	_start+1,w
  6198  0066  047B               	iorwf	_start,w
  6199  0067  3000               	movlw	0
  6200  0068  1903               	skipnz
  6201  0069  3001               	movlw	1
  6202  006A  00F2               	movwf	??_isr
  6203  006B  01F3               	clrf	??_isr+1
  6204  006C  0872               	movf	??_isr,w
  6205  006D  00F7               	movwf	_isr$606
  6206  006E  0873               	movf	??_isr+1,w
  6207  006F                     L4:	
  6208  006F  00F8               	movwf	_isr$606+1
  6209  0070  0878               	movf	_isr$606+1,w
  6210  0071  0477               	iorwf	_isr$606,w
  6211  0072  1D03               	skipz
  6212  0073  287D               	goto	i1l2733
  6213                           
  6214                           ;launcher_main.c: 155: {
  6215                           ;launcher_main.c: 156: if(recordFlag)
  6216  0074  086E               	movf	_recordFlag,w
  6217  0075  1903               	btfsc	3,2
  6218  0076  287D               	goto	i1l2733
  6219                           
  6220                           ;launcher_main.c: 157: WriteBuffer(ADRESH);
  6221  0077  0021               	movlb	1	; select bank1
  6222  0078  081C               	movf	28,w	;volatile
  6223  0079  318E  2600  3180   	fcall	i1_WriteBuffer
  6224  007C  0020               	movlb	0	; select bank0
  6225  007D                     i1l2733:	
  6226                           
  6227                           ;launcher_main.c: 158: }
  6228                           ;launcher_main.c: 159: PIR1bits.ADIF = 0;
  6229  007D  0020               	movlb	0	; select bank0
  6230  007E  1311               	bcf	17,6	;volatile
  6231  007F                     i1l2735:	
  6232                           
  6233                           ;launcher_main.c: 160: }
  6234                           ;launcher_main.c: 163: if(INTCONbits.IOCIE && IOCBFbits.IOCBF3)
  6235  007F  1D8B               	btfss	11,3	;volatile
  6236  0080  28A8               	goto	i1l2749
  6237  0081  0027               	movlb	7	; select bank7
  6238  0082  1D96               	btfss	22,3	;volatile
  6239  0083  28A8               	goto	i1l2749
  6240                           
  6241                           ;launcher_main.c: 164: {
  6242                           ;launcher_main.c: 165: IOCBFbits.IOCBF3 = 0;
  6243  0084  1196               	bcf	22,3	;volatile
  6244                           
  6245                           ;launcher_main.c: 166: if(IOCBPbits.IOCBP3 & PORTBbits.RB3)
  6246  0085  0020               	movlb	0	; select bank0
  6247  0086  0C0D               	rrf	13,w	;volatile
  6248  0087  00F2               	movwf	??_isr
  6249  0088  0CF2               	rrf	??_isr,f
  6250  0089  0C72               	rrf	??_isr,w
  6251  008A  3901               	andlw	1
  6252  008B  00F3               	movwf	??_isr+1
  6253  008C  0027               	movlb	7	; select bank7
  6254  008D  0C14               	rrf	20,w	;volatile
  6255  008E  00F4               	movwf	??_isr+2
  6256  008F  0CF4               	rrf	??_isr+2,f
  6257  0090  0C74               	rrf	??_isr+2,w
  6258  0091  3901               	andlw	1
  6259  0092  0573               	andwf	??_isr+1,w
  6260  0093  1903               	btfsc	3,2
  6261  0094  2898               	goto	i1l2745
  6262                           
  6263                           ;launcher_main.c: 167: {
  6264                           ;launcher_main.c: 168: recordFlag = 1;
  6265  0095  0020               	movlb	0	; select bank0
  6266  0096  01EE               	clrf	_recordFlag
  6267  0097  0AEE               	incf	_recordFlag,f
  6268  0098                     i1l2745:	
  6269                           
  6270                           ;launcher_main.c: 169: }
  6271                           ;launcher_main.c: 170: if(IOCBNbits.IOCBN3 & !PORTBbits.RB3)
  6272  0098  0027               	movlb	7	; select bank7
  6273  0099  0C15               	rrf	21,w	;volatile
  6274  009A  00F2               	movwf	??_isr
  6275  009B  0CF2               	rrf	??_isr,f
  6276  009C  0C72               	rrf	??_isr,w
  6277  009D  3901               	andlw	1
  6278  009E  00F3               	movwf	??_isr+1
  6279  009F  1003               	clrc
  6280  00A0  0020               	movlb	0	; select bank0
  6281  00A1  1D8D               	btfss	13,3	;volatile
  6282  00A2  1403               	setc
  6283  00A3  3000               	movlw	0
  6284  00A4  3D09               	addwfc	9,w
  6285  00A5  0573               	andwf	??_isr+1,w
  6286  00A6  1D03               	btfss	3,2
  6287                           
  6288                           ;launcher_main.c: 171: {
  6289                           ;launcher_main.c: 172: recordFlag = 0;
  6290  00A7  01EE               	clrf	_recordFlag
  6291  00A8                     i1l2749:	
  6292                           
  6293                           ;launcher_main.c: 173: }
  6294                           ;launcher_main.c: 174: }
  6295                           ;launcher_main.c: 177: if(INTCONbits.IOCIE && IOCAFbits.IOCAF1)
  6296  00A8  1D8B               	btfss	11,3	;volatile
  6297  00A9  28CA               	goto	i1l147
  6298  00AA  0027               	movlb	7	; select bank7
  6299  00AB  1C93               	btfss	19,1	;volatile
  6300  00AC  28CA               	goto	i1l147
  6301                           
  6302                           ;launcher_main.c: 178: {
  6303                           ;launcher_main.c: 179: IOCAFbits.IOCAF1 = 0;
  6304  00AD  1093               	bcf	19,1	;volatile
  6305                           
  6306                           ;launcher_main.c: 180: if(IOCAPbits.IOCAP1 & PORTAbits.RA1)
  6307  00AE  0020               	movlb	0	; select bank0
  6308  00AF  0C0C               	rrf	12,w	;volatile
  6309  00B0  3901               	andlw	1
  6310  00B1  00F2               	movwf	??_isr
  6311  00B2  0027               	movlb	7	; select bank7
  6312  00B3  0C11               	rrf	17,w	;volatile
  6313  00B4  3901               	andlw	1
  6314  00B5  0572               	andwf	??_isr,w
  6315  00B6  1903               	btfsc	3,2
  6316  00B7  28BB               	goto	i1l2759
  6317                           
  6318                           ;launcher_main.c: 181: {
  6319                           ;launcher_main.c: 182: strobeFlag = 1;
  6320  00B8  0021               	movlb	1	; select bank1
  6321  00B9  01B0               	clrf	_strobeFlag^(0+128)
  6322  00BA  0AB0               	incf	_strobeFlag^(0+128),f
  6323  00BB                     i1l2759:	
  6324                           
  6325                           ;launcher_main.c: 183: }
  6326                           ;launcher_main.c: 184: if(IOCANbits.IOCAN1 & !PORTAbits.RA1)
  6327  00BB  0027               	movlb	7	; select bank7
  6328  00BC  0C12               	rrf	18,w	;volatile
  6329  00BD  3901               	andlw	1
  6330  00BE  00F2               	movwf	??_isr
  6331  00BF  1003               	clrc
  6332  00C0  0020               	movlb	0	; select bank0
  6333  00C1  1C8C               	btfss	12,1	;volatile
  6334  00C2  1403               	setc
  6335  00C3  3000               	movlw	0
  6336  00C4  3D09               	addwfc	9,w
  6337  00C5  0572               	andwf	??_isr,w
  6338  00C6  1903               	btfsc	3,2
  6339  00C7  28CA               	goto	i1l147
  6340                           
  6341                           ;launcher_main.c: 185: {
  6342                           ;launcher_main.c: 186: strobeFlag = 0;
  6343  00C8  0021               	movlb	1	; select bank1
  6344  00C9  01B0               	clrf	_strobeFlag^(0+128)
  6345  00CA                     i1l147:	
  6346  00CA  0876               	movf	??_isr+4,w
  6347  00CB  0020               	movlb	0	; select bank0
  6348  00CC  00FF               	movwf	127
  6349  00CD  107E               	bcf	126,0	;clear compiler interrupt flag
  6350  00CE  0009               	retfie
  6351  00CF                     __end_of_isr:	
  6352                           
  6353                           	psect	text31
  6354  0E00                     __ptext31:	
  6355 ;; *************** function i1_WriteBuffer *****************
  6356 ;; Defined at:
  6357 ;;		line 205 in file "launcher_functions.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  data            1    wreg     unsigned char 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  data            1    1[COMMON] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;		None               void
  6364 ;; Registers used:
  6365 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6371 ;;      Params:         0       0       0       0       0       0       0       0
  6372 ;;      Locals:         1       0       0       0       0       0       0       0
  6373 ;;      Temps:          1       0       0       0       0       0       0       0
  6374 ;;      Totals:         2       0       0       0       0       0       0       0
  6375 ;;Total ram usage:        2 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_isr
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function i1_WriteBuffer
  6386  0E00                     i1_WriteBuffer:	
  6387                           
  6388                           ;incstack = 0
  6389                           ; Regs used in i1_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  6390                           ;i1WriteBuffer@data stored from wreg
  6391  0E00  00F1               	movwf	i1WriteBuffer@data
  6392                           
  6393                           ;launcher_functions.c: 207: buffer[end] = data;
  6394  0E01  0871               	movf	i1WriteBuffer@data,w
  6395  0E02  00F0               	movwf	??i1_WriteBuffer
  6396  0E03  0879               	movf	_end,w
  6397  0E04  3EA0               	addlw	_buffer& (0+255)
  6398  0E05  0086               	movwf	6
  6399  0E06  3001               	movlw	1	; select bank3/4
  6400  0E07  0087               	movwf	7
  6401  0E08  0870               	movf	??i1_WriteBuffer,w
  6402  0E09  0081               	movwf	1
  6403                           
  6404                           ;launcher_functions.c: 209: if (end == 51)
  6405  0E0A  3033               	movlw	51
  6406  0E0B  0679               	xorwf	_end,w
  6407  0E0C  047A               	iorwf	_end+1,w
  6408  0E0D  1D03               	skipz
  6409  0E0E  2E12               	goto	i1l2613
  6410                           
  6411                           ;launcher_functions.c: 210: end = 0;
  6412  0E0F  01F9               	clrf	_end
  6413  0E10  01FA               	clrf	_end+1
  6414  0E11  0008               	return
  6415  0E12                     i1l2613:	
  6416                           
  6417                           ;launcher_functions.c: 211: else
  6418                           ;launcher_functions.c: 212: end++;
  6419  0E12  3001               	movlw	1
  6420  0E13  07F9               	addwf	_end,f
  6421  0E14  3000               	movlw	0
  6422  0E15  3DFA               	addwfc	_end+1,f
  6423  0E16  0008               	return
  6424  0E17                     __end_ofi1_WriteBuffer:	
  6425  007E                     btemp	set	126	;btemp
  6426  007E                     pic14e$flags	set	126
  6427  007E                     wtemp	set	126
  6428  007E                     wtemp0	set	126
  6429  0080                     wtemp1	set	128
  6430  0082                     wtemp2	set	130
  6431  0084                     wtemp3	set	132
  6432  0086                     wtemp4	set	134
  6433  0088                     wtemp5	set	136
  6434  007F                     wtemp6	set	127
  6435  007E                     ttemp	set	126
  6436  007E                     ttemp0	set	126
  6437  0081                     ttemp1	set	129
  6438  0084                     ttemp2	set	132
  6439  0087                     ttemp3	set	135
  6440  007F                     ttemp4	set	127
  6441  007E                     ltemp	set	126
  6442  007E                     ltemp0	set	126
  6443  0082                     ltemp1	set	130
  6444  0086                     ltemp2	set	134
  6445  0080                     ltemp3	set	128


Data Sizes:
    Strings     44
    Constant    10
    Data        55
    BSS         192
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     78      80
    BANK1            80      0      80
    BANK2            80      0      42
    BANK3            80      0      51
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[18]), STR_1(CODE[19]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), SetupGPS@MID(BANK0[4]), SetupGPS@startSequence(BANK0[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 22
		 -> SetupGPS@message(BANK0[22]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1433$_cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), SetupGPS@MID(BANK0[4]), SetupGPS@startSequence(BANK0[6]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), SetupGPS@MID(BANK0[4]), SetupGPS@startSequence(BANK0[6]), 

    uart_write_message@data	PTR unsigned char  size(1) Largest target is 22
		 -> UpdateGPS@GPSupdateMessage(BANK0[22]), SetupGPS@message(BANK0[22]), DisableGPS@init_117(COMMON[13]), 

    compute_checksum@data	PTR unsigned char  size(1) Largest target is 22
		 -> UpdateGPS@GPSupdateMessage(BANK0[22]), SetupGPS@message(BANK0[22]), DisableGPS@init_117(COMMON[13]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_WriteBuffer

Critical Paths under _main in BANK0

    _main->_SetupGPS
    _UpdateGPS->_DecodeGPS
    _DecodeGPS->___awdiv
    ___awdiv->___wmul
    _SetupGPS->_sprintf
    _uart_write_message->_compute_checksum
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _RecordMode->_WriteOverheadSPI
    _WriteOverheadSPI->_ReadStatusSPI
    _ReadStatusSPI->_WriteSPI

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     4      4    7698
                                             70 BANK0      8     4      4
                          _GoToSleep
                          _Hibernate
                            _InitADC
                            _InitCLK
                           _InitGPIO
                            _InitSPI
                         _InitTimer1
                       _InitWatchdog
                         _RecordMode
                           _SetupGPS
                     _ToggleSleepGPS
                          _UpdateGPS
                           _initUART
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UpdateGPS                                           23    23      0    3917
                                             36 BANK0     23    23      0
                          _DecodeGPS
                     _ToggleSleepGPS
                 _uart_write_message
 ---------------------------------------------------------------------------------
 (2) _ToggleSleepGPS                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DecodeGPS                                           21    21      0    2784
                                             15 BANK0     21    21      0
                            ___awdiv
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     540
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     556
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetupGPS                                            37    37      0    2727
                                             33 BANK0     37    37      0
                            _sprintf
                 _uart_write_message
 ---------------------------------------------------------------------------------
 (2) _uart_write_message                                  15    13      2    1105
                                              8 BANK0     15    13      2
                   _compute_checksum
                          _uart_xmit
 ---------------------------------------------------------------------------------
 (3) _uart_xmit                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _compute_checksum                                     8     6      2     340
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    13      6    1357
                                             14 BANK0     19    13      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _RecordMode                                          13    13      0     962
                                             21 BANK0     13    13      0
                         _ReadBuffer
                        _WriteBuffer
                   _WriteOverheadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _WriteOverheadSPI                                    14    10      4     577
                                              7 BANK0     14    10      4
                      _ReadStatusSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadStatusSPI                                        2     2      0      69
                                              5 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _WriteSPI                                             5     5      0      23
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _WriteBuffer                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadBuffer                                           2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitWatchdog                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTimer1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSPI                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitGPIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitCLK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Hibernate                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GoToSleep                                            2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  7     7      0      46
                                              2 COMMON     7     7      0
                      i1_WriteBuffer
 ---------------------------------------------------------------------------------
 (6) i1_WriteBuffer                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GoToSleep
   _Hibernate
   _InitADC
   _InitCLK
   _InitGPIO
   _InitSPI
   _InitTimer1
   _InitWatchdog
   _RecordMode
     _ReadBuffer
     _WriteBuffer
     _WriteOverheadSPI
       _ReadStatusSPI
         _ReadSPI
         _WriteSPI
       _WriteSPI
     _WriteSPI
   _SetupGPS
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _uart_write_message
       _compute_checksum
       _uart_xmit
   _ToggleSleepGPS
   _UpdateGPS
     _DecodeGPS
       ___awdiv
         ___wmul (ARG)
       ___bmul
       ___wmul
     _ToggleSleepGPS
     _uart_write_message
       _compute_checksum
       _uart_xmit
   _initUART

 _isr (ROOT)
   i1_WriteBuffer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     14F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      2A      10       52.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      33      12       63.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      44      14       85.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     14F      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 29 18:10:25 2014

                  ___bmul@product 0022                 DecodeGPS@latitude 003C                       _SSPSTATbits 0214  
                    ___awdiv@sign 002C               ___wmul@multiplicand 0022              __size_of_WriteBuffer 0018  
                     __CFG_LVP$ON 0000                               l113 05DE                               l400 030F  
                             l305 0790                               l316 0E2D                               l415 0E5D  
                             l431 0426                               l335 0D74                               l352 074C  
                             l294 0D7E                               l288 0DFC                               l568 0E82  
                             _GIE 005F                               _end 0079                               _isr 0004  
              DecodeGPS@messageID 0032                               wreg 0009                DecodeGPS@longitude 003F  
                 DisableGPS@F4916 0136                              l2001 0FF9                              l2023 0F9C  
                            l2015 0F7E                              l2017 0F8A                              l2041 0F59  
                            l2027 0FA5                              l2115 070D                              l2107 06FF  
                            l2045 0F65                              l2125 0717                              l2221 0160  
                            l2039 0F4D                              l2127 073A                              l2215 0142  
                            l2073 077D                              l2049 0F6E                              l2153 04D4  
                            l2137 04BF                              l2305 02EC                              l2067 0E42  
                            l2139 04C1                              l2323 0321                              l2315 0311  
                            l2307 02F2                              l2219 0151                              l2093 0E29  
                            l2501 037F                              l2181 0545                              l2173 0526  
                            l2157 04F0                              l2261 021C                              l2253 0202  
                            l2159 050A                              l2521 03C4                              l2169 0520  
                            l2329 0349                              l2603 0E59                              l2515 03AB  
                            l2507 0398                              l2195 0558                              l2187 0554  
                            l2605 0E50                              l2197 049D                              l2199 0598  
                            l2537 03EB                              l2529 03D0                              l2545 0406  
                            l1921 07EA                              l2297 02D2                              l1923 07B5  
                            l2467 0674                              l2549 0412                              l1925 07EF  
                            l2477 06B2                              l2581 0EDA                              l2645 05CA  
                            l2559 0460                              l1951 0DE4                              l1935 0E7C  
                            l2663 05EB                              l2639 05C3                              l2585 0EE5  
                            l2673 0611                              l1947 0DDE                              l2685 063B  
                            l1975 0FC2                              l2679 062E                              l1993 0FE8  
                            l1985 0FCA                              l1969 0FB7                              l2689 0644  
                            l1987 0FD6                              l1997 0FF1                              _ADIE 048E  
                            _ADIF 008E                              ?_isr 0070            __size_of_ReadStatusSPI 0011  
                            STR_1 080A                              STR_2 081D                              STR_3 082F  
                            u2020 0653                              u2005 031F                              u2015 0347  
                            u2105 03F1                              u2035 0672                              u2133 0424  
                            u2125 0410                              u2045 06B0                              u1405 0E83  
                            u2143 0454                              u2055 037D                              u1415 0E88  
                            u2065 0396                              u1505 0FD7                              u2170 0ECC  
                            u2155 046B                              u2075 03A9                              u1515 0FE1  
                            u2165 0480                              u2085 03C2                              u1605 0F9D  
                            u1525 0FE9                              u2095 03D9                              u1375 07BF  
                            u1705 076F                              u1635 0F50                              u1565 0F81  
                            u1485 0FCD                              u1655 0F5F                              u1585 0F8B  
                            u1665 0F66                              u1745 06ED                              u1905 0140  
                            u1595 0F95                              u1845 053B                              u1925 015E  
                            u2637 05D6                              u1695 075B                              u1775 0727  
                            u2647 0F21                              u2657 0F30                              u1890 0119  
                            u2667 0F3E                              _PEIE 005E                              u2677 067B  
                            u2687 06B9                              u2697 0430                              _RCIE 048D  
                            _OERR 0CE9                 i1WriteBuffer@data 0071                              _main 059D  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              indf1 0001                              fsr1l 0006  
                            btemp 007E                              ltemp 007E                              start 00CF  
                            ttemp 007E                              wtemp 007E                 ___bmul@multiplier 0023  
                   __CFG_MCLRE$ON 0000                 ?_compute_checksum 0020                   __end_of_InitADC 0E79  
                 __end_of_InitCLK 0D72                   __end_of_InitSPI 0DDB                   __end_of_ReadSPI 0D88  
              ??_compute_checksum 0022                             ??_isr 0072                     ?_InitWatchdog 0070  
                   i1_WriteBuffer 0E00             ReadStatusSPI@dataRead 0026                             ?_main 0066  
                 __end_of___awdiv 1000                   ___awdiv@divisor 0026                             _LATC2 0872  
                           _IOCAF 0393                             _IOCBF 0396                   __end_of___lwdiv 0FAC  
                           i1l147 00CA                   __end_of___lwmod 0F75                   ___awdiv@counter 002B  
                           _RCREG 0199                             _TMR1H 0017                             _TMR1L 0016  
                           _TXREG 019A                 RecordMode@address 003E                   __end_of_dpowers 080A  
             DecodeGPS@northSouth 0039                             _start 007B                    __CFG_BOREN$OFF 0000  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                   __end_of_sprintf 059D  
          uart_write_message@data 0034            uart_write_message@size 0028                        _ReadBuffer 0E17  
                 __initialization 00D1                        _InitTimer1 0D88                 ?_WriteOverheadSPI 0027  
                    __end_of_main 0648                __size_of_DecodeGPS 0248                  __end_of_InitGPIO 0F19  
                  ??_InitWatchdog 0020                     _ReadStatusSPI 0DA6                    ?i1_WriteBuffer 0070  
              ??_WriteOverheadSPI 002B  uart_write_message@ascii_checksum 0035                            ??_main 006A  
              __size_of_GoToSleep 0012                   ReadSPI@dataByte 0021                    __CFG_PLLEN$OFF 0000  
                __end_of_SetupGPS 06DA     WriteOverheadSPI@address_bytes 0031                __size_of_Hibernate 0019  
                      _RecordMode 0356                            _ADRESH 009C                  ___awdiv@dividend 0028  
                __end_of_WriteSPI 0E00                            i1l2613 0E12                            i1l2705 0029  
                          i1l2707 002A                            i1l2733 007D                            i1l2725 0065  
                          i1l2709 002C                            i1l2735 007F                            i1l2719 003D  
                          i1l2745 0098                            i1l2749 00A8                            i1l2759 00BB  
                          i1l2697 0010                            u239_25 005C                            _TMR1IE 0488  
                          _TMR1IF 0088                            _SPBRGH 019C                            _TMR1ON 00C0  
                          _SPBRGL 019B                            _SSPBUF 0211                         ??_InitADC 0020  
                       ??_InitCLK 0020                         ??_InitSPI 0020                         ??_ReadSPI 0020  
                          ___bmul 0DDB                    ?_ReadStatusSPI 0070                            ___wmul 0E79  
                       ??___awdiv 002A                  __end_of_initUART 0DA6                         ??___lwdiv 0024  
                       ??___lwmod 002C                            _buffer 01A0                  ___awdiv@quotient 002D  
     __size_of_uart_write_message 0076                __size_of_UpdateGPS 002B                       RecordMode@x 003C  
             main@periodicCounter 006D                 __end_of_DecodeGPS 0356                         ??_sprintf 0034  
                  _gpsInvalidFlag 006F           __end_of__initialization 010A                 __end_of_GoToSleep 0DC9  
             ___bmul@multiplicand 0020                       ?_ReadBuffer 0070                 __end_of_Hibernate 0E60  
                     ?_InitTimer1 0070                    __pcstackCOMMON 0070                   ??i1_WriteBuffer 0070  
                    __pidataBANK0 07FE                      __pidataBANK1 07F2                      __pidataBANK2 0E97  
                    WriteSPI@temp 0022                       ?_RecordMode 0070              __end_of_InitWatchdog 0D6A  
                      __pbssBANK0 006E                        __pbssBANK1 00A0                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                         ?_InitGPIO 0070                   SetupGPS@message 0044  
                 ??_ReadStatusSPI 0025                 __end_of_UpdateGPS 0EEC                        __pmaintext 059D  
                       ?_SetupGPS 0070                           ?___bmul 0020                           ?___wmul 0020  
                   ??_WriteBuffer 0020                        __pintentry 0004                    _validLongitude 00AD  
       UpdateGPS@GPSupdateMessage 0045                         ?_WriteSPI 0070                __size_of_uart_xmit 000A  
       __size_of_compute_checksum 0042               __size_of_ReadBuffer 0018               __size_of_InitTimer1 000F  
                      ??_InitGPIO 0020                         ?_initUART 0070                           _InitADC 0E60  
                         _InitCLK 0D6A                           _InitSPI 0DC9                        _gpsMessage 00B1  
         __size_of_ToggleSleepGPS 002D                           _ReadSPI 0D7C                       SetupGPS@MID 0060  
                      ??_SetupGPS 0041               __size_of_RecordMode 0141                   __size_of___bmul 0012  
                         ___awdiv 0FAC                   __size_of___wmul 001E                           ___lwdiv 0F75  
                         ___lwmod 0F46                           _isr$606 0077                        ??_WriteSPI 0020  
                         __ptext1 0D97                           __ptext2 0EC1                           __ptext3 0F19  
                         __ptext4 010E                           __ptext5 0E79                           __ptext6 0DDB  
                         __ptext7 0FAC                           __ptext8 0648                           __ptext9 06DA  
                       _T1CONbits 0018                           _dpowers 0800               __end_of_WriteBuffer 0E47  
                    __size_of_isr 00CB                         _IOCAFbits 0393                         _IOCBFbits 0396  
                       _IOCANbits 0392         __size_of_WriteOverheadSPI 0060                         _IOCBNbits 0395  
                       _IOCAPbits 0391                         _IOCBPbits 0394                        _recordFlag 006E  
                         _sprintf 0497                           clrloop0 0D5E              end_of_initialization 010A  
                      ??_initUART 0020                           init_ram 0D57                           initloop 0D58  
                 WriteBuffer@data 0021                 __end_of_uart_xmit 0D7C                         _RCSTAbits 019D  
                WriteSPI@databyte 0024                      __pstringtext 0800                         _PORTAbits 000C  
                       _PORTBbits 000D                         _PORTCbits 000E                    Hibernate@count 0021  
                __CFG_FOSC$INTOSC 0000             __size_of_InitWatchdog 0007                         _TRISAbits 008C  
                       _TRISBbits 008D                         _TRISCbits 008E           WriteOverheadSPI@address 0027  
                 DecodeGPS@status 003B              uart_xmit@mydata_byte 0020             _preRecordingAddresses 0220  
                       _DecodeGPS 010E                         _TXSTAbits 019E                      ??_ReadBuffer 0020  
                      _strobeFlag 00B0                      ??_InitTimer1 0020                         _GoToSleep 0DB7  
                  __end_of___bmul 0DED                       _WriteBuffer 0E2F                    __end_of___wmul 0E97  
      __end_of_uart_write_message 0750                         _Hibernate 0E47                      _InitWatchdog 0D63  
                   SetupGPS@F4921 00E9                     SetupGPS@F4919 00E3               start_initialization 00D1  
                _compute_checksum 07B0         WriteOverheadSPI@StatusReg 0034                      ??_RecordMode 0035  
                     __end_of_isr 00CF                __end_of_ReadBuffer 0E2F                 compute_checksum@x 0026  
              __end_of_InitTimer1 0D97                        ?_DecodeGPS 0070                    _ToggleSleepGPS 0F19  
               __size_of_InitGPIO 002D                         SetupGPS@x 0064              compute_checksum@data 0025  
                      ?_GoToSleep 0070                          ??___bmul 0021              compute_checksum@size 0020  
                        ??___wmul 0024                __end_of_RecordMode 0497             __end_ofi1_WriteBuffer 0E17  
                     __pdataBANK0 006F                       __pdataBANK1 00E3                       __pdataBANK2 0120  
               __size_of_SetupGPS 0092                         _UpdateGPS 0EC1                        ?_Hibernate 0070  
        compute_checksum@checksum 0024                 __size_of_WriteSPI 0013                       __pbssCOMMON 0079  
                       ___latbits 0001                     __pcstackBANK0 0020                  _WriteOverheadSPI 0750  
             __end_of__stringdata 0836               uart_write_message@x 0031                     _validEastWest 00ED  
          __end_of_ToggleSleepGPS 0F46                   _messageDoneFlag 007D                       sprintf@_val 003C  
                     sprintf@flag 0038                       sprintf@prec 0039                          ?_InitADC 0070  
                        ?_InitCLK 0070                          ?_InitSPI 0070                 __size_of_initUART 000F  
                        ?_ReadSPI 0070                         __pnvBANK1 00EF                     _validLatitude 00AA  
                ___lwdiv@dividend 0022             __end_of_ReadStatusSPI 0DB7                          ?___awdiv 0026  
                        ?___lwdiv 0020                          ?___lwmod 0028                        ?_UpdateGPS 0070  
                  UpdateGPS@F4926 0120                  __CFG_WDTE$SWDTEN 0000                  ___lwdiv@quotient 0025  
                        ?_sprintf 002E        uart_write_message@checksum 0033                   ?_ToggleSleepGPS 0070  
                 _validNorthSouth 00EE                       ??_DecodeGPS 002F                    ___wmul@product 0024  
                        _LATBbits 010D                         clear_ram0 0D5D                          _PIE1bits 0091  
                  DecodeGPS@F4930 00A4                    DecodeGPS@F4932 00A7                    DecodeGPS@F4928 0143  
                        _PIR1bits 0011                       ??_GoToSleep 0020                         _uart_xmit 0D72  
                     ??_Hibernate 0020                        _ADCON0bits 009D                        _ADCON1bits 009E  
                     __stringdata 080A                        _ADCON2bits 009F                 ___wmul@multiplier 0020  
                 RecordMode@count 003A                          _InitGPIO 0EEC                  __size_of_InitADC 0019  
                __size_of_InitCLK 0008                  __size_of_InitSPI 0012                  __size_of_ReadSPI 000C  
        __end_of_compute_checksum 07F2             SetupGPS@startSequence 005A                          _SetupGPS 0648  
                      ?_uart_xmit 0070                      ?_WriteBuffer 0070                  __size_of___awdiv 0054  
                     ??_UpdateGPS 0044                  __size_of___lwdiv 0037                  __size_of___lwmod 002F  
                        _WriteSPI 0DED           _uart_write_message$1371 002D           _uart_write_message$1372 002F  
                      _ANSELAbits 018C                        _ANSELBbits 018D               ReadBuffer@read_data 0021  
                 ___lwdiv@divisor 0020                   ___lwdiv@counter 0027                          __ptext10 0D72  
                        __ptext11 07B0                          __ptext20 0E2F                          __ptext12 0497  
                        __ptext21 0E17                          __ptext13 0F46                        _T1GCONbits 0019  
                        __ptext22 0D63                          __ptext14 0F75                          __ptext31 0E00  
                        __ptext23 0D88                          __ptext15 0356                          __ptext24 0DC9  
                        __ptext16 0750                          __ptext25 0EEC                          __ptext17 0DA6  
                        __ptext26 0D6A                          __ptext18 0DED                          __ptext27 0E60  
                        __ptext19 0D7C                          __ptext28 0E47                          __ptext29 0DB7  
              _uart_write_message 06DA                  __size_of_sprintf 0106                          _gpsIndex 00EF  
                        _initUART 0D97                     __size_of_main 00AB               ?_uart_write_message 0028  
                      DecodeGPS@x 0042          __end_of_WriteOverheadSPI 07B0                    GoToSleep@count 0021  
                        main@argc 0066                          main@argv 0068              ??_uart_write_message 002A  
                      _INTCONbits 000B                       pic14e$flags 007E                          intlevel1 0000  
                       sprintf@ap 003A                         sprintf@sp 003B                  ___lwmod@dividend 002A  
               __CFG_CLKOUTEN$OFF 0000                        _OSCCONbits 0099                       ??_uart_xmit 0020  
                        sprintf@c 0040                          sprintf@f 002E                   ___lwmod@divisor 0028  
                 ___lwmod@counter 002D                  ??_ToggleSleepGPS 0020                       _SSPCON1bits 0215  
                      _WDTCONbits 0097                   _recordEndAdress 00A0            __size_ofi1_WriteBuffer 0017  
               DecodeGPS@eastWest 003A  
