

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 29 17:17:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16LF1783
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  008C                     	;# 
    80  008D                     	;# 
    81  008E                     	;# 
    82  0090                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0094                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  0111                     	;# 
   102  0112                     	;# 
   103  0113                     	;# 
   104  0114                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  011D                     	;# 
   111  011D                     	;# 
   112  011E                     	;# 
   113  011F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0197                     	;# 
   126  0199                     	;# 
   127  0199                     	;# 
   128  0199                     	;# 
   129  019A                     	;# 
   130  019A                     	;# 
   131  019A                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019C                     	;# 
   140  019D                     	;# 
   141  019D                     	;# 
   142  019D                     	;# 
   143  019E                     	;# 
   144  019E                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  019F                     	;# 
   148  019F                     	;# 
   149  019F                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020D                     	;# 
   153  020E                     	;# 
   154  0210                     	;# 
   155  0211                     	;# 
   156  0211                     	;# 
   157  0212                     	;# 
   158  0212                     	;# 
   159  0213                     	;# 
   160  0213                     	;# 
   161  0214                     	;# 
   162  0214                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0217                     	;# 
   170  028C                     	;# 
   171  028D                     	;# 
   172  028E                     	;# 
   173  0291                     	;# 
   174  0291                     	;# 
   175  0292                     	;# 
   176  0293                     	;# 
   177  0298                     	;# 
   178  0298                     	;# 
   179  0299                     	;# 
   180  029A                     	;# 
   181  030C                     	;# 
   182  030D                     	;# 
   183  030E                     	;# 
   184  038C                     	;# 
   185  038D                     	;# 
   186  038E                     	;# 
   187  0390                     	;# 
   188  0391                     	;# 
   189  0392                     	;# 
   190  0393                     	;# 
   191  0394                     	;# 
   192  0395                     	;# 
   193  0396                     	;# 
   194  0397                     	;# 
   195  0398                     	;# 
   196  0399                     	;# 
   197  039D                     	;# 
   198  039E                     	;# 
   199  039F                     	;# 
   200  0511                     	;# 
   201  0513                     	;# 
   202  051A                     	;# 
   203  0811                     	;# 
   204  0812                     	;# 
   205  0813                     	;# 
   206  0814                     	;# 
   207  0815                     	;# 
   208  0816                     	;# 
   209  0817                     	;# 
   210  0818                     	;# 
   211  0819                     	;# 
   212  081A                     	;# 
   213  081B                     	;# 
   214  081C                     	;# 
   215  081D                     	;# 
   216  081E                     	;# 
   217  081F                     	;# 
   218  0820                     	;# 
   219  0821                     	;# 
   220  0821                     	;# 
   221  0822                     	;# 
   222  0823                     	;# 
   223  0823                     	;# 
   224  0824                     	;# 
   225  0825                     	;# 
   226  0825                     	;# 
   227  0826                     	;# 
   228  0827                     	;# 
   229  0827                     	;# 
   230  0828                     	;# 
   231  0829                     	;# 
   232  082A                     	;# 
   233  082B                     	;# 
   234  082C                     	;# 
   235  082D                     	;# 
   236  082E                     	;# 
   237  082F                     	;# 
   238  0831                     	;# 
   239  0832                     	;# 
   240  0833                     	;# 
   241  0834                     	;# 
   242  0835                     	;# 
   243  0836                     	;# 
   244  0837                     	;# 
   245  0838                     	;# 
   246  0839                     	;# 
   247  083A                     	;# 
   248  083B                     	;# 
   249  083C                     	;# 
   250  083D                     	;# 
   251  083E                     	;# 
   252  083F                     	;# 
   253  0840                     	;# 
   254  0841                     	;# 
   255  0841                     	;# 
   256  0842                     	;# 
   257  0843                     	;# 
   258  0843                     	;# 
   259  0844                     	;# 
   260  0845                     	;# 
   261  0845                     	;# 
   262  0846                     	;# 
   263  0847                     	;# 
   264  0847                     	;# 
   265  0848                     	;# 
   266  0849                     	;# 
   267  084A                     	;# 
   268  084B                     	;# 
   269  084C                     	;# 
   270  084D                     	;# 
   271  084E                     	;# 
   272  084F                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0014                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  0090                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0094                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  009F                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  0111                     	;# 
   335  0112                     	;# 
   336  0113                     	;# 
   337  0114                     	;# 
   338  0115                     	;# 
   339  0116                     	;# 
   340  0117                     	;# 
   341  0118                     	;# 
   342  0119                     	;# 
   343  011D                     	;# 
   344  011D                     	;# 
   345  011E                     	;# 
   346  011F                     	;# 
   347  018C                     	;# 
   348  018D                     	;# 
   349  0191                     	;# 
   350  0191                     	;# 
   351  0192                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0193                     	;# 
   355  0194                     	;# 
   356  0195                     	;# 
   357  0196                     	;# 
   358  0199                     	;# 
   359  0199                     	;# 
   360  0199                     	;# 
   361  019A                     	;# 
   362  019A                     	;# 
   363  019A                     	;# 
   364  019B                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019C                     	;# 
   370  019C                     	;# 
   371  019C                     	;# 
   372  019D                     	;# 
   373  019D                     	;# 
   374  019D                     	;# 
   375  019E                     	;# 
   376  019E                     	;# 
   377  019E                     	;# 
   378  019F                     	;# 
   379  019F                     	;# 
   380  019F                     	;# 
   381  019F                     	;# 
   382  019F                     	;# 
   383  020C                     	;# 
   384  020D                     	;# 
   385  020E                     	;# 
   386  0210                     	;# 
   387  0211                     	;# 
   388  0211                     	;# 
   389  0212                     	;# 
   390  0212                     	;# 
   391  0213                     	;# 
   392  0213                     	;# 
   393  0214                     	;# 
   394  0214                     	;# 
   395  0215                     	;# 
   396  0215                     	;# 
   397  0215                     	;# 
   398  0216                     	;# 
   399  0216                     	;# 
   400  0217                     	;# 
   401  0217                     	;# 
   402  028C                     	;# 
   403  028D                     	;# 
   404  028E                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0298                     	;# 
   410  0298                     	;# 
   411  0299                     	;# 
   412  029A                     	;# 
   413  030C                     	;# 
   414  030D                     	;# 
   415  030E                     	;# 
   416  038C                     	;# 
   417  038D                     	;# 
   418  038E                     	;# 
   419  0390                     	;# 
   420  0391                     	;# 
   421  0392                     	;# 
   422  0393                     	;# 
   423  0394                     	;# 
   424  0395                     	;# 
   425  0396                     	;# 
   426  0397                     	;# 
   427  0398                     	;# 
   428  0399                     	;# 
   429  039D                     	;# 
   430  039E                     	;# 
   431  039F                     	;# 
   432  0511                     	;# 
   433  0513                     	;# 
   434  051A                     	;# 
   435  0811                     	;# 
   436  0812                     	;# 
   437  0813                     	;# 
   438  0814                     	;# 
   439  0815                     	;# 
   440  0816                     	;# 
   441  0817                     	;# 
   442  0818                     	;# 
   443  0819                     	;# 
   444  081A                     	;# 
   445  081B                     	;# 
   446  081C                     	;# 
   447  081D                     	;# 
   448  081E                     	;# 
   449  081F                     	;# 
   450  0820                     	;# 
   451  0821                     	;# 
   452  0821                     	;# 
   453  0822                     	;# 
   454  0823                     	;# 
   455  0823                     	;# 
   456  0824                     	;# 
   457  0825                     	;# 
   458  0825                     	;# 
   459  0826                     	;# 
   460  0827                     	;# 
   461  0827                     	;# 
   462  0828                     	;# 
   463  0829                     	;# 
   464  082A                     	;# 
   465  082B                     	;# 
   466  082C                     	;# 
   467  082D                     	;# 
   468  082E                     	;# 
   469  082F                     	;# 
   470  0831                     	;# 
   471  0832                     	;# 
   472  0833                     	;# 
   473  0834                     	;# 
   474  0835                     	;# 
   475  0836                     	;# 
   476  0837                     	;# 
   477  0838                     	;# 
   478  0839                     	;# 
   479  083A                     	;# 
   480  083B                     	;# 
   481  083C                     	;# 
   482  083D                     	;# 
   483  083E                     	;# 
   484  083F                     	;# 
   485  0840                     	;# 
   486  0841                     	;# 
   487  0841                     	;# 
   488  0842                     	;# 
   489  0843                     	;# 
   490  0843                     	;# 
   491  0844                     	;# 
   492  0845                     	;# 
   493  0845                     	;# 
   494  0846                     	;# 
   495  0847                     	;# 
   496  0847                     	;# 
   497  0848                     	;# 
   498  0849                     	;# 
   499  084A                     	;# 
   500  084B                     	;# 
   501  084C                     	;# 
   502  084D                     	;# 
   503  084E                     	;# 
   504  084F                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  0010                     	;# 
   532  0011                     	;# 
   533  0012                     	;# 
   534  0014                     	;# 
   535  0015                     	;# 
   536  0016                     	;# 
   537  0016                     	;# 
   538  0017                     	;# 
   539  0018                     	;# 
   540  0019                     	;# 
   541  001A                     	;# 
   542  001B                     	;# 
   543  001C                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  0090                     	;# 
   548  0091                     	;# 
   549  0092                     	;# 
   550  0094                     	;# 
   551  0095                     	;# 
   552  0096                     	;# 
   553  0097                     	;# 
   554  0098                     	;# 
   555  0099                     	;# 
   556  009A                     	;# 
   557  009B                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  0111                     	;# 
   567  0112                     	;# 
   568  0113                     	;# 
   569  0114                     	;# 
   570  0115                     	;# 
   571  0116                     	;# 
   572  0117                     	;# 
   573  0118                     	;# 
   574  0119                     	;# 
   575  011D                     	;# 
   576  011D                     	;# 
   577  011E                     	;# 
   578  011F                     	;# 
   579  018C                     	;# 
   580  018D                     	;# 
   581  0191                     	;# 
   582  0191                     	;# 
   583  0192                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0193                     	;# 
   587  0194                     	;# 
   588  0195                     	;# 
   589  0196                     	;# 
   590  0199                     	;# 
   591  0199                     	;# 
   592  0199                     	;# 
   593  019A                     	;# 
   594  019A                     	;# 
   595  019A                     	;# 
   596  019B                     	;# 
   597  019B                     	;# 
   598  019B                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019C                     	;# 
   602  019C                     	;# 
   603  019C                     	;# 
   604  019D                     	;# 
   605  019D                     	;# 
   606  019D                     	;# 
   607  019E                     	;# 
   608  019E                     	;# 
   609  019E                     	;# 
   610  019F                     	;# 
   611  019F                     	;# 
   612  019F                     	;# 
   613  019F                     	;# 
   614  019F                     	;# 
   615  020C                     	;# 
   616  020D                     	;# 
   617  020E                     	;# 
   618  0210                     	;# 
   619  0211                     	;# 
   620  0211                     	;# 
   621  0212                     	;# 
   622  0212                     	;# 
   623  0213                     	;# 
   624  0213                     	;# 
   625  0214                     	;# 
   626  0214                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0216                     	;# 
   631  0216                     	;# 
   632  0217                     	;# 
   633  0217                     	;# 
   634  028C                     	;# 
   635  028D                     	;# 
   636  028E                     	;# 
   637  0291                     	;# 
   638  0291                     	;# 
   639  0292                     	;# 
   640  0293                     	;# 
   641  0298                     	;# 
   642  0298                     	;# 
   643  0299                     	;# 
   644  029A                     	;# 
   645  030C                     	;# 
   646  030D                     	;# 
   647  030E                     	;# 
   648  038C                     	;# 
   649  038D                     	;# 
   650  038E                     	;# 
   651  0390                     	;# 
   652  0391                     	;# 
   653  0392                     	;# 
   654  0393                     	;# 
   655  0394                     	;# 
   656  0395                     	;# 
   657  0396                     	;# 
   658  0397                     	;# 
   659  0398                     	;# 
   660  0399                     	;# 
   661  039D                     	;# 
   662  039E                     	;# 
   663  039F                     	;# 
   664  0511                     	;# 
   665  0513                     	;# 
   666  051A                     	;# 
   667  0811                     	;# 
   668  0812                     	;# 
   669  0813                     	;# 
   670  0814                     	;# 
   671  0815                     	;# 
   672  0816                     	;# 
   673  0817                     	;# 
   674  0818                     	;# 
   675  0819                     	;# 
   676  081A                     	;# 
   677  081B                     	;# 
   678  081C                     	;# 
   679  081D                     	;# 
   680  081E                     	;# 
   681  081F                     	;# 
   682  0820                     	;# 
   683  0821                     	;# 
   684  0821                     	;# 
   685  0822                     	;# 
   686  0823                     	;# 
   687  0823                     	;# 
   688  0824                     	;# 
   689  0825                     	;# 
   690  0825                     	;# 
   691  0826                     	;# 
   692  0827                     	;# 
   693  0827                     	;# 
   694  0828                     	;# 
   695  0829                     	;# 
   696  082A                     	;# 
   697  082B                     	;# 
   698  082C                     	;# 
   699  082D                     	;# 
   700  082E                     	;# 
   701  082F                     	;# 
   702  0831                     	;# 
   703  0832                     	;# 
   704  0833                     	;# 
   705  0834                     	;# 
   706  0835                     	;# 
   707  0836                     	;# 
   708  0837                     	;# 
   709  0838                     	;# 
   710  0839                     	;# 
   711  083A                     	;# 
   712  083B                     	;# 
   713  083C                     	;# 
   714  083D                     	;# 
   715  083E                     	;# 
   716  083F                     	;# 
   717  0840                     	;# 
   718  0841                     	;# 
   719  0841                     	;# 
   720  0842                     	;# 
   721  0843                     	;# 
   722  0843                     	;# 
   723  0844                     	;# 
   724  0845                     	;# 
   725  0845                     	;# 
   726  0846                     	;# 
   727  0847                     	;# 
   728  0847                     	;# 
   729  0848                     	;# 
   730  0849                     	;# 
   731  084A                     	;# 
   732  084B                     	;# 
   733  084C                     	;# 
   734  084D                     	;# 
   735  084E                     	;# 
   736  084F                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE9                     	;# 
   743  0FEA                     	;# 
   744  0FEB                     	;# 
   745  0FED                     	;# 
   746  0FEE                     	;# 
   747  0FEF                     	;# 
   748                           
   749                           	psect	idataCOMMON
   750  07DA                     __pidataCOMMON:	
   751                           
   752                           ;initializer for _gpsInvalidFlag
   753  07DA  3401               	retlw	1
   754                           
   755                           	psect	idataBANK0
   756  07D8                     __pidataBANK0:	
   757                           
   758                           ;initializer for _validEastWest
   759  07D8  3445               	retlw	69
   760                           
   761                           ;initializer for _validNorthSouth
   762  07D9  344E               	retlw	78
   763                           
   764                           	psect	idataBANK1
   765  06BF                     __pidataBANK1:	
   766                           
   767                           ;initializer for DisableGPS@F4916
   768  06BF  3424               	retlw	36
   769  06C0  3450               	retlw	80
   770  06C1  3453               	retlw	83
   771  06C2  3452               	retlw	82
   772  06C3  3446               	retlw	70
   773  06C4  3431               	retlw	49
   774  06C5  3431               	retlw	49
   775  06C6  3437               	retlw	55
   776  06C7  342C               	retlw	44
   777  06C8  3431               	retlw	49
   778  06C9  3436               	retlw	54
   779  06CA  342A               	retlw	42
   780  06CB  3400               	retlw	0
   781                           
   782                           ;initializer for DecodeGPS@F4928
   783  06CC  3424               	retlw	36
   784  06CD  3447               	retlw	71
   785  06CE  3450               	retlw	80
   786  06CF  3447               	retlw	71
   787  06D0  344C               	retlw	76
   788  06D1  344C               	retlw	76
   789  06D2  3400               	retlw	0
   790                           
   791                           ;initializer for SetupGPS@F4919
   792  06D3  3424               	retlw	36
   793  06D4  3450               	retlw	80
   794  06D5  3453               	retlw	83
   795  06D6  3452               	retlw	82
   796  06D7  3446               	retlw	70
   797  06D8  3400               	retlw	0
   798                           
   799                           ;initializer for SetupGPS@F4921
   800  06D9  3431               	retlw	49
   801  06DA  3430               	retlw	48
   802  06DB  3433               	retlw	51
   803  06DC  3400               	retlw	0
   804                           
   805                           	psect	idataBANK2
   806  073D                     __pidataBANK2:	
   807                           
   808                           ;initializer for UpdateGPS@F4926
   809  073D  3424               	retlw	36
   810  073E  3450               	retlw	80
   811  073F  3453               	retlw	83
   812  0740  3452               	retlw	82
   813  0741  3446               	retlw	70
   814  0742  3431               	retlw	49
   815  0743  3430               	retlw	48
   816  0744  3433               	retlw	51
   817  0745  342C               	retlw	44
   818  0746  3430               	retlw	48
   819  0747  3431               	retlw	49
   820  0748  342C               	retlw	44
   821  0749  3430               	retlw	48
   822  074A  3431               	retlw	49
   823  074B  342C               	retlw	44
   824  074C  3430               	retlw	48
   825  074D  3430               	retlw	48
   826  074E  342C               	retlw	44
   827  074F  3430               	retlw	48
   828  0750  3430               	retlw	48
   829  0751  342A               	retlw	42
   830  0752  3400               	retlw	0
   831                           
   832                           	psect	stringtext
   833  0600                     __pstringtext:	
   834  0600                     _dpowers:	
   835  0600  3401               	retlw	1
   836  0601  3400               	retlw	0
   837  0602  340A               	retlw	10
   838  0603  3400               	retlw	0
   839  0604  3464               	retlw	100
   840  0605  3400               	retlw	0
   841  0606  34E8               	retlw	232
   842  0607  3403               	retlw	3
   843  0608  3410               	retlw	16
   844  0609  3427               	retlw	39
   845  060A                     __end_of_dpowers:	
   846  060A                     __stringdata:	
   847  060A                     STR_1:	
   848  060A  3425               	retlw	37	;'%'
   849  060B  3473               	retlw	115	;'s'
   850  060C  3425               	retlw	37	;'%'
   851  060D  3473               	retlw	115	;'s'
   852  060E  342C               	retlw	44	;','
   853  060F  3430               	retlw	48	;'0'
   854  0610  3425               	retlw	37	;'%'
   855  0611  3464               	retlw	100	;'d'
   856  0612  342C               	retlw	44	;','
   857  0613  3430               	retlw	48	;'0'
   858  0614  3430               	retlw	48	;'0'
   859  0615  342C               	retlw	44	;','
   860  0616  3430               	retlw	48	;'0'
   861  0617  3430               	retlw	48	;'0'
   862  0618  342C               	retlw	44	;','
   863  0619  3430               	retlw	48	;'0'
   864  061A  3430               	retlw	48	;'0'
   865  061B  342A               	retlw	42	;'*'
   866  061C  3400               	retlw	0
   867  061D                     STR_2:	
   868  061D  3425               	retlw	37	;'%'
   869  061E  3473               	retlw	115	;'s'
   870  061F  3425               	retlw	37	;'%'
   871  0620  3473               	retlw	115	;'s'
   872  0621  342C               	retlw	44	;','
   873  0622  3430               	retlw	48	;'0'
   874  0623  3431               	retlw	49	;'1'
   875  0624  342C               	retlw	44	;','
   876  0625  3430               	retlw	48	;'0'
   877  0626  3431               	retlw	49	;'1'
   878  0627  342C               	retlw	44	;','
   879  0628  3430               	retlw	48	;'0'
   880  0629  3430               	retlw	48	;'0'
   881  062A  342C               	retlw	44	;','
   882  062B  3430               	retlw	48	;'0'
   883  062C  3430               	retlw	48	;'0'
   884  062D  342A               	retlw	42	;'*'
   885  062E  3400               	retlw	0
   886  062F                     STR_3:	
   887  062F  3428               	retlw	40	;'('
   888  0630  346E               	retlw	110	;'n'
   889  0631  3475               	retlw	117	;'u'
   890  0632  346C               	retlw	108	;'l'
   891  0633  346C               	retlw	108	;'l'
   892  0634  3429               	retlw	41	;')'
   893  0635  3400               	retlw	0
   894  0636                     __end_of__stringdata:	
   895                           
   896                           ; #config settings
   897  0000                     
   898                           	psect	nvBANK1
   899  00DB                     __pnvBANK1:	
   900  00DB                     _gpsIndex:	
   901  00DB                     	ds	1
   902  000B                     _INTCONbits	set	11
   903  0011                     _PIR1bits	set	17
   904  000C                     _PORTAbits	set	12
   905  000D                     _PORTBbits	set	13
   906  000E                     _PORTCbits	set	14
   907  0018                     _T1CONbits	set	24
   908  0019                     _T1GCONbits	set	25
   909  0017                     _TMR1H	set	23
   910  0016                     _TMR1L	set	22
   911  008E                     _ADIF	set	142
   912  005F                     _GIE	set	95
   913  005E                     _PEIE	set	94
   914  0088                     _TMR1IF	set	136
   915  00C0                     _TMR1ON	set	192
   916  009D                     _ADCON0bits	set	157
   917  009E                     _ADCON1bits	set	158
   918  009F                     _ADCON2bits	set	159
   919  009C                     _ADRESH	set	156
   920  0099                     _OSCCONbits	set	153
   921  0091                     _PIE1bits	set	145
   922  008C                     _TRISAbits	set	140
   923  008D                     _TRISBbits	set	141
   924  008E                     _TRISCbits	set	142
   925  0097                     _WDTCONbits	set	151
   926  048E                     _ADIE	set	1166
   927  048D                     _RCIE	set	1165
   928  0488                     _TMR1IE	set	1160
   929  0872                     _LATC2	set	2162
   930  018C                     _ANSELAbits	set	396
   931  018D                     _ANSELBbits	set	397
   932  0199                     _RCREG	set	409
   933  019D                     _RCSTAbits	set	413
   934  019C                     _SPBRGH	set	412
   935  019B                     _SPBRGL	set	411
   936  019A                     _TXREG	set	410
   937  019E                     _TXSTAbits	set	414
   938  0CE9                     _OERR	set	3305
   939  0211                     _SSPBUF	set	529
   940  0215                     _SSPCON1bits	set	533
   941  0214                     _SSPSTATbits	set	532
   942  0393                     _IOCAF	set	915
   943  0393                     _IOCAFbits	set	915
   944  0392                     _IOCANbits	set	914
   945  0391                     _IOCAPbits	set	913
   946  0396                     _IOCBF	set	918
   947  0396                     _IOCBFbits	set	918
   948  0395                     _IOCBNbits	set	917
   949  0394                     _IOCBPbits	set	916
   950                           
   951                           	psect	cinit
   952  00D4                     start_initialization:	
   953  00D4                     __initialization:	
   954                           
   955                           ; Clear objects allocated to COMMON
   956  00D4  01F9               	clrf	__pbssCOMMON& (0+127)
   957  00D5  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   958  00D6  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   959  00D7  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   960                           
   961                           ; Clear objects allocated to BANK0
   962  00D8  01EC               	clrf	__pbssBANK0& (0+127)
   963  00D9  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   964                           
   965                           ; Clear objects allocated to BANK1
   966  00DA  30BE               	movlw	low __pbssBANK1
   967  00DB  0084               	movwf	4
   968  00DC  3000               	movlw	high __pbssBANK1
   969  00DD  0085               	movwf	5
   970  00DE  301D               	movlw	29
   971  00DF  3187  27CC  3180   	fcall	clear_ram0
   972                           
   973                           ; Clear objects allocated to BANK2
   974  00E2  3020               	movlw	low __pbssBANK2
   975  00E3  0084               	movwf	4
   976  00E4  3001               	movlw	high __pbssBANK2
   977  00E5  0085               	movwf	5
   978  00E6  3032               	movlw	50
   979  00E7  3187  27CC  3180   	fcall	clear_ram0
   980                           
   981                           ; Clear objects allocated to BANK3
   982  00EA  30A0               	movlw	low __pbssBANK3
   983  00EB  0084               	movwf	4
   984  00EC  3001               	movlw	high __pbssBANK3
   985  00ED  0085               	movwf	5
   986  00EE  3033               	movlw	51
   987  00EF  3187  27CC  3180   	fcall	clear_ram0
   988                           
   989                           ; Clear objects allocated to BANK4
   990  00F2  3020               	movlw	low __pbssBANK4
   991  00F3  0084               	movwf	4
   992  00F4  3002               	movlw	high __pbssBANK4
   993  00F5  0085               	movwf	5
   994  00F6  3044               	movlw	68
   995  00F7  3187  27CC  3180   	fcall	clear_ram0
   996                           
   997                           ; Initialize objects allocated to COMMON
   998  00FA  3187  27DA  3180   	fcall	__pidataCOMMON	;fetch initializer
   999  00FD  00FD               	movwf	__pdataCOMMON& (0+127)
  1000                           
  1001                           ; Initialize objects allocated to BANK0
  1002  00FE  3187  27D8  3180   	fcall	__pidataBANK0	;fetch initializer
  1003  0101  00EE               	movwf	__pdataBANK0& (0+127)
  1004  0102  3187  27D9  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1005  0105  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  1006                           
  1007                           ; Initialize objects allocated to BANK1
  1008  0106  30BF               	movlw	low __pidataBANK1
  1009  0107  0084               	movwf	4
  1010  0108  3086               	movlw	(high __pidataBANK1)| (0+128)
  1011  0109  0085               	movwf	5
  1012  010A  30A0               	movlw	low __pdataBANK1
  1013  010B  0086               	movwf	6
  1014  010C  3000               	movlw	high __pdataBANK1
  1015  010D  0087               	movwf	7
  1016  010E  301E               	movlw	30
  1017  010F  3187  27D2  3180   	fcall	init_ram
  1018                           
  1019                           ; Initialize objects allocated to BANK2
  1020  0112  303D               	movlw	low __pidataBANK2
  1021  0113  0084               	movwf	4
  1022  0114  3087               	movlw	(high __pidataBANK2)| (0+128)
  1023  0115  0085               	movwf	5
  1024  0116  3052               	movlw	low __pdataBANK2
  1025  0117  0086               	movwf	6
  1026  0118  3001               	movlw	high __pdataBANK2
  1027  0119  0087               	movwf	7
  1028  011A  3016               	movlw	22
  1029  011B  3187  27D2         	fcall	init_ram
  1030  011D                     end_of_initialization:	
  1031                           ;End of C runtime variable initialization code
  1032                           
  1033  011D                     __end_of__initialization:	
  1034  011D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  1035  011E  0020               	movlb	0
  1036  011F  3185  2D42         	ljmp	_main	;jump to C main() function
  1037                           
  1038                           	psect	bssCOMMON
  1039  0079                     __pbssCOMMON:	
  1040  0079                     _end:	
  1041  0079                     	ds	2
  1042  007B                     _start:	
  1043  007B                     	ds	2
  1044                           
  1045                           	psect	dataCOMMON
  1046  007D                     __pdataCOMMON:	
  1047  007D                     _gpsInvalidFlag:	
  1048  007D                     	ds	1
  1049                           
  1050                           	psect	bssBANK0
  1051  006C                     __pbssBANK0:	
  1052  006C                     _messageDoneFlag:	
  1053  006C                     	ds	1
  1054  006D                     _recordFlag:	
  1055  006D                     	ds	1
  1056                           
  1057                           	psect	dataBANK0
  1058  006E                     __pdataBANK0:	
  1059  006E                     _validEastWest:	
  1060  006E                     	ds	1
  1061  006F                     _validNorthSouth:	
  1062  006F                     	ds	1
  1063                           
  1064                           	psect	bssBANK1
  1065  00BE                     __pbssBANK1:	
  1066  00BE                     DecodeGPS@F4930:	
  1067  00BE                     	ds	6
  1068  00C4                     DecodeGPS@F4932:	
  1069  00C4                     	ds	6
  1070  00CA                     _validLatitude:	
  1071  00CA                     	ds	6
  1072  00D0                     _validLongitude:	
  1073  00D0                     	ds	6
  1074  00D6                     _recordEndAdress:	
  1075  00D6                     	ds	4
  1076  00DA                     _strobeFlag:	
  1077  00DA                     	ds	1
  1078                           
  1079                           	psect	dataBANK1
  1080  00A0                     __pdataBANK1:	
  1081  00A0                     DisableGPS@F4916:	
  1082  00A0                     	ds	13
  1083  00AD                     DecodeGPS@F4928:	
  1084  00AD                     	ds	7
  1085  00B4                     SetupGPS@F4919:	
  1086  00B4                     	ds	6
  1087  00BA                     SetupGPS@F4921:	
  1088  00BA                     	ds	4
  1089                           
  1090                           	psect	bssBANK2
  1091  0120                     __pbssBANK2:	
  1092  0120                     _gpsMessage:	
  1093  0120                     	ds	50
  1094                           
  1095                           	psect	dataBANK2
  1096  0152                     __pdataBANK2:	
  1097  0152                     UpdateGPS@F4926:	
  1098  0152                     	ds	22
  1099                           
  1100                           	psect	bssBANK3
  1101  01A0                     __pbssBANK3:	
  1102  01A0                     _buffer:	
  1103  01A0                     	ds	51
  1104                           
  1105                           	psect	bssBANK4
  1106  0220                     __pbssBANK4:	
  1107  0220                     _preRecordingAddresses:	
  1108  0220                     	ds	68
  1109                           
  1110                           	psect	clrtext
  1111  07CC                     clear_ram0:	
  1112                           ;	Called with FSR0 containing the base address, and
  1113                           ;	WREG with the size to clear
  1114                           
  1115  07CC  0064               	clrwdt	;clear the watchdog before getting into this loop
  1116  07CD                     clrloop0:	
  1117  07CD  0180               	clrf	0	;clear RAM location pointed to by FSR
  1118  07CE  3101               	addfsr 0,1
  1119  07CF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1120  07D0  2FCD               	goto	clrloop0	;have we reached the end yet?
  1121  07D1  3400               	retlw	0	;all done for this memory range, return
  1122                           
  1123                           	psect	inittext
  1124  07D2                     init_ram:	
  1125  07D2  00FE               	movwf	126
  1126  07D3                     initloop:	
  1127  07D3  0012               	moviw fsr0++
  1128  07D4  001E               	movwi fsr1++
  1129  07D5  0BFE               	decfsz	126,f
  1130  07D6  2FD3               	goto	initloop
  1131  07D7  3400               	retlw	0
  1132                           
  1133                           	psect	cstackCOMMON
  1134  0070                     __pcstackCOMMON:	
  1135  0070                     ?_InitCLK:	
  1136  0070                     ?_InitGPIO:	
  1137                           ; 0 bytes @ 0x0
  1138                           
  1139  0070                     ?_InitADC:	
  1140                           ; 0 bytes @ 0x0
  1141                           
  1142  0070                     ?_InitSPI:	
  1143                           ; 0 bytes @ 0x0
  1144                           
  1145  0070                     ?_InitTimer1:	
  1146                           ; 0 bytes @ 0x0
  1147                           
  1148  0070                     ?_InitWatchdog:	
  1149                           ; 0 bytes @ 0x0
  1150                           
  1151  0070                     ?_initUART:	
  1152                           ; 0 bytes @ 0x0
  1153                           
  1154  0070                     ?_ToggleSleepGPS:	
  1155                           ; 0 bytes @ 0x0
  1156                           
  1157  0070                     ?_SetupGPS:	
  1158                           ; 0 bytes @ 0x0
  1159                           
  1160  0070                     ?_RecordMode:	
  1161                           ; 0 bytes @ 0x0
  1162                           
  1163  0070                     ?_WriteBuffer:	
  1164                           ; 0 bytes @ 0x0
  1165                           
  1166  0070                     ?_isr:	
  1167                           ; 0 bytes @ 0x0
  1168                           
  1169  0070                     ?_WriteSPI:	
  1170                           ; 0 bytes @ 0x0
  1171                           
  1172  0070                     ?_uart_xmit:	
  1173                           ; 0 bytes @ 0x0
  1174                           
  1175  0070                     ?i1_WriteBuffer:	
  1176                           ; 0 bytes @ 0x0
  1177                           
  1178  0070                     ??i1_WriteBuffer:	
  1179                           ; 0 bytes @ 0x0
  1180                           
  1181  0070                     ?_ReadSPI:	
  1182                           ; 0 bytes @ 0x0
  1183                           
  1184  0070                     ?_ReadStatusSPI:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  0070                     ?_ReadBuffer:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190                           
  1191                           ; 1 bytes @ 0x0
  1192  0070                     	ds	1
  1193  0071                     i1WriteBuffer@data:	
  1194                           
  1195                           ; 1 bytes @ 0x1
  1196  0071                     	ds	1
  1197  0072                     ??_isr:	
  1198                           
  1199                           ; 0 bytes @ 0x2
  1200  0072                     	ds	5
  1201  0077                     _isr$543:	
  1202                           
  1203                           ; 2 bytes @ 0x7
  1204  0077                     	ds	2
  1205                           
  1206                           	psect	cstackBANK0
  1207  0020                     __pcstackBANK0:	
  1208  0020                     ??_InitCLK:	
  1209  0020                     ??_InitGPIO:	
  1210                           ; 0 bytes @ 0x0
  1211                           
  1212  0020                     ??_InitADC:	
  1213                           ; 0 bytes @ 0x0
  1214                           
  1215  0020                     ??_InitSPI:	
  1216                           ; 0 bytes @ 0x0
  1217                           
  1218  0020                     ??_InitTimer1:	
  1219                           ; 0 bytes @ 0x0
  1220                           
  1221  0020                     ??_InitWatchdog:	
  1222                           ; 0 bytes @ 0x0
  1223                           
  1224  0020                     ??_initUART:	
  1225                           ; 0 bytes @ 0x0
  1226                           
  1227  0020                     ??_ToggleSleepGPS:	
  1228                           ; 0 bytes @ 0x0
  1229                           
  1230  0020                     ??_WriteBuffer:	
  1231                           ; 0 bytes @ 0x0
  1232                           
  1233  0020                     ??_WriteSPI:	
  1234                           ; 0 bytes @ 0x0
  1235                           
  1236  0020                     ??_ReadSPI:	
  1237                           ; 0 bytes @ 0x0
  1238                           
  1239  0020                     ??_ReadBuffer:	
  1240                           ; 0 bytes @ 0x0
  1241                           
  1242  0020                     ??_uart_xmit:	
  1243                           ; 0 bytes @ 0x0
  1244                           
  1245  0020                     ?_compute_checksum:	
  1246                           ; 0 bytes @ 0x0
  1247                           
  1248  0020                     ?___lwdiv:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0020                     uart_xmit@mydata_byte:	
  1252                           ; 2 bytes @ 0x0
  1253                           
  1254  0020                     compute_checksum@size:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0020                     ___lwdiv@divisor:	
  1258                           ; 2 bytes @ 0x0
  1259                           
  1260                           
  1261                           ; 2 bytes @ 0x0
  1262  0020                     	ds	1
  1263  0021                     ReadSPI@dataByte:	
  1264  0021                     WriteBuffer@data:	
  1265                           ; 1 bytes @ 0x1
  1266                           
  1267  0021                     ReadBuffer@read_data:	
  1268                           ; 1 bytes @ 0x1
  1269                           
  1270                           
  1271                           ; 1 bytes @ 0x1
  1272  0021                     	ds	1
  1273  0022                     ??_compute_checksum:	
  1274  0022                     WriteSPI@temp:	
  1275                           ; 0 bytes @ 0x2
  1276                           
  1277  0022                     ___lwdiv@dividend:	
  1278                           ; 2 bytes @ 0x2
  1279                           
  1280                           
  1281                           ; 2 bytes @ 0x2
  1282  0022                     	ds	2
  1283  0024                     ??___lwdiv:	
  1284  0024                     WriteSPI@databyte:	
  1285                           ; 0 bytes @ 0x4
  1286                           
  1287  0024                     compute_checksum@checksum:	
  1288                           ; 1 bytes @ 0x4
  1289                           
  1290                           
  1291                           ; 1 bytes @ 0x4
  1292  0024                     	ds	1
  1293  0025                     ??_ReadStatusSPI:	
  1294  0025                     compute_checksum@data:	
  1295                           ; 0 bytes @ 0x5
  1296                           
  1297  0025                     ___lwdiv@quotient:	
  1298                           ; 1 bytes @ 0x5
  1299                           
  1300                           
  1301                           ; 2 bytes @ 0x5
  1302  0025                     	ds	1
  1303  0026                     ReadStatusSPI@dataRead:	
  1304  0026                     compute_checksum@x:	
  1305                           ; 1 bytes @ 0x6
  1306                           
  1307                           
  1308                           ; 2 bytes @ 0x6
  1309  0026                     	ds	1
  1310  0027                     ?_WriteOverheadSPI:	
  1311  0027                     ___lwdiv@counter:	
  1312                           ; 0 bytes @ 0x7
  1313                           
  1314  0027                     WriteOverheadSPI@address:	
  1315                           ; 1 bytes @ 0x7
  1316                           
  1317                           
  1318                           ; 4 bytes @ 0x7
  1319  0027                     	ds	1
  1320  0028                     ?_uart_write_message:	
  1321  0028                     ?___lwmod:	
  1322                           ; 0 bytes @ 0x8
  1323                           
  1324  0028                     uart_write_message@size:	
  1325                           ; 2 bytes @ 0x8
  1326                           
  1327  0028                     ___lwmod@divisor:	
  1328                           ; 2 bytes @ 0x8
  1329                           
  1330                           
  1331                           ; 2 bytes @ 0x8
  1332  0028                     	ds	2
  1333  002A                     ??_uart_write_message:	
  1334  002A                     ___lwmod@dividend:	
  1335                           ; 0 bytes @ 0xA
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0xA
  1339  002A                     	ds	1
  1340  002B                     ??_WriteOverheadSPI:	
  1341                           
  1342                           ; 0 bytes @ 0xB
  1343  002B                     	ds	1
  1344  002C                     ??___lwmod:	
  1345                           
  1346                           ; 0 bytes @ 0xC
  1347  002C                     	ds	1
  1348  002D                     ___lwmod@counter:	
  1349  002D                     _uart_write_message$1328:	
  1350                           ; 1 bytes @ 0xD
  1351                           
  1352                           
  1353                           ; 2 bytes @ 0xD
  1354  002D                     	ds	1
  1355  002E                     ?_sprintf:	
  1356  002E                     sprintf@f:	
  1357                           ; 2 bytes @ 0xE
  1358                           
  1359                           
  1360                           ; 2 bytes @ 0xE
  1361  002E                     	ds	1
  1362  002F                     _uart_write_message$1329:	
  1363                           
  1364                           ; 2 bytes @ 0xF
  1365  002F                     	ds	2
  1366  0031                     uart_write_message@x:	
  1367  0031                     WriteOverheadSPI@address_bytes:	
  1368                           ; 2 bytes @ 0x11
  1369                           
  1370                           
  1371                           ; 3 bytes @ 0x11
  1372  0031                     	ds	2
  1373  0033                     uart_write_message@checksum:	
  1374                           
  1375                           ; 1 bytes @ 0x13
  1376  0033                     	ds	1
  1377  0034                     ??_sprintf:	
  1378  0034                     WriteOverheadSPI@StatusReg:	
  1379                           ; 0 bytes @ 0x14
  1380                           
  1381  0034                     uart_write_message@data:	
  1382                           ; 1 bytes @ 0x14
  1383                           
  1384                           
  1385                           ; 1 bytes @ 0x14
  1386  0034                     	ds	1
  1387  0035                     ??_RecordMode:	
  1388  0035                     uart_write_message@ascii_checksum:	
  1389                           ; 0 bytes @ 0x15
  1390                           
  1391                           
  1392                           ; 2 bytes @ 0x15
  1393  0035                     	ds	3
  1394  0038                     sprintf@flag:	
  1395                           
  1396                           ; 1 bytes @ 0x18
  1397  0038                     	ds	1
  1398  0039                     sprintf@prec:	
  1399                           
  1400                           ; 1 bytes @ 0x19
  1401  0039                     	ds	1
  1402  003A                     sprintf@ap:	
  1403  003A                     RecordMode@count:	
  1404                           ; 1 bytes @ 0x1A
  1405                           
  1406                           
  1407                           ; 2 bytes @ 0x1A
  1408  003A                     	ds	1
  1409  003B                     sprintf@sp:	
  1410                           
  1411                           ; 1 bytes @ 0x1B
  1412  003B                     	ds	1
  1413  003C                     RecordMode@address:	
  1414  003C                     sprintf@_val:	
  1415                           ; 4 bytes @ 0x1C
  1416                           
  1417                           
  1418                           ; 4 bytes @ 0x1C
  1419  003C                     	ds	4
  1420  0040                     sprintf@c:	
  1421  0040                     RecordMode@x:	
  1422                           ; 1 bytes @ 0x20
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0x20
  1426  0040                     	ds	1
  1427  0041                     ??_SetupGPS:	
  1428                           
  1429                           ; 0 bytes @ 0x21
  1430  0041                     	ds	3
  1431  0044                     SetupGPS@message:	
  1432                           
  1433                           ; 22 bytes @ 0x24
  1434  0044                     	ds	22
  1435  005A                     SetupGPS@startSequence:	
  1436                           
  1437                           ; 6 bytes @ 0x3A
  1438  005A                     	ds	6
  1439  0060                     SetupGPS@MID:	
  1440                           
  1441                           ; 4 bytes @ 0x40
  1442  0060                     	ds	4
  1443  0064                     SetupGPS@x:	
  1444                           
  1445                           ; 2 bytes @ 0x44
  1446  0064                     	ds	2
  1447  0066                     ?_main:	
  1448  0066                     main@argc:	
  1449                           ; 2 bytes @ 0x46
  1450                           
  1451                           
  1452                           ; 2 bytes @ 0x46
  1453  0066                     	ds	2
  1454  0068                     main@argv:	
  1455                           
  1456                           ; 2 bytes @ 0x48
  1457  0068                     	ds	2
  1458  006A                     ??_main:	
  1459                           
  1460                           ; 0 bytes @ 0x4A
  1461  006A                     	ds	1
  1462  006B                     main@periodicCounter:	
  1463                           
  1464                           ; 1 bytes @ 0x4B
  1465  006B                     	ds	1
  1466                           
  1467                           	psect	maintext
  1468  0542                     __pmaintext:	
  1469 ;;
  1470 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1471 ;;
  1472 ;; *************** function _main *****************
  1473 ;; Defined at:
  1474 ;;		line 20 in file "launcher_main.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  argc            2   70[BANK0 ] int 
  1477 ;;  argv            2   72[BANK0 ] PTR PTR unsigned char 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  periodicCoun    1   75[BANK0 ] unsigned char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  2   70[BANK0 ] int 
  1482 ;; Registers used:
  1483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 17F/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1489 ;;      Params:         0       4       0       0       0       0       0
  1490 ;;      Locals:         0       1       0       0       0       0       0
  1491 ;;      Temps:          0       1       0       0       0       0       0
  1492 ;;      Totals:         0       6       0       0       0       0       0
  1493 ;;Total ram usage:        6 bytes
  1494 ;; Hardware stack levels required when called:    6
  1495 ;; This function calls:
  1496 ;;		_InitADC
  1497 ;;		_InitCLK
  1498 ;;		_InitGPIO
  1499 ;;		_InitSPI
  1500 ;;		_InitTimer1
  1501 ;;		_InitWatchdog
  1502 ;;		_RecordMode
  1503 ;;		_SetupGPS
  1504 ;;		_ToggleSleepGPS
  1505 ;;		_initUART
  1506 ;; This function is called by:
  1507 ;;		Startup code after reset
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           
  1512                           ;psect for function _main
  1513  0542                     _main:	
  1514                           
  1515                           ;launcher_main.c: 23: InitCLK();
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1519  0542  3187  27BD  3185   	fcall	_InitCLK
  1520                           
  1521                           ;launcher_main.c: 24: InitGPIO();
  1522  0545  3186  2692  3185   	fcall	_InitGPIO
  1523                           
  1524                           ;launcher_main.c: 25: InitADC();
  1525  0548  3186  26DD  3185   	fcall	_InitADC
  1526                           
  1527                           ;launcher_main.c: 26: InitSPI();
  1528  054B  3187  2766  3185   	fcall	_InitSPI
  1529                           
  1530                           ;launcher_main.c: 27: InitTimer1();
  1531  054E  3187  2798  3185   	fcall	_InitTimer1
  1532                           
  1533                           ;launcher_main.c: 28: InitWatchdog();
  1534  0551  3187  27C5  3185   	fcall	_InitWatchdog
  1535                           
  1536                           ;launcher_main.c: 29: initUART();
  1537  0554  3187  2789  3185   	fcall	_initUART
  1538                           
  1539                           ;launcher_main.c: 31: unsigned char periodicCounter = 10;
  1540  0557  300A               	movlw	10
  1541  0558  0020               	movlb	0	; select bank0
  1542  0559  00EA               	movwf	??_main
  1543  055A  086A               	movf	??_main,w
  1544  055B  00EB               	movwf	main@periodicCounter
  1545                           
  1546                           ;launcher_main.c: 32: gpsIndex = 1;
  1547  055C  3001               	movlw	1
  1548  055D  00EA               	movwf	??_main
  1549  055E  086A               	movf	??_main,w
  1550  055F  0021               	movlb	1	; select bank1
  1551  0560  00DB               	movwf	_gpsIndex^(0+128)	;volatile
  1552                           
  1553                           ;launcher_main.c: 34: INTCONbits.GIE = 1;
  1554  0561  178B               	bsf	11,7	;volatile
  1555                           
  1556                           ;launcher_main.c: 55: if(!PORTCbits.RC7)
  1557  0562  0020               	movlb	0	; select bank0
  1558  0563  1B8E               	btfsc	14,7	;volatile
  1559  0564  2D68               	goto	l2264
  1560                           
  1561                           ;launcher_main.c: 56: ToggleSleepGPS();
  1562  0565  3186  2665  3185   	fcall	_ToggleSleepGPS
  1563  0568                     l2264:	
  1564                           
  1565                           ;launcher_main.c: 57: SetupGPS();
  1566  0568  3183  2398  3185   	fcall	_SetupGPS
  1567  056B                     L1:	
  1568                           
  1569                           ;launcher_main.c: 59: SSPCON1bits.SSPEN=0;
  1570  056B  0024               	movlb	4	; select bank4
  1571  056C  1295               	bcf	21,5	;volatile
  1572                           
  1573                           ;launcher_main.c: 60: PORTCbits.RC5 = 0;
  1574  056D  0020               	movlb	0	; select bank0
  1575  056E  128E               	bcf	14,5	;volatile
  1576  056F                     l2270:	
  1577                           ;launcher_main.c: 62: while(1){
  1578                           
  1579                           
  1580                           ;launcher_main.c: 64: LATC2 = (1);
  1581  056F  0022               	movlb	2	; select bank2
  1582  0570  150E               	bsf	14,2	;volatile
  1583                           
  1584                           ;launcher_main.c: 77: if(recordFlag)
  1585  0571  0020               	movlb	0	; select bank0
  1586  0572  086D               	movf	_recordFlag,w
  1587  0573  1903               	btfsc	3,2
  1588  0574  2D6F               	goto	l2270
  1589                           
  1590                           ;launcher_main.c: 78: {
  1591                           ;launcher_main.c: 79: InitSPI();
  1592  0575  3187  2766  3185   	fcall	_InitSPI
  1593                           
  1594                           ;launcher_main.c: 80: RecordMode();
  1595  0578  3181  2121  3185   	fcall	_RecordMode
  1596  057B  2D6B               	goto	L1
  1597  057C                     __end_of_main:	
  1598                           ;launcher_main.c: 83: }
  1599                           ;launcher_main.c: 114: }
  1600                           ;launcher_main.c: 116: return (0);
  1601                           ;	Return value of _main is never used
  1602                           
  1603                           ;launcher_main.c: 82: PORTCbits.RC5 = 0;
  1604                           
  1605                           ;launcher_main.c: 81: SSPCON1bits.SSPEN=0;
  1606                           
  1607                           
  1608                           	psect	text1
  1609  0789                     __ptext1:	
  1610 ;; *************** function _initUART *****************
  1611 ;; Defined at:
  1612 ;;		line 253 in file "launcher_functions.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;		None
  1617 ;; Return value:  Size  Location     Type
  1618 ;;		None               void
  1619 ;; Registers used:
  1620 ;;		wreg, status,2
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1626 ;;      Params:         0       0       0       0       0       0       0
  1627 ;;      Locals:         0       0       0       0       0       0       0
  1628 ;;      Temps:          0       0       0       0       0       0       0
  1629 ;;      Totals:         0       0       0       0       0       0       0
  1630 ;;Total ram usage:        0 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    2
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _initUART
  1642  0789                     _initUART:	
  1643                           
  1644                           ;launcher_functions.c: 256: TRISCbits.TRISC6 = 0;
  1645                           
  1646                           ;incstack = 0
  1647                           ; Regs used in _initUART: [wreg+status,2]
  1648  0789  0021               	movlb	1	; select bank1
  1649  078A  130E               	bcf	14,6	;volatile
  1650                           
  1651                           ;launcher_functions.c: 257: TRISCbits.TRISC7 = 1;
  1652  078B  178E               	bsf	14,7	;volatile
  1653                           
  1654                           ;launcher_functions.c: 258: TXSTAbits.BRGH = 0;
  1655  078C  0023               	movlb	3	; select bank3
  1656  078D  111E               	bcf	30,2	;volatile
  1657                           
  1658                           ;launcher_functions.c: 260: SPBRGH = 0;
  1659  078E  019C               	clrf	28	;volatile
  1660                           
  1661                           ;launcher_functions.c: 261: SPBRGL = 51;
  1662  078F  3033               	movlw	51
  1663  0790  009B               	movwf	27	;volatile
  1664                           
  1665                           ;launcher_functions.c: 262: TXSTAbits.TX9 = 0;
  1666  0791  131E               	bcf	30,6	;volatile
  1667                           
  1668                           ;launcher_functions.c: 263: TXSTAbits.SYNC = 0;
  1669  0792  121E               	bcf	30,4	;volatile
  1670                           
  1671                           ;launcher_functions.c: 264: TXSTAbits.TXEN = 1;
  1672  0793  169E               	bsf	30,5	;volatile
  1673                           
  1674                           ;launcher_functions.c: 266: RCSTAbits.SPEN = 1;
  1675  0794  179D               	bsf	29,7	;volatile
  1676                           
  1677                           ;launcher_functions.c: 267: RCSTAbits.RX9 = 0;
  1678  0795  131D               	bcf	29,6	;volatile
  1679                           
  1680                           ;launcher_functions.c: 268: RCSTAbits.CREN = 1;
  1681  0796  161D               	bsf	29,4	;volatile
  1682  0797  0008               	return
  1683  0798                     __end_of_initUART:	
  1684                           
  1685                           	psect	text2
  1686  0665                     __ptext2:	
  1687 ;; *************** function _ToggleSleepGPS *****************
  1688 ;; Defined at:
  1689 ;;		line 316 in file "launcher_functions.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;		None               void
  1696 ;; Registers used:
  1697 ;;		wreg
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1703 ;;      Params:         0       0       0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0
  1705 ;;      Temps:          0       3       0       0       0       0       0
  1706 ;;      Totals:         0       3       0       0       0       0       0
  1707 ;;Total ram usage:        3 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    2
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;;		_UpdateGPS
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           
  1719                           ;psect for function _ToggleSleepGPS
  1720  0665                     _ToggleSleepGPS:	
  1721                           
  1722                           ;launcher_functions.c: 318: PORTAbits.RA6 = 0;
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in _ToggleSleepGPS: [wreg]
  1726  0665  0020               	movlb	0	; select bank0
  1727  0666  130C               	bcf	12,6	;volatile
  1728                           
  1729                           ;launcher_functions.c: 319: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1730  0667  3015               	movlw	21
  1731  0668  00A2               	movwf	??_ToggleSleepGPS+2
  1732  0669  304B               	movlw	75
  1733  066A  00A1               	movwf	??_ToggleSleepGPS+1
  1734  066B  30D1               	movlw	209
  1735  066C  00A0               	movwf	??_ToggleSleepGPS
  1736  066D                     u2297:	
  1737  066D  0BA0               	decfsz	??_ToggleSleepGPS,f
  1738  066E  2E6D               	goto	u2297
  1739  066F  0BA1               	decfsz	??_ToggleSleepGPS+1,f
  1740  0670  2E6D               	goto	u2297
  1741  0671  0BA2               	decfsz	??_ToggleSleepGPS+2,f
  1742  0672  2E6D               	goto	u2297
  1743  0673  0000               	nop
  1744                           
  1745                           ;launcher_functions.c: 320: PORTAbits.RA6 = 1;
  1746  0674  0020               	movlb	0	; select bank0
  1747  0675  170C               	bsf	12,6	;volatile
  1748                           
  1749                           ;launcher_functions.c: 321: _delay((unsigned long)((100)*(16000000/4000.0)));
  1750  0676  3003               	movlw	3
  1751  0677  00A2               	movwf	??_ToggleSleepGPS+2
  1752  0678  3008               	movlw	8
  1753  0679  00A1               	movwf	??_ToggleSleepGPS+1
  1754  067A  3078               	movlw	120
  1755  067B  00A0               	movwf	??_ToggleSleepGPS
  1756  067C                     u2307:	
  1757  067C  0BA0               	decfsz	??_ToggleSleepGPS,f
  1758  067D  2E7C               	goto	u2307
  1759  067E  0BA1               	decfsz	??_ToggleSleepGPS+1,f
  1760  067F  2E7C               	goto	u2307
  1761  0680  0BA2               	decfsz	??_ToggleSleepGPS+2,f
  1762  0681  2E7C               	goto	u2307
  1763                           
  1764                           ;launcher_functions.c: 322: PORTAbits.RA6 = 0;
  1765  0682  0020               	movlb	0	; select bank0
  1766  0683  130C               	bcf	12,6	;volatile
  1767                           
  1768                           ;launcher_functions.c: 323: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1769  0684  3015               	movlw	21
  1770  0685  00A2               	movwf	??_ToggleSleepGPS+2
  1771  0686  304B               	movlw	75
  1772  0687  00A1               	movwf	??_ToggleSleepGPS+1
  1773  0688  30D1               	movlw	209
  1774  0689  00A0               	movwf	??_ToggleSleepGPS
  1775  068A                     u2317:	
  1776  068A  0BA0               	decfsz	??_ToggleSleepGPS,f
  1777  068B  2E8A               	goto	u2317
  1778  068C  0BA1               	decfsz	??_ToggleSleepGPS+1,f
  1779  068D  2E8A               	goto	u2317
  1780  068E  0BA2               	decfsz	??_ToggleSleepGPS+2,f
  1781  068F  2E8A               	goto	u2317
  1782  0690  0000               	nop
  1783  0691  0008               	return
  1784  0692                     __end_of_ToggleSleepGPS:	
  1785                           
  1786                           	psect	text3
  1787  0398                     __ptext3:	
  1788 ;; *************** function _SetupGPS *****************
  1789 ;; Defined at:
  1790 ;;		line 333 in file "launcher_functions.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  message        22   36[BANK0 ] unsigned char [22]
  1795 ;;  startSequenc    6   58[BANK0 ] unsigned char [6]
  1796 ;;  MID             4   64[BANK0 ] unsigned char [4]
  1797 ;;  x               2   68[BANK0 ] int 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;		None               void
  1800 ;; Registers used:
  1801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1807 ;;      Params:         0       0       0       0       0       0       0
  1808 ;;      Locals:         0      34       0       0       0       0       0
  1809 ;;      Temps:          0       3       0       0       0       0       0
  1810 ;;      Totals:         0      37       0       0       0       0       0
  1811 ;;Total ram usage:       37 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    4
  1814 ;; This function calls:
  1815 ;;		_sprintf
  1816 ;;		_uart_write_message
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           
  1823                           ;psect for function _SetupGPS
  1824  0398                     _SetupGPS:	
  1825                           
  1826                           ;launcher_functions.c: 335: int x;
  1827                           ;launcher_functions.c: 336: unsigned char startSequence[6] = "$PSRF";
  1828                           
  1829                           ;incstack = 0
  1830                           ; Regs used in _SetupGPS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1831  0398  30B4               	movlw	low SetupGPS@F4919
  1832  0399  0086               	movwf	6
  1833  039A  3000               	movlw	high SetupGPS@F4919
  1834  039B  0087               	movwf	7
  1835  039C  305A               	movlw	low SetupGPS@startSequence
  1836  039D  0084               	movwf	4
  1837  039E  3000               	movlw	high SetupGPS@startSequence
  1838  039F  0085               	movwf	5
  1839  03A0  3006               	movlw	6
  1840  03A1  0020               	movlb	0	; select bank0
  1841  03A2  00C1               	movwf	??_SetupGPS
  1842  03A3                     u1540:	
  1843  03A3  0016               	moviw fsr1++
  1844  03A4  001A               	movwi fsr0++
  1845  03A5  0BC1               	decfsz	??_SetupGPS,f
  1846  03A6  2BA3               	goto	u1540
  1847                           
  1848                           ;launcher_functions.c: 337: unsigned char MID[4] = "103";
  1849  03A7  0021               	movlb	1	; select bank1
  1850  03A8  083D               	movf	(SetupGPS@F4921+3)^(0+128),w
  1851  03A9  0020               	movlb	0	; select bank0
  1852  03AA  00E3               	movwf	SetupGPS@MID+3
  1853  03AB  0021               	movlb	1	; select bank1
  1854  03AC  083C               	movf	(SetupGPS@F4921+2)^(0+128),w
  1855  03AD  0020               	movlb	0	; select bank0
  1856  03AE  00E2               	movwf	SetupGPS@MID+2
  1857  03AF  0021               	movlb	1	; select bank1
  1858  03B0  083B               	movf	(SetupGPS@F4921+1)^(0+128),w
  1859  03B1  0020               	movlb	0	; select bank0
  1860  03B2  00E1               	movwf	SetupGPS@MID+1
  1861  03B3  0021               	movlb	1	; select bank1
  1862  03B4  083A               	movf	SetupGPS@F4921^(0+128),w
  1863  03B5  0020               	movlb	0	; select bank0
  1864  03B6  00E0               	movwf	SetupGPS@MID
  1865                           
  1866                           ;launcher_functions.c: 338: unsigned char message[22];
  1867                           ;launcher_functions.c: 341: for(x = 0; x < 6; x++)
  1868  03B7  01E4               	clrf	SetupGPS@x
  1869  03B8  01E5               	clrf	SetupGPS@x+1
  1870  03B9  0865               	movf	SetupGPS@x+1,w
  1871  03BA  3A80               	xorlw	128
  1872  03BB  00C1               	movwf	??_SetupGPS
  1873  03BC  3080               	movlw	128
  1874  03BD  0241               	subwf	??_SetupGPS,w
  1875  03BE  1D03               	skipz
  1876  03BF  2BC2               	goto	u1555
  1877  03C0  3006               	movlw	6
  1878  03C1  0264               	subwf	SetupGPS@x,w
  1879  03C2                     u1555:	
  1880  03C2  1803               	btfsc	3,0
  1881  03C3  2C02               	goto	l2144
  1882  03C4                     l2134:	
  1883                           
  1884                           ;launcher_functions.c: 342: {
  1885                           ;launcher_functions.c: 343: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1886  03C4  3015               	movlw	21
  1887  03C5  0020               	movlb	0	; select bank0
  1888  03C6  00C3               	movwf	??_SetupGPS+2
  1889  03C7  304B               	movlw	75
  1890  03C8  00C2               	movwf	??_SetupGPS+1
  1891  03C9  30D1               	movlw	209
  1892  03CA  00C1               	movwf	??_SetupGPS
  1893  03CB                     u2327:	
  1894  03CB  0BC1               	decfsz	??_SetupGPS,f
  1895  03CC  2BCB               	goto	u2327
  1896  03CD  0BC2               	decfsz	??_SetupGPS+1,f
  1897  03CE  2BCB               	goto	u2327
  1898  03CF  0BC3               	decfsz	??_SetupGPS+2,f
  1899  03D0  2BCB               	goto	u2327
  1900  03D1  0000               	nop
  1901                           
  1902                           ;launcher_functions.c: 344: sprintf(message, "%s%s,0%d,00,00,00*", startSequence, MID, x
      +                          );
  1903  03D2  300A               	movlw	low (STR_1| (0+32768))
  1904  03D3  0020               	movlb	0	; select bank0
  1905  03D4  00AE               	movwf	sprintf@f
  1906  03D5  3086               	movlw	high (STR_1| (0+32768))
  1907  03D6  00AF               	movwf	sprintf@f+1
  1908  03D7  305A               	movlw	SetupGPS@startSequence& (0+255)
  1909  03D8  00C1               	movwf	??_SetupGPS
  1910  03D9  0841               	movf	??_SetupGPS,w
  1911  03DA  00B0               	movwf	?_sprintf+2
  1912  03DB  3060               	movlw	SetupGPS@MID& (0+255)
  1913  03DC  00C2               	movwf	??_SetupGPS+1
  1914  03DD  0842               	movf	??_SetupGPS+1,w
  1915  03DE  00B1               	movwf	?_sprintf+3
  1916  03DF  0865               	movf	SetupGPS@x+1,w
  1917  03E0  01B3               	clrf	?_sprintf+5
  1918  03E1  07B3               	addwf	?_sprintf+5,f
  1919  03E2  0864               	movf	SetupGPS@x,w
  1920  03E3  01B2               	clrf	?_sprintf+4
  1921  03E4  07B2               	addwf	?_sprintf+4,f
  1922  03E5  3044               	movlw	SetupGPS@message& (0+255)
  1923  03E6  3182  2292  3183   	fcall	_sprintf
  1924                           
  1925                           ;launcher_functions.c: 345: uart_write_message(message, 22);
  1926  03E9  3016               	movlw	22
  1927  03EA  0020               	movlb	0	; select bank0
  1928  03EB  00A8               	movwf	uart_write_message@size
  1929  03EC  3000               	movlw	0
  1930  03ED  00A9               	movwf	uart_write_message@size+1
  1931  03EE  3044               	movlw	SetupGPS@message& (0+255)
  1932  03EF  3184  242A  3183   	fcall	_uart_write_message
  1933  03F2  3001               	movlw	1
  1934  03F3  0020               	movlb	0	; select bank0
  1935  03F4  07E4               	addwf	SetupGPS@x,f
  1936  03F5  3000               	movlw	0
  1937  03F6  3DE5               	addwfc	SetupGPS@x+1,f
  1938  03F7  0865               	movf	SetupGPS@x+1,w
  1939  03F8  3A80               	xorlw	128
  1940  03F9  00C1               	movwf	??_SetupGPS
  1941  03FA  3080               	movlw	128
  1942  03FB  0241               	subwf	??_SetupGPS,w
  1943  03FC  1D03               	skipz
  1944  03FD  2C00               	goto	u1565
  1945  03FE  3006               	movlw	6
  1946  03FF  0264               	subwf	SetupGPS@x,w
  1947  0400                     u1565:	
  1948  0400  1C03               	skipc
  1949  0401  2BC4               	goto	l2134
  1950  0402                     l2144:	
  1951                           
  1952                           ;launcher_functions.c: 346: }
  1953                           ;launcher_functions.c: 348: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1954  0402  3015               	movlw	21
  1955  0403  0020               	movlb	0	; select bank0
  1956  0404  00C3               	movwf	??_SetupGPS+2
  1957  0405  304B               	movlw	75
  1958  0406  00C2               	movwf	??_SetupGPS+1
  1959  0407  30D1               	movlw	209
  1960  0408  00C1               	movwf	??_SetupGPS
  1961  0409                     u2337:	
  1962  0409  0BC1               	decfsz	??_SetupGPS,f
  1963  040A  2C09               	goto	u2337
  1964  040B  0BC2               	decfsz	??_SetupGPS+1,f
  1965  040C  2C09               	goto	u2337
  1966  040D  0BC3               	decfsz	??_SetupGPS+2,f
  1967  040E  2C09               	goto	u2337
  1968  040F  0000               	nop
  1969                           
  1970                           ;launcher_functions.c: 350: sprintf(message, "%s%s,01,01,00,00*", startSequence, MID);
  1971  0410  301D               	movlw	low (STR_2| (0+32768))
  1972  0411  0020               	movlb	0	; select bank0
  1973  0412  00AE               	movwf	sprintf@f
  1974  0413  3086               	movlw	high (STR_2| (0+32768))
  1975  0414  00AF               	movwf	sprintf@f+1
  1976  0415  305A               	movlw	SetupGPS@startSequence& (0+255)
  1977  0416  00C1               	movwf	??_SetupGPS
  1978  0417  0841               	movf	??_SetupGPS,w
  1979  0418  00B0               	movwf	?_sprintf+2
  1980  0419  3060               	movlw	SetupGPS@MID& (0+255)
  1981  041A  00C2               	movwf	??_SetupGPS+1
  1982  041B  0842               	movf	??_SetupGPS+1,w
  1983  041C  00B1               	movwf	?_sprintf+3
  1984  041D  3044               	movlw	SetupGPS@message& (0+255)
  1985  041E  3182  2292  3183   	fcall	_sprintf
  1986                           
  1987                           ;launcher_functions.c: 351: uart_write_message(message, 22);
  1988  0421  3016               	movlw	22
  1989  0422  0020               	movlb	0	; select bank0
  1990  0423  00A8               	movwf	uart_write_message@size
  1991  0424  3000               	movlw	0
  1992  0425  00A9               	movwf	uart_write_message@size+1
  1993  0426  3044               	movlw	SetupGPS@message& (0+255)
  1994  0427  3184  242A         	fcall	_uart_write_message
  1995  0429  0008               	return
  1996  042A                     __end_of_SetupGPS:	
  1997                           
  1998                           	psect	text4
  1999  042A                     __ptext4:	
  2000 ;; *************** function _uart_write_message *****************
  2001 ;; Defined at:
  2002 ;;		line 289 in file "launcher_functions.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;  data            1    wreg     PTR unsigned char 
  2005 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  2006 ;;  size            2    8[BANK0 ] int 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;  data            1   20[BANK0 ] PTR unsigned char 
  2009 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  2010 ;;  ascii_checks    2   21[BANK0 ] unsigned char [2]
  2011 ;;  x               2   17[BANK0 ] int 
  2012 ;;  checksum        1   19[BANK0 ] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;		None               void
  2015 ;; Registers used:
  2016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:         0       2       0       0       0       0       0
  2023 ;;      Locals:         0      10       0       0       0       0       0
  2024 ;;      Temps:          0       3       0       0       0       0       0
  2025 ;;      Totals:         0      15       0       0       0       0       0
  2026 ;;Total ram usage:       15 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    3
  2029 ;; This function calls:
  2030 ;;		_compute_checksum
  2031 ;;		_uart_xmit
  2032 ;; This function is called by:
  2033 ;;		_SetupGPS
  2034 ;;		_DisableGPS
  2035 ;;		_UpdateGPS
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           
  2040                           ;psect for function _uart_write_message
  2041  042A                     _uart_write_message:	
  2042                           
  2043                           ;incstack = 0
  2044                           ; Regs used in _uart_write_message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2045                           ;uart_write_message@data stored from wreg
  2046  042A  0020               	movlb	0	; select bank0
  2047  042B  00B4               	movwf	uart_write_message@data
  2048                           
  2049                           ;launcher_functions.c: 291: int x;
  2050                           ;launcher_functions.c: 292: unsigned char checksum;
  2051                           ;launcher_functions.c: 293: unsigned char ascii_checksum[2];
  2052                           ;launcher_functions.c: 295: checksum = compute_checksum(data, size);
  2053  042C  0829               	movf	uart_write_message@size+1,w
  2054  042D  01A1               	clrf	compute_checksum@size+1
  2055  042E  07A1               	addwf	compute_checksum@size+1,f
  2056  042F  0828               	movf	uart_write_message@size,w
  2057  0430  01A0               	clrf	compute_checksum@size
  2058  0431  07A0               	addwf	compute_checksum@size,f
  2059  0432  0834               	movf	uart_write_message@data,w
  2060  0433  3185  2500  3184   	fcall	_compute_checksum
  2061  0436  0020               	movlb	0	; select bank0
  2062  0437  00AA               	movwf	??_uart_write_message
  2063  0438  082A               	movf	??_uart_write_message,w
  2064  0439  00B3               	movwf	uart_write_message@checksum
  2065                           
  2066                           ;launcher_functions.c: 296: ascii_checksum[0] = checksum >> 4;
  2067  043A  0833               	movf	uart_write_message@checksum,w
  2068  043B  00AA               	movwf	??_uart_write_message
  2069  043C  3004               	movlw	4
  2070  043D                     u1395:	
  2071  043D  36AA               	lsrf	??_uart_write_message,f
  2072  043E  0B89               	decfsz	9,f
  2073  043F  2C3D               	goto	u1395
  2074  0440  082A               	movf	??_uart_write_message,w
  2075  0441  00AB               	movwf	??_uart_write_message+1
  2076  0442  082B               	movf	??_uart_write_message+1,w
  2077  0443  00B5               	movwf	uart_write_message@ascii_checksum
  2078                           
  2079                           ;launcher_functions.c: 297: ascii_checksum[1] = checksum & 0x0F;
  2080  0444  0833               	movf	uart_write_message@checksum,w
  2081  0445  390F               	andlw	15
  2082  0446  00AA               	movwf	??_uart_write_message
  2083  0447  082A               	movf	??_uart_write_message,w
  2084  0448  00B6               	movwf	uart_write_message@ascii_checksum+1
  2085                           
  2086                           ;launcher_functions.c: 299: ascii_checksum[0] += (ascii_checksum[0] < 10 ? 48 : 55);
  2087  0449  300A               	movlw	10
  2088  044A  0235               	subwf	uart_write_message@ascii_checksum,w
  2089  044B  1C03               	skipc
  2090  044C  2C4F               	goto	l1894
  2091  044D  3037               	movlw	55
  2092  044E  2C50               	goto	L2
  2093  044F                     l1894:	
  2094  044F  3030               	movlw	48
  2095  0450                     L2:	
  2096  0450  00AD               	movwf	_uart_write_message$1328
  2097  0451  3000               	movlw	0
  2098  0452  00AE               	movwf	_uart_write_message$1328+1
  2099  0453  082D               	movf	_uart_write_message$1328,w
  2100  0454  00AA               	movwf	??_uart_write_message
  2101  0455  082A               	movf	??_uart_write_message,w
  2102  0456  07B5               	addwf	uart_write_message@ascii_checksum,f
  2103                           
  2104                           ;launcher_functions.c: 300: ascii_checksum[1] += (ascii_checksum[1] < 10 ? 48 : 55);
  2105  0457  300A               	movlw	10
  2106  0458  0236               	subwf	uart_write_message@ascii_checksum+1,w
  2107  0459  1C03               	skipc
  2108  045A  2C5D               	goto	l1902
  2109  045B  3037               	movlw	55
  2110  045C  2C5E               	goto	L3
  2111  045D                     l1902:	
  2112  045D  3030               	movlw	48
  2113  045E                     L3:	
  2114  045E  00AF               	movwf	_uart_write_message$1329
  2115  045F  3000               	movlw	0
  2116  0460  00B0               	movwf	_uart_write_message$1329+1
  2117  0461  082F               	movf	_uart_write_message$1329,w
  2118  0462  00AA               	movwf	??_uart_write_message
  2119  0463  082A               	movf	??_uart_write_message,w
  2120  0464  07B6               	addwf	uart_write_message@ascii_checksum+1,f
  2121                           
  2122                           ;launcher_functions.c: 302: for(x=0; x<size-1; x++)
  2123  0465  01B1               	clrf	uart_write_message@x
  2124  0466  01B2               	clrf	uart_write_message@x+1
  2125  0467                     l1912:	
  2126  0467  0828               	movf	uart_write_message@size,w
  2127  0468  3EFF               	addlw	255
  2128  0469  00AA               	movwf	??_uart_write_message
  2129  046A  30FF               	movlw	255
  2130  046B  3D29               	addwfc	uart_write_message@size+1,w
  2131  046C  00AB               	movwf	??_uart_write_message+1
  2132  046D  0832               	movf	uart_write_message@x+1,w
  2133  046E  3A80               	xorlw	128
  2134  046F  00AC               	movwf	??_uart_write_message+2
  2135  0470  082B               	movf	??_uart_write_message+1,w
  2136  0471  3A80               	xorlw	128
  2137  0472  022C               	subwf	??_uart_write_message+2,w
  2138  0473  1D03               	skipz
  2139  0474  2C77               	goto	u1425
  2140  0475  082A               	movf	??_uart_write_message,w
  2141  0476  0231               	subwf	uart_write_message@x,w
  2142  0477                     u1425:	
  2143  0477  1803               	btfsc	3,0
  2144  0478  2C8A               	goto	l1914
  2145                           
  2146                           ;launcher_functions.c: 303: {
  2147                           ;launcher_functions.c: 304: uart_xmit(data[x]);
  2148  0479  0020               	movlb	0	; select bank0
  2149  047A  0831               	movf	uart_write_message@x,w
  2150  047B  0734               	addwf	uart_write_message@data,w
  2151  047C  00AA               	movwf	??_uart_write_message
  2152  047D  082A               	movf	??_uart_write_message,w
  2153  047E  0086               	movwf	6
  2154  047F  0187               	clrf	7
  2155  0480  0801               	movf	1,w
  2156  0481  3187  27B3  3184   	fcall	_uart_xmit
  2157  0484  3001               	movlw	1
  2158  0485  0020               	movlb	0	; select bank0
  2159  0486  07B1               	addwf	uart_write_message@x,f
  2160  0487  3000               	movlw	0
  2161  0488  3DB2               	addwfc	uart_write_message@x+1,f
  2162  0489  2C67               	goto	l1912
  2163  048A                     l1914:	
  2164                           
  2165                           ;launcher_functions.c: 305: }
  2166                           ;launcher_functions.c: 306: uart_xmit(ascii_checksum[0]);
  2167  048A  0020               	movlb	0	; select bank0
  2168  048B  0835               	movf	uart_write_message@ascii_checksum,w
  2169  048C  3187  27B3  3184   	fcall	_uart_xmit
  2170                           
  2171                           ;launcher_functions.c: 307: uart_xmit(ascii_checksum[1]);
  2172  048F  0020               	movlb	0	; select bank0
  2173  0490  0836               	movf	uart_write_message@ascii_checksum+1,w
  2174  0491  3187  27B3  3184   	fcall	_uart_xmit
  2175                           
  2176                           ;launcher_functions.c: 309: uart_xmit(0x0D);
  2177  0494  300D               	movlw	13
  2178  0495  3187  27B3  3184   	fcall	_uart_xmit
  2179                           
  2180                           ;launcher_functions.c: 310: uart_xmit(0x0A);
  2181  0498  300A               	movlw	10
  2182  0499  3187  27B3  3184   	fcall	_uart_xmit
  2183  049C                     l333:	
  2184                           ;launcher_functions.c: 311: while(!TXSTAbits.TRMT);
  2185                           
  2186  049C  0023               	movlb	3	; select bank3
  2187  049D  189E               	btfsc	30,1	;volatile
  2188  049E  0008               	return
  2189  049F  2C9C               	goto	l333
  2190  04A0                     __end_of_uart_write_message:	
  2191                           
  2192                           	psect	text5
  2193  07B3                     __ptext5:	
  2194 ;; *************** function _uart_xmit *****************
  2195 ;; Defined at:
  2196 ;;		line 281 in file "launcher_functions.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  mydata_byte     1    wreg     unsigned char 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  mydata_byte     1    0[BANK0 ] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;		None               void
  2203 ;; Registers used:
  2204 ;;		wreg
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2210 ;;      Params:         0       0       0       0       0       0       0
  2211 ;;      Locals:         0       1       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0
  2213 ;;      Totals:         0       1       0       0       0       0       0
  2214 ;;Total ram usage:        1 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    2
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_uart_write_message
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           
  2225                           ;psect for function _uart_xmit
  2226  07B3                     _uart_xmit:	
  2227                           
  2228                           ;incstack = 0
  2229                           ; Regs used in _uart_xmit: [wreg]
  2230                           ;uart_xmit@mydata_byte stored from wreg
  2231  07B3  0020               	movlb	0	; select bank0
  2232  07B4  00A0               	movwf	uart_xmit@mydata_byte
  2233  07B5                     l316:	
  2234                           ;launcher_functions.c: 284: while(!TXSTAbits.TRMT);
  2235                           
  2236  07B5  0023               	movlb	3	; select bank3
  2237  07B6  1C9E               	btfss	30,1	;volatile
  2238  07B7  2FB5               	goto	l316
  2239                           
  2240                           ;launcher_functions.c: 285: TXREG = mydata_byte;
  2241  07B8  0020               	movlb	0	; select bank0
  2242  07B9  0820               	movf	uart_xmit@mydata_byte,w
  2243  07BA  0023               	movlb	3	; select bank3
  2244  07BB  009A               	movwf	26	;volatile
  2245  07BC  0008               	return
  2246  07BD                     __end_of_uart_xmit:	
  2247                           
  2248                           	psect	text6
  2249  0500                     __ptext6:	
  2250 ;; *************** function _compute_checksum *****************
  2251 ;; Defined at:
  2252 ;;		line 270 in file "launcher_functions.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  data            1    wreg     PTR unsigned char 
  2255 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  2256 ;;  size            2    0[BANK0 ] int 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  data            1    5[BANK0 ] PTR unsigned char 
  2259 ;;		 -> UpdateGPS@GPSupdateMessage(22), SetupGPS@message(22), DisableGPS@init_117(13), 
  2260 ;;  x               2    6[BANK0 ] int 
  2261 ;;  checksum        1    4[BANK0 ] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      unsigned char 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2271 ;;      Params:         0       2       0       0       0       0       0
  2272 ;;      Locals:         0       4       0       0       0       0       0
  2273 ;;      Temps:          0       2       0       0       0       0       0
  2274 ;;      Totals:         0       8       0       0       0       0       0
  2275 ;;Total ram usage:        8 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    2
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_uart_write_message
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _compute_checksum
  2287  0500                     _compute_checksum:	
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _compute_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  2291                           ;compute_checksum@data stored from wreg
  2292  0500  0020               	movlb	0	; select bank0
  2293  0501  00A5               	movwf	compute_checksum@data
  2294                           
  2295                           ;launcher_functions.c: 272: unsigned char checksum = 0;
  2296  0502  01A4               	clrf	compute_checksum@checksum
  2297                           
  2298                           ;launcher_functions.c: 273: int x;
  2299                           ;launcher_functions.c: 274: for(x=0; x<size; x++)
  2300  0503  01A6               	clrf	compute_checksum@x
  2301  0504  01A7               	clrf	compute_checksum@x+1
  2302  0505                     l1790:	
  2303  0505  0827               	movf	compute_checksum@x+1,w
  2304  0506  3A80               	xorlw	128
  2305  0507  00A2               	movwf	??_compute_checksum
  2306  0508  0821               	movf	compute_checksum@size+1,w
  2307  0509  3A80               	xorlw	128
  2308  050A  0222               	subwf	??_compute_checksum,w
  2309  050B  1D03               	skipz
  2310  050C  2D0F               	goto	u1185
  2311  050D  0820               	movf	compute_checksum@size,w
  2312  050E  0226               	subwf	compute_checksum@x,w
  2313  050F                     u1185:	
  2314  050F  1803               	btfsc	3,0
  2315  0510  2D3F               	goto	l1792
  2316                           
  2317                           ;launcher_functions.c: 275: {
  2318                           ;launcher_functions.c: 276: if ((data[x] != '$') && (data[x] != '*') && (data[x] != '!')
      +                          )
  2319  0511  0020               	movlb	0	; select bank0
  2320  0512  0826               	movf	compute_checksum@x,w
  2321  0513  0725               	addwf	compute_checksum@data,w
  2322  0514  00A2               	movwf	??_compute_checksum
  2323  0515  0822               	movf	??_compute_checksum,w
  2324  0516  0086               	movwf	6
  2325  0517  0187               	clrf	7
  2326  0518  0801               	movf	1,w
  2327  0519  3A24               	xorlw	36
  2328  051A  1903               	skipnz
  2329  051B  2D3A               	goto	l1788
  2330  051C  0826               	movf	compute_checksum@x,w
  2331  051D  0725               	addwf	compute_checksum@data,w
  2332  051E  00A2               	movwf	??_compute_checksum
  2333  051F  0822               	movf	??_compute_checksum,w
  2334  0520  0086               	movwf	6
  2335  0521  0187               	clrf	7
  2336  0522  0801               	movf	1,w
  2337  0523  3A2A               	xorlw	42
  2338  0524  1903               	skipnz
  2339  0525  2D3A               	goto	l1788
  2340  0526  0826               	movf	compute_checksum@x,w
  2341  0527  0725               	addwf	compute_checksum@data,w
  2342  0528  00A2               	movwf	??_compute_checksum
  2343  0529  0822               	movf	??_compute_checksum,w
  2344  052A  0086               	movwf	6
  2345  052B  0187               	clrf	7
  2346  052C  0801               	movf	1,w
  2347  052D  3A21               	xorlw	33
  2348  052E  1903               	skipnz
  2349  052F  2D3A               	goto	l1788
  2350                           
  2351                           ;launcher_functions.c: 277: checksum ^= data[x];
  2352  0530  0826               	movf	compute_checksum@x,w
  2353  0531  0725               	addwf	compute_checksum@data,w
  2354  0532  00A2               	movwf	??_compute_checksum
  2355  0533  0822               	movf	??_compute_checksum,w
  2356  0534  0086               	movwf	6
  2357  0535  0187               	clrf	7
  2358  0536  0801               	movf	1,w
  2359  0537  00A3               	movwf	??_compute_checksum+1
  2360  0538  0823               	movf	??_compute_checksum+1,w
  2361  0539  06A4               	xorwf	compute_checksum@checksum,f
  2362  053A                     l1788:	
  2363  053A  3001               	movlw	1
  2364  053B  07A6               	addwf	compute_checksum@x,f
  2365  053C  3000               	movlw	0
  2366  053D  3DA7               	addwfc	compute_checksum@x+1,f
  2367  053E  2D05               	goto	l1790
  2368  053F                     l1792:	
  2369                           
  2370                           ;launcher_functions.c: 278: }
  2371                           ;launcher_functions.c: 279: return checksum;
  2372  053F  0020               	movlb	0	; select bank0
  2373  0540  0824               	movf	compute_checksum@checksum,w
  2374  0541  0008               	return
  2375  0542                     __end_of_compute_checksum:	
  2376                           
  2377                           	psect	text7
  2378  0292                     __ptext7:	
  2379 ;; *************** function _sprintf *****************
  2380 ;; Defined at:
  2381 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  sp              1    wreg     PTR unsigned char 
  2384 ;;		 -> SetupGPS@message(22), 
  2385 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  2386 ;;		 -> STR_2(18), STR_1(19), 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  2389 ;;		 -> SetupGPS@message(22), 
  2390 ;;  _val            4   28[BANK0 ] struct .
  2391 ;;  c               1   32[BANK0 ] char 
  2392 ;;  ap              1   26[BANK0 ] PTR void [1]
  2393 ;;		 -> ?_sprintf(2), 
  2394 ;;  prec            1   25[BANK0 ] char 
  2395 ;;  flag            1   24[BANK0 ] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  2   14[BANK0 ] int 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2405 ;;      Params:         0       6       0       0       0       0       0
  2406 ;;      Locals:         0       9       0       0       0       0       0
  2407 ;;      Temps:          0       4       0       0       0       0       0
  2408 ;;      Totals:         0      19       0       0       0       0       0
  2409 ;;Total ram usage:       19 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    3
  2412 ;; This function calls:
  2413 ;;		___lwdiv
  2414 ;;		___lwmod
  2415 ;; This function is called by:
  2416 ;;		_SetupGPS
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           
  2421                           ;psect for function _sprintf
  2422  0292                     _sprintf:	
  2423                           
  2424                           ;incstack = 0
  2425                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2426                           ;sprintf@sp stored from wreg
  2427  0292  0020               	movlb	0	; select bank0
  2428  0293  00BB               	movwf	sprintf@sp
  2429                           
  2430                           ;doprnt.c: 494: va_list ap;
  2431                           ;doprnt.c: 499: signed char c;
  2432                           ;doprnt.c: 506: signed char prec;
  2433                           ;doprnt.c: 508: unsigned char flag;
  2434                           ;doprnt.c: 527: union {
  2435                           ;doprnt.c: 528: unsigned int _val;
  2436                           ;doprnt.c: 529: struct {
  2437                           ;doprnt.c: 530: const char * _cp;
  2438                           ;doprnt.c: 531: unsigned _len;
  2439                           ;doprnt.c: 532: } _str;
  2440                           ;doprnt.c: 533: } _val;
  2441                           ;doprnt.c: 542: *ap = __va_start();
  2442  0294  3030               	movlw	(?_sprintf+2)& (0+255)
  2443  0295  00B4               	movwf	??_sprintf
  2444  0296  0834               	movf	??_sprintf,w
  2445  0297  00BA               	movwf	sprintf@ap
  2446  0298                     l1984:	
  2447                           ;doprnt.c: 545: while(c = *f++) {
  2448                           
  2449  0298  082F               	movf	sprintf@f+1,w
  2450  0299  00B5               	movwf	??_sprintf+1
  2451  029A  082E               	movf	sprintf@f,w
  2452  029B  00B4               	movwf	??_sprintf
  2453  029C  0AAE               	incf	sprintf@f,f
  2454  029D  1903               	skipnz
  2455  029E  0AAF               	incf	sprintf@f+1,f
  2456  029F  0834               	movf	??_sprintf,w
  2457  02A0  0084               	movwf	4
  2458  02A1  0835               	movf	??_sprintf+1,w
  2459  02A2  0085               	movwf	5
  2460  02A3  0800               	movf	0,w	;code access
  2461  02A4  00B6               	movwf	??_sprintf+2
  2462  02A5  0836               	movf	??_sprintf+2,w
  2463  02A6  00C0               	movwf	sprintf@c
  2464  02A7  08C0               	movf	sprintf@c,f
  2465  02A8  1903               	btfsc	3,2
  2466  02A9  2B93               	goto	l1986
  2467                           
  2468                           ;doprnt.c: 547: if(c != '%')
  2469  02AA  0840               	movf	sprintf@c,w
  2470  02AB  3A25               	xorlw	37
  2471  02AC  1903               	skipnz
  2472  02AD  2ABA               	goto	l1924
  2473                           
  2474                           ;doprnt.c: 549: {
  2475                           ;doprnt.c: 550: ((*sp++ = (c)));
  2476  02AE  0840               	movf	sprintf@c,w
  2477  02AF  00B4               	movwf	??_sprintf
  2478  02B0  083B               	movf	sprintf@sp,w
  2479  02B1  0086               	movwf	6
  2480  02B2  0187               	clrf	7
  2481  02B3  0834               	movf	??_sprintf,w
  2482  02B4  0081               	movwf	1
  2483  02B5  3001               	movlw	1
  2484  02B6  00B4               	movwf	??_sprintf
  2485  02B7  0834               	movf	??_sprintf,w
  2486  02B8  07BB               	addwf	sprintf@sp,f
  2487                           
  2488                           ;doprnt.c: 551: continue;
  2489  02B9  2A98               	goto	l1984
  2490  02BA                     l1924:	
  2491                           
  2492                           ;doprnt.c: 552: }
  2493                           ;doprnt.c: 557: flag = 0;
  2494  02BA  01B8               	clrf	sprintf@flag
  2495                           
  2496                           ;doprnt.c: 644: switch(c = *f++) {
  2497  02BB  2AEB               	goto	l1944
  2498  02BC                     l1926:	
  2499                           ;doprnt.c: 737: case 's':
  2500                           
  2501                           ;doprnt.c: 707: case 'i':
  2502                           ;doprnt.c: 708: break;
  2503                           
  2504                           ;doprnt.c: 706: case 'd':
  2505                           
  2506                           ;doprnt.c: 647: goto alldone;
  2507                           
  2508                           ;doprnt.c: 646: case 0:
  2509                           
  2510                           
  2511                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  2512  02BC  083A               	movf	sprintf@ap,w
  2513  02BD  0086               	movwf	6
  2514  02BE  0187               	clrf	7
  2515  02BF  0801               	movf	1,w
  2516  02C0  00BC               	movwf	sprintf@_val
  2517  02C1  3000               	movlw	0
  2518  02C2  00BD               	movwf	sprintf@_val+1
  2519  02C3  3001               	movlw	1
  2520  02C4  00B4               	movwf	??_sprintf
  2521  02C5  0834               	movf	??_sprintf,w
  2522  02C6  07BA               	addwf	sprintf@ap,f
  2523                           
  2524                           ;doprnt.c: 749: if(!_val._str._cp)
  2525  02C7  083D               	movf	sprintf@_val+1,w
  2526  02C8  043C               	iorwf	sprintf@_val,w
  2527  02C9  1D03               	skipz
  2528  02CA  2ACF               	goto	l1940
  2529                           
  2530                           ;doprnt.c: 750: _val._str._cp = "(null)";
  2531  02CB  302F               	movlw	low (STR_3| (0+32768))
  2532  02CC  00BC               	movwf	sprintf@_val
  2533  02CD  3086               	movlw	high (STR_3| (0+32768))
  2534  02CE  00BD               	movwf	sprintf@_val+1
  2535  02CF                     l1940:	
  2536                           ;doprnt.c: 786: while(*_val._str._cp)
  2537                           
  2538  02CF  083C               	movf	sprintf@_val,w
  2539  02D0  0084               	movwf	4
  2540  02D1  083D               	movf	sprintf@_val+1,w
  2541  02D2  0085               	movwf	5
  2542  02D3  0800               	movf	0,w	;code access
  2543  02D4  3800               	iorlw	0
  2544  02D5  1903               	btfsc	3,2
  2545  02D6  2A98               	goto	l1984
  2546                           
  2547                           ;doprnt.c: 787: ((*sp++ = (*_val._str._cp++)));
  2548  02D7  083C               	movf	sprintf@_val,w
  2549  02D8  0084               	movwf	4
  2550  02D9  083D               	movf	sprintf@_val+1,w
  2551  02DA  0085               	movwf	5
  2552  02DB  0800               	movf	0,w	;code access
  2553  02DC  00B4               	movwf	??_sprintf
  2554  02DD  083B               	movf	sprintf@sp,w
  2555  02DE  0086               	movwf	6
  2556  02DF  0187               	clrf	7
  2557  02E0  0834               	movf	??_sprintf,w
  2558  02E1  0081               	movwf	1
  2559  02E2  3001               	movlw	1
  2560  02E3  07BC               	addwf	sprintf@_val,f
  2561  02E4  3000               	movlw	0
  2562  02E5  3DBD               	addwfc	sprintf@_val+1,f
  2563  02E6  3001               	movlw	1
  2564  02E7  00B4               	movwf	??_sprintf
  2565  02E8  0834               	movf	??_sprintf,w
  2566  02E9  07BB               	addwf	sprintf@sp,f
  2567  02EA  2ACF               	goto	l1940
  2568  02EB                     l1944:	
  2569                           ;doprnt.c: 831: }
  2570                           
  2571                           ;doprnt.c: 822: continue;
  2572                           
  2573                           ;doprnt.c: 811: default:
  2574                           
  2575                           ;doprnt.c: 788: continue;
  2576                           
  2577  02EB  082F               	movf	sprintf@f+1,w
  2578  02EC  00B5               	movwf	??_sprintf+1
  2579  02ED  082E               	movf	sprintf@f,w
  2580  02EE  00B4               	movwf	??_sprintf
  2581  02EF  0AAE               	incf	sprintf@f,f
  2582  02F0  1903               	skipnz
  2583  02F1  0AAF               	incf	sprintf@f+1,f
  2584  02F2  0834               	movf	??_sprintf,w
  2585  02F3  0084               	movwf	4
  2586  02F4  0835               	movf	??_sprintf+1,w
  2587  02F5  0085               	movwf	5
  2588  02F6  0800               	movf	0,w	;code access
  2589  02F7  00C0               	movwf	sprintf@c
  2590                           
  2591                           ; Switch size 1, requested type "space"
  2592                           ; Number of cases is 4, Range of values is 0 to 115
  2593                           ; switch strategies available:
  2594                           ; Name         Instructions Cycles
  2595                           ; simple_byte           13     7 (average)
  2596                           ; direct_byte          238     6 (fixed)
  2597                           ; jumptable            260     6 (fixed)
  2598                           ;	Chosen strategy is simple_byte
  2599  02F8  3A00               	xorlw	0	; case 0
  2600  02F9  1903               	skipnz
  2601  02FA  2B93               	goto	l1986
  2602  02FB  3A64               	xorlw	100	; case 100
  2603  02FC  1903               	skipnz
  2604  02FD  2B05               	goto	l1946
  2605  02FE  3A0D               	xorlw	13	; case 105
  2606  02FF  1903               	skipnz
  2607  0300  2B05               	goto	l1946
  2608  0301  3A1A               	xorlw	26	; case 115
  2609  0302  1903               	skipnz
  2610  0303  2ABC               	goto	l1926
  2611  0304  2A98               	goto	l1984
  2612  0305                     l1946:	
  2613                           
  2614                           ;doprnt.c: 1262: {
  2615                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2616  0305  083A               	movf	sprintf@ap,w
  2617  0306  0086               	movwf	6
  2618  0307  0187               	clrf	7
  2619  0308  3F40               	moviw [0]fsr1
  2620  0309  00BC               	movwf	sprintf@_val
  2621  030A  3F41               	moviw [1]fsr1
  2622  030B  00BD               	movwf	sprintf@_val+1
  2623  030C  3002               	movlw	2
  2624  030D  00B4               	movwf	??_sprintf
  2625  030E  0834               	movf	??_sprintf,w
  2626  030F  07BA               	addwf	sprintf@ap,f
  2627                           
  2628                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2629  0310  1FBD               	btfss	sprintf@_val+1,7
  2630  0311  2B1B               	goto	l1956
  2631                           
  2632                           ;doprnt.c: 1271: flag |= 0x03;
  2633  0312  3003               	movlw	3
  2634  0313  00B4               	movwf	??_sprintf
  2635  0314  0834               	movf	??_sprintf,w
  2636  0315  04B8               	iorwf	sprintf@flag,f
  2637                           
  2638                           ;doprnt.c: 1272: _val._val = -_val._val;
  2639  0316  09BC               	comf	sprintf@_val,f
  2640  0317  09BD               	comf	sprintf@_val+1,f
  2641  0318  0ABC               	incf	sprintf@_val,f
  2642  0319  1903               	skipnz
  2643  031A  0ABD               	incf	sprintf@_val+1,f
  2644  031B                     l1956:	
  2645                           
  2646                           ;doprnt.c: 1273: }
  2647                           ;doprnt.c: 1275: }
  2648                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2649  031B  01C0               	clrf	sprintf@c
  2650  031C  0AC0               	incf	sprintf@c,f
  2651  031D  0840               	movf	sprintf@c,w
  2652  031E  3A05               	xorlw	5
  2653  031F  1903               	btfsc	3,2
  2654  0320  2B40               	goto	l1968
  2655  0321                     l1960:	
  2656                           
  2657                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2658  0321  0840               	movf	sprintf@c,w
  2659  0322  00B4               	movwf	??_sprintf
  2660  0323  01B5               	clrf	??_sprintf+1
  2661  0324  35B4               	lslf	??_sprintf,f
  2662  0325  0DB5               	rlf	??_sprintf+1,f
  2663  0326  3000               	movlw	low (_dpowers| (0+32768))
  2664  0327  0734               	addwf	??_sprintf,w
  2665  0328  0084               	movwf	4
  2666  0329  3086               	movlw	high (_dpowers| (0+32768))
  2667  032A  3D35               	addwfc	??_sprintf+1,w
  2668  032B  0085               	movwf	5
  2669  032C  3F00               	moviw [0]fsr0
  2670  032D  00B6               	movwf	??_sprintf+2
  2671  032E  3F01               	moviw [1]fsr0
  2672  032F  00B7               	movwf	??_sprintf+3
  2673  0330  0837               	movf	??_sprintf+3,w
  2674  0331  023D               	subwf	sprintf@_val+1,w
  2675  0332  1D03               	skipz
  2676  0333  2B36               	goto	u1495
  2677  0334  0836               	movf	??_sprintf+2,w
  2678  0335  023C               	subwf	sprintf@_val,w
  2679  0336                     u1495:	
  2680  0336  1C03               	btfss	3,0
  2681  0337  2B40               	goto	l1968
  2682                           
  2683                           ;doprnt.c: 1316: break;
  2684  0338  3001               	movlw	1
  2685  0339  00B4               	movwf	??_sprintf
  2686  033A  0834               	movf	??_sprintf,w
  2687  033B  07C0               	addwf	sprintf@c,f
  2688  033C  0840               	movf	sprintf@c,w
  2689  033D  3A05               	xorlw	5
  2690  033E  1D03               	skipz
  2691  033F  2B21               	goto	l1960
  2692  0340                     l1968:	
  2693                           
  2694                           ;doprnt.c: 1431: {
  2695                           ;doprnt.c: 1447: if(flag & 0x03)
  2696  0340  0838               	movf	sprintf@flag,w
  2697  0341  3903               	andlw	3
  2698  0342  1903               	btfsc	3,2
  2699  0343  2B4F               	goto	l1974
  2700                           
  2701                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2702  0344  302D               	movlw	45
  2703  0345  00B4               	movwf	??_sprintf
  2704  0346  083B               	movf	sprintf@sp,w
  2705  0347  0086               	movwf	6
  2706  0348  0187               	clrf	7
  2707  0349  0834               	movf	??_sprintf,w
  2708  034A  0081               	movwf	1
  2709  034B  3001               	movlw	1
  2710  034C  00B4               	movwf	??_sprintf
  2711  034D  0834               	movf	??_sprintf,w
  2712  034E  07BB               	addwf	sprintf@sp,f
  2713  034F                     l1974:	
  2714                           
  2715                           ;doprnt.c: 1478: }
  2716                           ;doprnt.c: 1481: prec = c;
  2717  034F  0840               	movf	sprintf@c,w
  2718  0350  00B4               	movwf	??_sprintf
  2719  0351  0834               	movf	??_sprintf,w
  2720  0352  00B9               	movwf	sprintf@prec
  2721  0353                     l1982:	
  2722                           ;doprnt.c: 1483: while(prec--) {
  2723                           
  2724  0353  30FF               	movlw	-1
  2725  0354  00B4               	movwf	??_sprintf
  2726  0355  0834               	movf	??_sprintf,w
  2727  0356  07B9               	addwf	sprintf@prec,f
  2728  0357  0839               	movf	sprintf@prec,w
  2729  0358  3AFF               	xorlw	255
  2730  0359  1903               	btfsc	3,2
  2731  035A  2A98               	goto	l1984
  2732                           
  2733                           ;doprnt.c: 1487: {
  2734                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2735  035B  300A               	movlw	10
  2736  035C  00A8               	movwf	___lwmod@divisor
  2737  035D  3000               	movlw	0
  2738  035E  00A9               	movwf	___lwmod@divisor+1
  2739  035F  0839               	movf	sprintf@prec,w
  2740  0360  00B4               	movwf	??_sprintf
  2741  0361  01B5               	clrf	??_sprintf+1
  2742  0362  35B4               	lslf	??_sprintf,f
  2743  0363  0DB5               	rlf	??_sprintf+1,f
  2744  0364  3000               	movlw	low (_dpowers| (0+32768))
  2745  0365  0734               	addwf	??_sprintf,w
  2746  0366  0084               	movwf	4
  2747  0367  3086               	movlw	high (_dpowers| (0+32768))
  2748  0368  3D35               	addwfc	??_sprintf+1,w
  2749  0369  0085               	movwf	5
  2750  036A  3F00               	moviw [0]fsr0
  2751  036B  00A0               	movwf	___lwdiv@divisor
  2752  036C  3F01               	moviw [1]fsr0
  2753  036D  00A1               	movwf	___lwdiv@divisor+1
  2754  036E  083D               	movf	sprintf@_val+1,w
  2755  036F  01A3               	clrf	___lwdiv@dividend+1
  2756  0370  07A3               	addwf	___lwdiv@dividend+1,f
  2757  0371  083C               	movf	sprintf@_val,w
  2758  0372  01A2               	clrf	___lwdiv@dividend
  2759  0373  07A2               	addwf	___lwdiv@dividend,f
  2760  0374  3185  257C  3182   	fcall	___lwdiv
  2761  0377  0020               	movlb	0	; select bank0
  2762  0378  0821               	movf	?___lwdiv+1,w
  2763  0379  01AB               	clrf	___lwmod@dividend+1
  2764  037A  07AB               	addwf	___lwmod@dividend+1,f
  2765  037B  0820               	movf	?___lwdiv,w
  2766  037C  01AA               	clrf	___lwmod@dividend
  2767  037D  07AA               	addwf	___lwmod@dividend,f
  2768  037E  3186  2636  3182   	fcall	___lwmod
  2769  0381  0020               	movlb	0	; select bank0
  2770  0382  0828               	movf	?___lwmod,w
  2771  0383  3E30               	addlw	48
  2772  0384  00B6               	movwf	??_sprintf+2
  2773  0385  0836               	movf	??_sprintf+2,w
  2774  0386  00C0               	movwf	sprintf@c
  2775                           
  2776                           ;doprnt.c: 1532: }
  2777                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2778  0387  0840               	movf	sprintf@c,w
  2779  0388  00B4               	movwf	??_sprintf
  2780  0389  083B               	movf	sprintf@sp,w
  2781  038A  0086               	movwf	6
  2782  038B  0187               	clrf	7
  2783  038C  0834               	movf	??_sprintf,w
  2784  038D  0081               	movwf	1
  2785  038E  3001               	movlw	1
  2786  038F  00B4               	movwf	??_sprintf
  2787  0390  0834               	movf	??_sprintf,w
  2788  0391  07BB               	addwf	sprintf@sp,f
  2789  0392  2B53               	goto	l1982
  2790  0393                     l1986:	
  2791                           ;doprnt.c: 1534: }
  2792                           ;doprnt.c: 1542: }
  2793                           ;doprnt.c: 1544: alldone:
  2794                           
  2795                           
  2796                           ;doprnt.c: 1547: *sp = 0;
  2797  0393  083B               	movf	sprintf@sp,w
  2798  0394  0086               	movwf	6
  2799  0395  0187               	clrf	7
  2800  0396  0181               	clrf	1
  2801  0397  0008               	return
  2802  0398                     __end_of_sprintf:	
  2803                           ;doprnt.c: 1549: return 0;
  2804                           ;	Return value of _sprintf is never used
  2805                           
  2806                           
  2807                           	psect	text8
  2808  0636                     __ptext8:	
  2809 ;; *************** function ___lwmod *****************
  2810 ;; Defined at:
  2811 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  divisor         2    8[BANK0 ] unsigned int 
  2814 ;;  dividend        2   10[BANK0 ] unsigned int 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  counter         1   13[BANK0 ] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  2    8[BANK0 ] unsigned int 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2826 ;;      Params:         0       4       0       0       0       0       0
  2827 ;;      Locals:         0       1       0       0       0       0       0
  2828 ;;      Temps:          0       1       0       0       0       0       0
  2829 ;;      Totals:         0       6       0       0       0       0       0
  2830 ;;Total ram usage:        6 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    2
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_sprintf
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function ___lwmod
  2842  0636                     ___lwmod:	
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2846  0636  0020               	movlb	0	; select bank0
  2847  0637  0829               	movf	___lwmod@divisor+1,w
  2848  0638  0428               	iorwf	___lwmod@divisor,w
  2849  0639  1903               	skipnz
  2850  063A  2E5E               	goto	l1844
  2851  063B  01AD               	clrf	___lwmod@counter
  2852  063C  0AAD               	incf	___lwmod@counter,f
  2853  063D                     l1834:	
  2854  063D  1BA9               	btfsc	___lwmod@divisor+1,7
  2855  063E  2E49               	goto	l1836
  2856  063F  3001               	movlw	1
  2857  0640                     u1285:	
  2858  0640  35A8               	lslf	___lwmod@divisor,f
  2859  0641  0DA9               	rlf	___lwmod@divisor+1,f
  2860  0642  0B89               	decfsz	9,f
  2861  0643  2E40               	goto	u1285
  2862  0644  3001               	movlw	1
  2863  0645  00AC               	movwf	??___lwmod
  2864  0646  082C               	movf	??___lwmod,w
  2865  0647  07AD               	addwf	___lwmod@counter,f
  2866  0648  2E3D               	goto	l1834
  2867  0649                     l1836:	
  2868  0649  0829               	movf	___lwmod@divisor+1,w
  2869  064A  022B               	subwf	___lwmod@dividend+1,w
  2870  064B  1D03               	skipz
  2871  064C  2E4F               	goto	u1305
  2872  064D  0828               	movf	___lwmod@divisor,w
  2873  064E  022A               	subwf	___lwmod@dividend,w
  2874  064F                     u1305:	
  2875  064F  1C03               	skipc
  2876  0650  2E55               	goto	l1840
  2877  0651  0828               	movf	___lwmod@divisor,w
  2878  0652  02AA               	subwf	___lwmod@dividend,f
  2879  0653  0829               	movf	___lwmod@divisor+1,w
  2880  0654  3BAB               	subwfb	___lwmod@dividend+1,f
  2881  0655                     l1840:	
  2882  0655  3001               	movlw	1
  2883  0656                     u1315:	
  2884  0656  36A9               	lsrf	___lwmod@divisor+1,f
  2885  0657  0CA8               	rrf	___lwmod@divisor,f
  2886  0658  0B89               	decfsz	9,f
  2887  0659  2E56               	goto	u1315
  2888  065A  3001               	movlw	1
  2889  065B  02AD               	subwf	___lwmod@counter,f
  2890  065C  1D03               	btfss	3,2
  2891  065D  2E49               	goto	l1836
  2892  065E                     l1844:	
  2893  065E  082B               	movf	___lwmod@dividend+1,w
  2894  065F  01A9               	clrf	?___lwmod+1
  2895  0660  07A9               	addwf	?___lwmod+1,f
  2896  0661  082A               	movf	___lwmod@dividend,w
  2897  0662  01A8               	clrf	?___lwmod
  2898  0663  07A8               	addwf	?___lwmod,f
  2899  0664  0008               	return
  2900  0665                     __end_of___lwmod:	
  2901                           
  2902                           	psect	text9
  2903  057C                     __ptext9:	
  2904 ;; *************** function ___lwdiv *****************
  2905 ;; Defined at:
  2906 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  divisor         2    0[BANK0 ] unsigned int 
  2909 ;;  dividend        2    2[BANK0 ] unsigned int 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  quotient        2    5[BANK0 ] unsigned int 
  2912 ;;  counter         1    7[BANK0 ] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  2    0[BANK0 ] unsigned int 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2, status,0
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2922 ;;      Params:         0       4       0       0       0       0       0
  2923 ;;      Locals:         0       3       0       0       0       0       0
  2924 ;;      Temps:          0       1       0       0       0       0       0
  2925 ;;      Totals:         0       8       0       0       0       0       0
  2926 ;;Total ram usage:        8 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    2
  2929 ;; This function calls:
  2930 ;;		Nothing
  2931 ;; This function is called by:
  2932 ;;		_sprintf
  2933 ;;		_DecodeGPS
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           
  2938                           ;psect for function ___lwdiv
  2939  057C                     ___lwdiv:	
  2940                           
  2941                           ;incstack = 0
  2942                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2943  057C  0020               	movlb	0	; select bank0
  2944  057D  01A5               	clrf	___lwdiv@quotient
  2945  057E  01A6               	clrf	___lwdiv@quotient+1
  2946  057F  0821               	movf	___lwdiv@divisor+1,w
  2947  0580  0420               	iorwf	___lwdiv@divisor,w
  2948  0581  1903               	skipnz
  2949  0582  2DAC               	goto	l1822
  2950  0583  01A7               	clrf	___lwdiv@counter
  2951  0584  0AA7               	incf	___lwdiv@counter,f
  2952  0585                     l1810:	
  2953  0585  1BA1               	btfsc	___lwdiv@divisor+1,7
  2954  0586  2D91               	goto	l1812
  2955  0587  3001               	movlw	1
  2956  0588                     u1215:	
  2957  0588  35A0               	lslf	___lwdiv@divisor,f
  2958  0589  0DA1               	rlf	___lwdiv@divisor+1,f
  2959  058A  0B89               	decfsz	9,f
  2960  058B  2D88               	goto	u1215
  2961  058C  3001               	movlw	1
  2962  058D  00A4               	movwf	??___lwdiv
  2963  058E  0824               	movf	??___lwdiv,w
  2964  058F  07A7               	addwf	___lwdiv@counter,f
  2965  0590  2D85               	goto	l1810
  2966  0591                     l1812:	
  2967  0591  3001               	movlw	1
  2968  0592                     u1235:	
  2969  0592  35A5               	lslf	___lwdiv@quotient,f
  2970  0593  0DA6               	rlf	___lwdiv@quotient+1,f
  2971  0594  0B89               	decfsz	9,f
  2972  0595  2D92               	goto	u1235
  2973  0596  0821               	movf	___lwdiv@divisor+1,w
  2974  0597  0223               	subwf	___lwdiv@dividend+1,w
  2975  0598  1D03               	skipz
  2976  0599  2D9C               	goto	u1245
  2977  059A  0820               	movf	___lwdiv@divisor,w
  2978  059B  0222               	subwf	___lwdiv@dividend,w
  2979  059C                     u1245:	
  2980  059C  1C03               	skipc
  2981  059D  2DA3               	goto	l1818
  2982  059E  0820               	movf	___lwdiv@divisor,w
  2983  059F  02A2               	subwf	___lwdiv@dividend,f
  2984  05A0  0821               	movf	___lwdiv@divisor+1,w
  2985  05A1  3BA3               	subwfb	___lwdiv@dividend+1,f
  2986  05A2  1425               	bsf	___lwdiv@quotient,0
  2987  05A3                     l1818:	
  2988  05A3  3001               	movlw	1
  2989  05A4                     u1255:	
  2990  05A4  36A1               	lsrf	___lwdiv@divisor+1,f
  2991  05A5  0CA0               	rrf	___lwdiv@divisor,f
  2992  05A6  0B89               	decfsz	9,f
  2993  05A7  2DA4               	goto	u1255
  2994  05A8  3001               	movlw	1
  2995  05A9  02A7               	subwf	___lwdiv@counter,f
  2996  05AA  1D03               	btfss	3,2
  2997  05AB  2D91               	goto	l1812
  2998  05AC                     l1822:	
  2999  05AC  0826               	movf	___lwdiv@quotient+1,w
  3000  05AD  01A1               	clrf	?___lwdiv+1
  3001  05AE  07A1               	addwf	?___lwdiv+1,f
  3002  05AF  0825               	movf	___lwdiv@quotient,w
  3003  05B0  01A0               	clrf	?___lwdiv
  3004  05B1  07A0               	addwf	?___lwdiv,f
  3005  05B2  0008               	return
  3006  05B3                     __end_of___lwdiv:	
  3007                           
  3008                           	psect	text10
  3009  0121                     __ptext10:	
  3010 ;; *************** function _RecordMode *****************
  3011 ;; Defined at:
  3012 ;;		line 513 in file "launcher_functions.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  address         4   28[BANK0 ] long 
  3017 ;;  x               2   32[BANK0 ] int 
  3018 ;;  count           2   26[BANK0 ] int 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;		None               void
  3021 ;; Registers used:
  3022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         0       0       0       0       0       0       0
  3029 ;;      Locals:         0       8       0       0       0       0       0
  3030 ;;      Temps:          0       5       0       0       0       0       0
  3031 ;;      Totals:         0      13       0       0       0       0       0
  3032 ;;Total ram usage:       13 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    5
  3035 ;; This function calls:
  3036 ;;		_ReadBuffer
  3037 ;;		_WriteBuffer
  3038 ;;		_WriteOverheadSPI
  3039 ;;		_WriteSPI
  3040 ;; This function is called by:
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _RecordMode
  3047  0121                     _RecordMode:	
  3048                           
  3049                           ;launcher_functions.c: 515: long int address = 0;
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in _RecordMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3053  0121  3000               	movlw	0
  3054  0122  0020               	movlb	0	; select bank0
  3055  0123  00BF               	movwf	RecordMode@address+3
  3056  0124  3000               	movlw	0
  3057  0125  00BE               	movwf	RecordMode@address+2
  3058  0126  3000               	movlw	0
  3059  0127  00BD               	movwf	RecordMode@address+1
  3060  0128  3000               	movlw	0
  3061  0129  00BC               	movwf	RecordMode@address
  3062                           
  3063                           ;launcher_functions.c: 516: int count = 0;
  3064  012A  01BA               	clrf	RecordMode@count
  3065  012B  01BB               	clrf	RecordMode@count+1
  3066                           
  3067                           ;launcher_functions.c: 517: int x;
  3068                           ;launcher_functions.c: 519: (start) = 0;
  3069  012C  01FB               	clrf	_start
  3070  012D  01FC               	clrf	_start+1
  3071                           
  3072                           ;launcher_functions.c: 520: (end) = 0;
  3073  012E  01F9               	clrf	_end
  3074  012F  01FA               	clrf	_end+1
  3075                           
  3076                           ;launcher_functions.c: 523: WriteOverheadSPI(address);
  3077  0130  083F               	movf	RecordMode@address+3,w
  3078  0131  00AA               	movwf	WriteOverheadSPI@address+3
  3079  0132  083E               	movf	RecordMode@address+2,w
  3080  0133  00A9               	movwf	WriteOverheadSPI@address+2
  3081  0134  083D               	movf	RecordMode@address+1,w
  3082  0135  00A8               	movwf	WriteOverheadSPI@address+1
  3083  0136  083C               	movf	RecordMode@address,w
  3084  0137  00A7               	movwf	WriteOverheadSPI@address
  3085  0138  3184  24A0  3181   	fcall	_WriteOverheadSPI
  3086                           
  3087                           ;launcher_functions.c: 524: for(x=0;x<3;x++)
  3088  013B  0020               	movlb	0	; select bank0
  3089  013C  01C0               	clrf	RecordMode@x
  3090  013D  01C1               	clrf	RecordMode@x+1
  3091  013E  0841               	movf	RecordMode@x+1,w
  3092  013F  3A80               	xorlw	128
  3093  0140  00B5               	movwf	??_RecordMode
  3094  0141  3080               	movlw	128
  3095  0142  0235               	subwf	??_RecordMode,w
  3096  0143  1D03               	skipz
  3097  0144  2947               	goto	u1575
  3098  0145  3003               	movlw	3
  3099  0146  0240               	subwf	RecordMode@x,w
  3100  0147                     u1575:	
  3101  0147  1803               	btfsc	3,0
  3102  0148  296F               	goto	l2172
  3103  0149                     l2166:	
  3104                           
  3105                           ;launcher_functions.c: 525: {
  3106                           ;launcher_functions.c: 526: WriteBuffer(validLongitude[x]);
  3107  0149  0020               	movlb	0	; select bank0
  3108  014A  3540               	lslf	RecordMode@x,w
  3109  014B  3ED0               	addlw	_validLongitude& (0+255)
  3110  014C  0086               	movwf	6
  3111  014D  0187               	clrf	7
  3112  014E  0801               	movf	1,w
  3113  014F  3186  26F6  3181   	fcall	_WriteBuffer
  3114                           
  3115                           ;launcher_functions.c: 527: WriteBuffer(validLongitude[x]>>8);
  3116  0152  0020               	movlb	0	; select bank0
  3117  0153  3540               	lslf	RecordMode@x,w
  3118  0154  3ED0               	addlw	_validLongitude& (0+255)
  3119  0155  0086               	movwf	6
  3120  0156  0187               	clrf	7
  3121  0157  3F40               	moviw [0]fsr1
  3122  0158  00B5               	movwf	??_RecordMode
  3123  0159  3F41               	moviw [1]fsr1
  3124  015A  00B6               	movwf	??_RecordMode+1
  3125  015B  0836               	movf	??_RecordMode+1,w
  3126  015C  3186  26F6  3181   	fcall	_WriteBuffer
  3127  015F  3001               	movlw	1
  3128  0160  0020               	movlb	0	; select bank0
  3129  0161  07C0               	addwf	RecordMode@x,f
  3130  0162  3000               	movlw	0
  3131  0163  3DC1               	addwfc	RecordMode@x+1,f
  3132  0164  0841               	movf	RecordMode@x+1,w
  3133  0165  3A80               	xorlw	128
  3134  0166  00B5               	movwf	??_RecordMode
  3135  0167  3080               	movlw	128
  3136  0168  0235               	subwf	??_RecordMode,w
  3137  0169  1D03               	skipz
  3138  016A  296D               	goto	u1585
  3139  016B  3003               	movlw	3
  3140  016C  0240               	subwf	RecordMode@x,w
  3141  016D                     u1585:	
  3142  016D  1C03               	skipc
  3143  016E  2949               	goto	l2166
  3144  016F                     l2172:	
  3145                           
  3146                           ;launcher_functions.c: 528: }
  3147                           ;launcher_functions.c: 529: WriteBuffer(validNorthSouth);
  3148  016F  0020               	movlb	0	; select bank0
  3149  0170  086F               	movf	_validNorthSouth,w
  3150  0171  3186  26F6  3181   	fcall	_WriteBuffer
  3151                           
  3152                           ;launcher_functions.c: 530: for(x=0;x<3;x++)
  3153  0174  0020               	movlb	0	; select bank0
  3154  0175  01C0               	clrf	RecordMode@x
  3155  0176  01C1               	clrf	RecordMode@x+1
  3156  0177  0841               	movf	RecordMode@x+1,w
  3157  0178  3A80               	xorlw	128
  3158  0179  00B5               	movwf	??_RecordMode
  3159  017A  3080               	movlw	128
  3160  017B  0235               	subwf	??_RecordMode,w
  3161  017C  1D03               	skipz
  3162  017D  2980               	goto	u1595
  3163  017E  3003               	movlw	3
  3164  017F  0240               	subwf	RecordMode@x,w
  3165  0180                     u1595:	
  3166  0180  1803               	btfsc	3,0
  3167  0181  29A8               	goto	l2186
  3168  0182                     l2180:	
  3169                           
  3170                           ;launcher_functions.c: 531: {
  3171                           ;launcher_functions.c: 532: WriteBuffer(validLatitude[x]);
  3172  0182  0020               	movlb	0	; select bank0
  3173  0183  3540               	lslf	RecordMode@x,w
  3174  0184  3ECA               	addlw	_validLatitude& (0+255)
  3175  0185  0086               	movwf	6
  3176  0186  0187               	clrf	7
  3177  0187  0801               	movf	1,w
  3178  0188  3186  26F6  3181   	fcall	_WriteBuffer
  3179                           
  3180                           ;launcher_functions.c: 533: WriteBuffer(validLatitude[x]>>8);
  3181  018B  0020               	movlb	0	; select bank0
  3182  018C  3540               	lslf	RecordMode@x,w
  3183  018D  3ECA               	addlw	_validLatitude& (0+255)
  3184  018E  0086               	movwf	6
  3185  018F  0187               	clrf	7
  3186  0190  3F40               	moviw [0]fsr1
  3187  0191  00B5               	movwf	??_RecordMode
  3188  0192  3F41               	moviw [1]fsr1
  3189  0193  00B6               	movwf	??_RecordMode+1
  3190  0194  0836               	movf	??_RecordMode+1,w
  3191  0195  3186  26F6  3181   	fcall	_WriteBuffer
  3192  0198  3001               	movlw	1
  3193  0199  0020               	movlb	0	; select bank0
  3194  019A  07C0               	addwf	RecordMode@x,f
  3195  019B  3000               	movlw	0
  3196  019C  3DC1               	addwfc	RecordMode@x+1,f
  3197  019D  0841               	movf	RecordMode@x+1,w
  3198  019E  3A80               	xorlw	128
  3199  019F  00B5               	movwf	??_RecordMode
  3200  01A0  3080               	movlw	128
  3201  01A1  0235               	subwf	??_RecordMode,w
  3202  01A2  1D03               	skipz
  3203  01A3  29A6               	goto	u1605
  3204  01A4  3003               	movlw	3
  3205  01A5  0240               	subwf	RecordMode@x,w
  3206  01A6                     u1605:	
  3207  01A6  1C03               	skipc
  3208  01A7  2982               	goto	l2180
  3209  01A8                     l2186:	
  3210                           
  3211                           ;launcher_functions.c: 534: }
  3212                           ;launcher_functions.c: 535: WriteBuffer(validEastWest);
  3213  01A8  0020               	movlb	0	; select bank0
  3214  01A9  086E               	movf	_validEastWest,w
  3215  01AA  3186  26F6  3181   	fcall	_WriteBuffer
  3216                           
  3217                           ;launcher_functions.c: 537: TMR1IF = 0;
  3218  01AD  0020               	movlb	0	; select bank0
  3219  01AE  1011               	bcf	17,0	;volatile
  3220                           
  3221                           ;launcher_functions.c: 538: TMR1IE = 1;
  3222  01AF  0021               	movlb	1	; select bank1
  3223  01B0  1411               	bsf	17,0	;volatile
  3224                           
  3225                           ;launcher_functions.c: 539: TMR1ON = 1;
  3226  01B1  0020               	movlb	0	; select bank0
  3227  01B2  1418               	bsf	24,0	;volatile
  3228                           
  3229                           ;launcher_functions.c: 541: while(((recordFlag) || !((((start))==((end)))?(1):(0))) && (
      +                          address < 131072))
  3230  01B3  29EA               	goto	l2210
  3231  01B4                     l2194:	
  3232                           
  3233                           ;launcher_functions.c: 542: {
  3234                           ;launcher_functions.c: 543: if(count>=256)
  3235  01B4  083B               	movf	RecordMode@count+1,w
  3236  01B5  3A80               	xorlw	128
  3237  01B6  00B5               	movwf	??_RecordMode
  3238  01B7  3081               	movlw	129
  3239  01B8  0235               	subwf	??_RecordMode,w
  3240  01B9  1D03               	skipz
  3241  01BA  29BD               	goto	u1615
  3242  01BB  3000               	movlw	0
  3243  01BC  023A               	subwf	RecordMode@count,w
  3244  01BD                     u1615:	
  3245  01BD  1C03               	skipc
  3246  01BE  29CF               	goto	l2202
  3247                           
  3248                           ;launcher_functions.c: 544: {
  3249                           ;launcher_functions.c: 545: LATC2 = (1);
  3250  01BF  0022               	movlb	2	; select bank2
  3251  01C0  150E               	bsf	14,2	;volatile
  3252                           
  3253                           ;launcher_functions.c: 546: count = 0;
  3254  01C1  0020               	movlb	0	; select bank0
  3255  01C2  01BA               	clrf	RecordMode@count
  3256  01C3  01BB               	clrf	RecordMode@count+1
  3257                           
  3258                           ;launcher_functions.c: 547: WriteOverheadSPI(address);
  3259  01C4  083F               	movf	RecordMode@address+3,w
  3260  01C5  00AA               	movwf	WriteOverheadSPI@address+3
  3261  01C6  083E               	movf	RecordMode@address+2,w
  3262  01C7  00A9               	movwf	WriteOverheadSPI@address+2
  3263  01C8  083D               	movf	RecordMode@address+1,w
  3264  01C9  00A8               	movwf	WriteOverheadSPI@address+1
  3265  01CA  083C               	movf	RecordMode@address,w
  3266  01CB  00A7               	movwf	WriteOverheadSPI@address
  3267  01CC  3184  24A0  3181   	fcall	_WriteOverheadSPI
  3268  01CF                     l2202:	
  3269                           
  3270                           ;launcher_functions.c: 548: }
  3271                           ;launcher_functions.c: 549: if(!((((start))==((end)))?(1):(0)))
  3272  01CF  087A               	movf	_end+1,w
  3273  01D0  067C               	xorwf	_start+1,w
  3274  01D1  1D03               	skipz
  3275  01D2  29D5               	goto	u1625
  3276  01D3  0879               	movf	_end,w
  3277  01D4  067B               	xorwf	_start,w
  3278  01D5                     u1625:	
  3279  01D5  1903               	skipnz
  3280  01D6  29EA               	goto	l2210
  3281                           
  3282                           ;launcher_functions.c: 550: {
  3283                           ;launcher_functions.c: 551: WriteSPI(ReadBuffer());
  3284  01D7  3187  270E  3181   	fcall	_ReadBuffer
  3285  01DA  3187  2753  3181   	fcall	_WriteSPI
  3286                           
  3287                           ;launcher_functions.c: 552: address++;
  3288  01DD  3001               	movlw	1
  3289  01DE  0020               	movlb	0	; select bank0
  3290  01DF  07BC               	addwf	RecordMode@address,f
  3291  01E0  3000               	movlw	0
  3292  01E1  3DBD               	addwfc	RecordMode@address+1,f
  3293  01E2  3000               	movlw	0
  3294  01E3  3DBE               	addwfc	RecordMode@address+2,f
  3295  01E4  3000               	movlw	0
  3296  01E5  3DBF               	addwfc	RecordMode@address+3,f
  3297                           
  3298                           ;launcher_functions.c: 553: count++;
  3299  01E6  3001               	movlw	1
  3300  01E7  07BA               	addwf	RecordMode@count,f
  3301  01E8  3000               	movlw	0
  3302  01E9  3DBB               	addwfc	RecordMode@count+1,f
  3303  01EA                     l2210:	
  3304  01EA  0020               	movlb	0	; select bank0
  3305  01EB  08ED               	movf	_recordFlag,f
  3306  01EC  1D03               	skipz
  3307  01ED  29F6               	goto	l2214
  3308  01EE  087A               	movf	_end+1,w
  3309  01EF  067C               	xorwf	_start+1,w
  3310  01F0  1D03               	skipz
  3311  01F1  29F4               	goto	u1645
  3312  01F2  0879               	movf	_end,w
  3313  01F3  067B               	xorwf	_start,w
  3314  01F4                     u1645:	
  3315  01F4  1903               	skipnz
  3316  01F5  2A0A               	goto	l412
  3317  01F6                     l2214:	
  3318  01F6  083F               	movf	RecordMode@address+3,w
  3319  01F7  3A80               	xorlw	128
  3320  01F8  00B5               	movwf	??_RecordMode
  3321  01F9  3000               	movlw	0
  3322  01FA  3A80               	xorlw	128
  3323  01FB  0235               	subwf	??_RecordMode,w
  3324  01FC  1D03               	skipz
  3325  01FD  2A08               	goto	u1653
  3326  01FE  3002               	movlw	2
  3327  01FF  023E               	subwf	RecordMode@address+2,w
  3328  0200  1D03               	skipz
  3329  0201  2A08               	goto	u1653
  3330  0202  3000               	movlw	0
  3331  0203  023D               	subwf	RecordMode@address+1,w
  3332  0204  1D03               	skipz
  3333  0205  2A08               	goto	u1653
  3334  0206  3000               	movlw	0
  3335  0207  023C               	subwf	RecordMode@address,w
  3336  0208                     u1653:	
  3337  0208  1C03               	skipc
  3338  0209  29B4               	goto	l2194
  3339  020A                     l412:	
  3340                           
  3341                           ;launcher_functions.c: 554: }
  3342                           ;launcher_functions.c: 556: }
  3343                           ;launcher_functions.c: 557: LATC2 = (1);
  3344  020A  0022               	movlb	2	; select bank2
  3345  020B  150E               	bsf	14,2	;volatile
  3346                           
  3347                           ;launcher_functions.c: 558: TMR1IE = 0;
  3348  020C  0021               	movlb	1	; select bank1
  3349  020D  1011               	bcf	17,0	;volatile
  3350                           
  3351                           ;launcher_functions.c: 559: TMR1ON = 0;
  3352  020E  0020               	movlb	0	; select bank0
  3353  020F  1018               	bcf	24,0	;volatile
  3354                           
  3355                           ;launcher_functions.c: 560: _delay((unsigned long)((5)*(16000000/4000.0)));
  3356  0210  301A               	movlw	26
  3357  0211  00B6               	movwf	??_RecordMode+1
  3358  0212  30F8               	movlw	248
  3359  0213  00B5               	movwf	??_RecordMode
  3360  0214                     u2347:	
  3361  0214  0BB5               	decfsz	??_RecordMode,f
  3362  0215  2A14               	goto	u2347
  3363  0216  0BB6               	decfsz	??_RecordMode+1,f
  3364  0217  2A14               	goto	u2347
  3365  0218  0000               	nop
  3366                           
  3367                           ;launcher_functions.c: 561: WriteOverheadSPI(0-4);
  3368  0219  30FF               	movlw	255
  3369  021A  0020               	movlb	0	; select bank0
  3370  021B  00AA               	movwf	WriteOverheadSPI@address+3
  3371  021C  30FF               	movlw	255
  3372  021D  00A9               	movwf	WriteOverheadSPI@address+2
  3373  021E  30FF               	movlw	255
  3374  021F  00A8               	movwf	WriteOverheadSPI@address+1
  3375  0220  30FC               	movlw	252
  3376  0221  00A7               	movwf	WriteOverheadSPI@address
  3377  0222  3184  24A0  3181   	fcall	_WriteOverheadSPI
  3378                           
  3379                           ;launcher_functions.c: 562: if(address >= 131072)
  3380  0225  0020               	movlb	0	; select bank0
  3381  0226  083F               	movf	RecordMode@address+3,w
  3382  0227  3A80               	xorlw	128
  3383  0228  00B5               	movwf	??_RecordMode
  3384  0229  3000               	movlw	0
  3385  022A  3A80               	xorlw	128
  3386  022B  0235               	subwf	??_RecordMode,w
  3387  022C  1D03               	skipz
  3388  022D  2A38               	goto	u1663
  3389  022E  3002               	movlw	2
  3390  022F  023E               	subwf	RecordMode@address+2,w
  3391  0230  1D03               	skipz
  3392  0231  2A38               	goto	u1663
  3393  0232  3000               	movlw	0
  3394  0233  023D               	subwf	RecordMode@address+1,w
  3395  0234  1D03               	skipz
  3396  0235  2A38               	goto	u1663
  3397  0236  3000               	movlw	0
  3398  0237  023C               	subwf	RecordMode@address,w
  3399  0238                     u1663:	
  3400  0238  1C03               	skipc
  3401  0239  2A48               	goto	l2224
  3402                           
  3403                           ;launcher_functions.c: 563: {
  3404                           ;launcher_functions.c: 564: WriteSPI(131072 - 1);
  3405  023A  30FF               	movlw	255
  3406  023B  3187  2753  3181   	fcall	_WriteSPI
  3407                           
  3408                           ;launcher_functions.c: 565: WriteSPI((131072 - 1)>>8);
  3409  023E  30FF               	movlw	255
  3410  023F  3187  2753  3181   	fcall	_WriteSPI
  3411                           
  3412                           ;launcher_functions.c: 566: WriteSPI((131072 - 1)>>16);
  3413  0242  3001               	movlw	1
  3414  0243  3187  2753  3181   	fcall	_WriteSPI
  3415                           
  3416                           ;launcher_functions.c: 567: WriteSPI((131072 - 1)>>24);
  3417  0246  3000               	movlw	0
  3418  0247  2A89               	goto	L4
  3419  0248                     l2224:	
  3420                           ;launcher_functions.c: 568: }
  3421                           
  3422                           
  3423                           ;launcher_functions.c: 569: else
  3424                           ;launcher_functions.c: 570: {
  3425                           ;launcher_functions.c: 571: WriteSPI(address);
  3426  0248  0020               	movlb	0	; select bank0
  3427  0249  083C               	movf	RecordMode@address,w
  3428  024A  3187  2753  3181   	fcall	_WriteSPI
  3429                           
  3430                           ;launcher_functions.c: 572: WriteSPI(address>>8);
  3431  024D  0020               	movlb	0	; select bank0
  3432  024E  083C               	movf	RecordMode@address,w
  3433  024F  00B5               	movwf	??_RecordMode
  3434  0250  083D               	movf	RecordMode@address+1,w
  3435  0251  00B6               	movwf	??_RecordMode+1
  3436  0252  083E               	movf	RecordMode@address+2,w
  3437  0253  00B7               	movwf	??_RecordMode+2
  3438  0254  083F               	movf	RecordMode@address+3,w
  3439  0255  00B8               	movwf	??_RecordMode+3
  3440  0256  3008               	movlw	8
  3441  0257  00B9               	movwf	??_RecordMode+4
  3442  0258                     u1675:	
  3443  0258  37B8               	asrf	??_RecordMode+3,f
  3444  0259  0CB7               	rrf	??_RecordMode+2,f
  3445  025A  0CB6               	rrf	??_RecordMode+1,f
  3446  025B  0CB5               	rrf	??_RecordMode,f
  3447  025C  0BB9               	decfsz	??_RecordMode+4,f
  3448  025D  2A58               	goto	u1675
  3449  025E  0835               	movf	??_RecordMode,w
  3450  025F  3187  2753  3181   	fcall	_WriteSPI
  3451                           
  3452                           ;launcher_functions.c: 573: WriteSPI(address>>16);
  3453  0262  0020               	movlb	0	; select bank0
  3454  0263  083C               	movf	RecordMode@address,w
  3455  0264  00B5               	movwf	??_RecordMode
  3456  0265  083D               	movf	RecordMode@address+1,w
  3457  0266  00B6               	movwf	??_RecordMode+1
  3458  0267  083E               	movf	RecordMode@address+2,w
  3459  0268  00B7               	movwf	??_RecordMode+2
  3460  0269  083F               	movf	RecordMode@address+3,w
  3461  026A  00B8               	movwf	??_RecordMode+3
  3462  026B  3010               	movlw	16
  3463  026C  00B9               	movwf	??_RecordMode+4
  3464  026D                     u1685:	
  3465  026D  37B8               	asrf	??_RecordMode+3,f
  3466  026E  0CB7               	rrf	??_RecordMode+2,f
  3467  026F  0CB6               	rrf	??_RecordMode+1,f
  3468  0270  0CB5               	rrf	??_RecordMode,f
  3469  0271  0BB9               	decfsz	??_RecordMode+4,f
  3470  0272  2A6D               	goto	u1685
  3471  0273  0835               	movf	??_RecordMode,w
  3472  0274  3187  2753  3181   	fcall	_WriteSPI
  3473                           
  3474                           ;launcher_functions.c: 574: WriteSPI(address>>24);
  3475  0277  0020               	movlb	0	; select bank0
  3476  0278  083C               	movf	RecordMode@address,w
  3477  0279  00B5               	movwf	??_RecordMode
  3478  027A  083D               	movf	RecordMode@address+1,w
  3479  027B  00B6               	movwf	??_RecordMode+1
  3480  027C  083E               	movf	RecordMode@address+2,w
  3481  027D  00B7               	movwf	??_RecordMode+2
  3482  027E  083F               	movf	RecordMode@address+3,w
  3483  027F  00B8               	movwf	??_RecordMode+3
  3484  0280  3018               	movlw	24
  3485  0281  00B9               	movwf	??_RecordMode+4
  3486  0282                     u1695:	
  3487  0282  37B8               	asrf	??_RecordMode+3,f
  3488  0283  0CB7               	rrf	??_RecordMode+2,f
  3489  0284  0CB6               	rrf	??_RecordMode+1,f
  3490  0285  0CB5               	rrf	??_RecordMode,f
  3491  0286  0BB9               	decfsz	??_RecordMode+4,f
  3492  0287  2A82               	goto	u1695
  3493  0288  0835               	movf	??_RecordMode,w
  3494  0289                     L4:	
  3495  0289  3187  2753         	fcall	_WriteSPI
  3496                           
  3497                           ;launcher_functions.c: 575: }
  3498                           ;launcher_functions.c: 576: LATC2 = (1);
  3499  028B  0022               	movlb	2	; select bank2
  3500  028C  150E               	bsf	14,2	;volatile
  3501                           
  3502                           ;launcher_functions.c: 577: (start) = 0;
  3503  028D  01FB               	clrf	_start
  3504  028E  01FC               	clrf	_start+1
  3505                           
  3506                           ;launcher_functions.c: 578: (end) = 0;
  3507  028F  01F9               	clrf	_end
  3508  0290  01FA               	clrf	_end+1
  3509  0291  0008               	return
  3510  0292                     __end_of_RecordMode:	
  3511                           
  3512                           	psect	text11
  3513  04A0                     __ptext11:	
  3514 ;; *************** function _WriteOverheadSPI *****************
  3515 ;; Defined at:
  3516 ;;		line 168 in file "launcher_functions.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  address         4    7[BANK0 ] long 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  address_byte    3   17[BANK0 ] unsigned char [3]
  3521 ;;  StatusReg       1   20[BANK0 ] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;		None               void
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, status,0, pclath, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3531 ;;      Params:         0       4       0       0       0       0       0
  3532 ;;      Locals:         0       4       0       0       0       0       0
  3533 ;;      Temps:          0       6       0       0       0       0       0
  3534 ;;      Totals:         0      14       0       0       0       0       0
  3535 ;;Total ram usage:       14 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    4
  3538 ;; This function calls:
  3539 ;;		_ReadStatusSPI
  3540 ;;		_WriteSPI
  3541 ;; This function is called by:
  3542 ;;		_RecordMode
  3543 ;;		_PreRecordMode
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           
  3548                           ;psect for function _WriteOverheadSPI
  3549  04A0                     _WriteOverheadSPI:	
  3550                           
  3551                           ;launcher_functions.c: 170: unsigned char address_bytes[3];
  3552                           ;launcher_functions.c: 171: unsigned char StatusReg;
  3553                           ;launcher_functions.c: 173: address_bytes[0]=(unsigned char)(address>>16);
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _WriteOverheadSPI: [wreg+status,2+status,0+pclath+cstack]
  3557  04A0  0020               	movlb	0	; select bank0
  3558  04A1  0827               	movf	WriteOverheadSPI@address,w
  3559  04A2  00AB               	movwf	??_WriteOverheadSPI
  3560  04A3  0828               	movf	WriteOverheadSPI@address+1,w
  3561  04A4  00AC               	movwf	??_WriteOverheadSPI+1
  3562  04A5  0829               	movf	WriteOverheadSPI@address+2,w
  3563  04A6  00AD               	movwf	??_WriteOverheadSPI+2
  3564  04A7  082A               	movf	WriteOverheadSPI@address+3,w
  3565  04A8  00AE               	movwf	??_WriteOverheadSPI+3
  3566  04A9  3010               	movlw	16
  3567  04AA  00AF               	movwf	??_WriteOverheadSPI+4
  3568  04AB                     u1345:	
  3569  04AB  37AE               	asrf	??_WriteOverheadSPI+3,f
  3570  04AC  0CAD               	rrf	??_WriteOverheadSPI+2,f
  3571  04AD  0CAC               	rrf	??_WriteOverheadSPI+1,f
  3572  04AE  0CAB               	rrf	??_WriteOverheadSPI,f
  3573  04AF  0BAF               	decfsz	??_WriteOverheadSPI+4,f
  3574  04B0  2CAB               	goto	u1345
  3575  04B1  082B               	movf	??_WriteOverheadSPI,w
  3576  04B2  00B0               	movwf	??_WriteOverheadSPI+5
  3577  04B3  0830               	movf	??_WriteOverheadSPI+5,w
  3578  04B4  00B1               	movwf	WriteOverheadSPI@address_bytes
  3579                           
  3580                           ;launcher_functions.c: 174: address_bytes[1]=(unsigned char)(address>>8);
  3581  04B5  0827               	movf	WriteOverheadSPI@address,w
  3582  04B6  00AB               	movwf	??_WriteOverheadSPI
  3583  04B7  0828               	movf	WriteOverheadSPI@address+1,w
  3584  04B8  00AC               	movwf	??_WriteOverheadSPI+1
  3585  04B9  0829               	movf	WriteOverheadSPI@address+2,w
  3586  04BA  00AD               	movwf	??_WriteOverheadSPI+2
  3587  04BB  082A               	movf	WriteOverheadSPI@address+3,w
  3588  04BC  00AE               	movwf	??_WriteOverheadSPI+3
  3589  04BD  3008               	movlw	8
  3590  04BE  00AF               	movwf	??_WriteOverheadSPI+4
  3591  04BF                     u1355:	
  3592  04BF  37AE               	asrf	??_WriteOverheadSPI+3,f
  3593  04C0  0CAD               	rrf	??_WriteOverheadSPI+2,f
  3594  04C1  0CAC               	rrf	??_WriteOverheadSPI+1,f
  3595  04C2  0CAB               	rrf	??_WriteOverheadSPI,f
  3596  04C3  0BAF               	decfsz	??_WriteOverheadSPI+4,f
  3597  04C4  2CBF               	goto	u1355
  3598  04C5  082B               	movf	??_WriteOverheadSPI,w
  3599  04C6  00B0               	movwf	??_WriteOverheadSPI+5
  3600  04C7  0830               	movf	??_WriteOverheadSPI+5,w
  3601  04C8  00B2               	movwf	WriteOverheadSPI@address_bytes+1
  3602                           
  3603                           ;launcher_functions.c: 175: address_bytes[2]=(unsigned char)(address);
  3604  04C9  0827               	movf	WriteOverheadSPI@address,w
  3605  04CA  00AB               	movwf	??_WriteOverheadSPI
  3606  04CB  082B               	movf	??_WriteOverheadSPI,w
  3607  04CC  00B3               	movwf	WriteOverheadSPI@address_bytes+2
  3608  04CD                     l1860:	
  3609                           ;launcher_functions.c: 177: do
  3610                           
  3611                           
  3612                           ;launcher_functions.c: 178: {
  3613                           ;launcher_functions.c: 179: StatusReg = (ReadStatusSPI() & 0x01);
  3614  04CD  3187  2778  3184   	fcall	_ReadStatusSPI
  3615  04D0  3901               	andlw	1
  3616  04D1  0020               	movlb	0	; select bank0
  3617  04D2  00AB               	movwf	??_WriteOverheadSPI
  3618  04D3  082B               	movf	??_WriteOverheadSPI,w
  3619  04D4  00B4               	movwf	WriteOverheadSPI@StatusReg
  3620                           
  3621                           ;launcher_functions.c: 180: } while (StatusReg);
  3622  04D5  08B4               	movf	WriteOverheadSPI@StatusReg,f
  3623  04D6  1D03               	skipz
  3624  04D7  2CCD               	goto	l1860
  3625                           
  3626                           ;launcher_functions.c: 183: LATC2 = (0);
  3627  04D8  0022               	movlb	2	; select bank2
  3628  04D9  110E               	bcf	14,2	;volatile
  3629                           
  3630                           ;launcher_functions.c: 184: WriteSPI((0x06));
  3631  04DA  3006               	movlw	6
  3632  04DB  3187  2753  3184   	fcall	_WriteSPI
  3633                           
  3634                           ;launcher_functions.c: 185: LATC2 = (1);
  3635  04DE  0022               	movlb	2	; select bank2
  3636  04DF  150E               	bsf	14,2	;volatile
  3637  04E0                     l286:	
  3638                           ;launcher_functions.c: 187: do
  3639                           
  3640                           
  3641                           ;launcher_functions.c: 188: {
  3642                           ;launcher_functions.c: 189: StatusReg = (ReadStatusSPI() & 0x02);
  3643  04E0  3187  2778  3184   	fcall	_ReadStatusSPI
  3644  04E3  3902               	andlw	2
  3645  04E4  0020               	movlb	0	; select bank0
  3646  04E5  00AB               	movwf	??_WriteOverheadSPI
  3647  04E6  082B               	movf	??_WriteOverheadSPI,w
  3648  04E7  00B4               	movwf	WriteOverheadSPI@StatusReg
  3649                           
  3650                           ;launcher_functions.c: 190: } while (!StatusReg);
  3651  04E8  0834               	movf	WriteOverheadSPI@StatusReg,w
  3652  04E9  1903               	btfsc	3,2
  3653  04EA  2CE0               	goto	l286
  3654                           
  3655                           ;launcher_functions.c: 194: LATC2=(0);
  3656  04EB  0022               	movlb	2	; select bank2
  3657  04EC  110E               	bcf	14,2	;volatile
  3658                           
  3659                           ;launcher_functions.c: 195: WriteSPI((0x02));
  3660  04ED  3002               	movlw	2
  3661  04EE  3187  2753  3184   	fcall	_WriteSPI
  3662                           
  3663                           ;launcher_functions.c: 196: WriteSPI(address_bytes[0]);
  3664  04F1  0020               	movlb	0	; select bank0
  3665  04F2  0831               	movf	WriteOverheadSPI@address_bytes,w
  3666  04F3  3187  2753  3184   	fcall	_WriteSPI
  3667                           
  3668                           ;launcher_functions.c: 197: WriteSPI(address_bytes[1]);
  3669  04F6  0020               	movlb	0	; select bank0
  3670  04F7  0832               	movf	WriteOverheadSPI@address_bytes+1,w
  3671  04F8  3187  2753  3184   	fcall	_WriteSPI
  3672                           
  3673                           ;launcher_functions.c: 198: WriteSPI(address_bytes[2]);
  3674  04FB  0020               	movlb	0	; select bank0
  3675  04FC  0833               	movf	WriteOverheadSPI@address_bytes+2,w
  3676  04FD  3187  2753         	fcall	_WriteSPI
  3677  04FF  0008               	return
  3678  0500                     __end_of_WriteOverheadSPI:	
  3679                           ;launcher_functions.c: 200: return;
  3680                           
  3681                           
  3682                           	psect	text12
  3683  0778                     __ptext12:	
  3684 ;; *************** function _ReadStatusSPI *****************
  3685 ;; Defined at:
  3686 ;;		line 156 in file "launcher_functions.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;		None
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  dataRead        1    6[BANK0 ] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      unsigned char 
  3693 ;; Registers used:
  3694 ;;		wreg, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3700 ;;      Params:         0       0       0       0       0       0       0
  3701 ;;      Locals:         0       1       0       0       0       0       0
  3702 ;;      Temps:          0       1       0       0       0       0       0
  3703 ;;      Totals:         0       2       0       0       0       0       0
  3704 ;;Total ram usage:        2 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    3
  3707 ;; This function calls:
  3708 ;;		_ReadSPI
  3709 ;;		_WriteSPI
  3710 ;; This function is called by:
  3711 ;;		_WriteOverheadSPI
  3712 ;;		_ReadOverheadSPI
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _ReadStatusSPI
  3718  0778                     _ReadStatusSPI:	
  3719                           
  3720                           ;launcher_functions.c: 158: unsigned char dataRead;
  3721                           ;launcher_functions.c: 160: LATC2=(0);
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _ReadStatusSPI: [wreg+status,2+status,0+pclath+cstack]
  3725  0778  0022               	movlb	2	; select bank2
  3726  0779  110E               	bcf	14,2	;volatile
  3727                           
  3728                           ;launcher_functions.c: 161: WriteSPI((0x05));
  3729  077A  3005               	movlw	5
  3730  077B  3187  2753  3187   	fcall	_WriteSPI
  3731                           
  3732                           ;launcher_functions.c: 162: dataRead = ReadSPI();
  3733  077E  3187  27A7         	fcall	_ReadSPI
  3734  0780  0020               	movlb	0	; select bank0
  3735  0781  00A5               	movwf	??_ReadStatusSPI
  3736  0782  0825               	movf	??_ReadStatusSPI,w
  3737  0783  00A6               	movwf	ReadStatusSPI@dataRead
  3738                           
  3739                           ;launcher_functions.c: 163: LATC2=(1);
  3740  0784  0022               	movlb	2	; select bank2
  3741  0785  150E               	bsf	14,2	;volatile
  3742                           
  3743                           ;launcher_functions.c: 165: return(dataRead);
  3744  0786  0020               	movlb	0	; select bank0
  3745  0787  0826               	movf	ReadStatusSPI@dataRead,w
  3746  0788  0008               	return
  3747  0789                     __end_of_ReadStatusSPI:	
  3748                           
  3749                           	psect	text13
  3750  0753                     __ptext13:	
  3751 ;; *************** function _WriteSPI *****************
  3752 ;; Defined at:
  3753 ;;		line 136 in file "launcher_functions.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  databyte        1    wreg     unsigned char 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  databyte        1    4[BANK0 ] unsigned char 
  3758 ;;  temp            2    2[BANK0 ] unsigned int 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;		None               void
  3761 ;; Registers used:
  3762 ;;		wreg
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3768 ;;      Params:         0       0       0       0       0       0       0
  3769 ;;      Locals:         0       3       0       0       0       0       0
  3770 ;;      Temps:          0       2       0       0       0       0       0
  3771 ;;      Totals:         0       5       0       0       0       0       0
  3772 ;;Total ram usage:        5 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:    2
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_ReadStatusSPI
  3779 ;;		_WriteOverheadSPI
  3780 ;;		_RecordMode
  3781 ;;		_ReadOverheadSPI
  3782 ;;		_PreRecordMode
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           
  3787                           ;psect for function _WriteSPI
  3788  0753                     _WriteSPI:	
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _WriteSPI: [wreg]
  3792                           ;WriteSPI@databyte stored from wreg
  3793  0753  0020               	movlb	0	; select bank0
  3794  0754  00A4               	movwf	WriteSPI@databyte
  3795                           
  3796                           ;launcher_functions.c: 138: unsigned int temp;
  3797                           ;launcher_functions.c: 139: temp = SSPBUF;
  3798  0755  0024               	movlb	4	; select bank4
  3799  0756  0811               	movf	17,w	;volatile
  3800  0757  0020               	movlb	0	; select bank0
  3801  0758  00A0               	movwf	??_WriteSPI
  3802  0759  01A1               	clrf	??_WriteSPI+1
  3803  075A  0820               	movf	??_WriteSPI,w
  3804  075B  00A2               	movwf	WriteSPI@temp
  3805  075C  0821               	movf	??_WriteSPI+1,w
  3806  075D  00A3               	movwf	WriteSPI@temp+1
  3807                           
  3808                           ;launcher_functions.c: 140: PIR1bits.SSP1IF=0;
  3809  075E  1191               	bcf	17,3	;volatile
  3810                           
  3811                           ;launcher_functions.c: 141: SSPBUF = databyte;
  3812  075F  0824               	movf	WriteSPI@databyte,w
  3813  0760  0024               	movlb	4	; select bank4
  3814  0761  0091               	movwf	17	;volatile
  3815  0762                     l269:	
  3816                           ;launcher_functions.c: 142: while(!PIR1bits.SSP1IF);
  3817                           
  3818  0762  0020               	movlb	0	; select bank0
  3819  0763  1991               	btfsc	17,3	;volatile
  3820  0764  0008               	return
  3821  0765  2F62               	goto	l269
  3822  0766                     __end_of_WriteSPI:	
  3823                           
  3824                           	psect	text14
  3825  07A7                     __ptext14:	
  3826 ;; *************** function _ReadSPI *****************
  3827 ;; Defined at:
  3828 ;;		line 145 in file "launcher_functions.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  dataByte        1    1[BANK0 ] unsigned char 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      unsigned char 
  3835 ;; Registers used:
  3836 ;;		wreg, status,2
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3842 ;;      Params:         0       0       0       0       0       0       0
  3843 ;;      Locals:         0       1       0       0       0       0       0
  3844 ;;      Temps:          0       1       0       0       0       0       0
  3845 ;;      Totals:         0       2       0       0       0       0       0
  3846 ;;Total ram usage:        2 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    2
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_ReadStatusSPI
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _ReadSPI
  3858  07A7                     _ReadSPI:	
  3859                           
  3860                           ;launcher_functions.c: 147: unsigned char dataByte;
  3861                           ;launcher_functions.c: 149: SSPBUF = 0x00;
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in _ReadSPI: [wreg+status,2]
  3865  07A7  0024               	movlb	4	; select bank4
  3866  07A8  0191               	clrf	17	;volatile
  3867  07A9                     l275:	
  3868                           ;launcher_functions.c: 150: while(!SSPSTATbits.BF);
  3869                           
  3870  07A9  1C14               	btfss	20,0	;volatile
  3871  07AA  2FA9               	goto	l275
  3872                           
  3873                           ;launcher_functions.c: 151: dataByte = SSPBUF;
  3874  07AB  0811               	movf	17,w	;volatile
  3875  07AC  0020               	movlb	0	; select bank0
  3876  07AD  00A0               	movwf	??_ReadSPI
  3877  07AE  0820               	movf	??_ReadSPI,w
  3878  07AF  00A1               	movwf	ReadSPI@dataByte
  3879                           
  3880                           ;launcher_functions.c: 152: PIR1bits.SSP1IF=0;
  3881  07B0  1191               	bcf	17,3	;volatile
  3882                           
  3883                           ;launcher_functions.c: 153: return (dataByte);
  3884  07B1  0821               	movf	ReadSPI@dataByte,w
  3885  07B2  0008               	return
  3886  07B3                     __end_of_ReadSPI:	
  3887                           
  3888                           	psect	text15
  3889  06F6                     __ptext15:	
  3890 ;; *************** function _WriteBuffer *****************
  3891 ;; Defined at:
  3892 ;;		line 205 in file "launcher_functions.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  data            1    wreg     unsigned char 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  data            1    1[BANK0 ] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;		None               void
  3899 ;; Registers used:
  3900 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3906 ;;      Params:         0       0       0       0       0       0       0
  3907 ;;      Locals:         0       1       0       0       0       0       0
  3908 ;;      Temps:          0       1       0       0       0       0       0
  3909 ;;      Totals:         0       2       0       0       0       0       0
  3910 ;;Total ram usage:        2 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    2
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		_RecordMode
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _WriteBuffer
  3922  06F6                     _WriteBuffer:	
  3923                           
  3924                           ;incstack = 0
  3925                           ; Regs used in _WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  3926                           ;WriteBuffer@data stored from wreg
  3927  06F6  0020               	movlb	0	; select bank0
  3928  06F7  00A1               	movwf	WriteBuffer@data
  3929                           
  3930                           ;launcher_functions.c: 207: buffer[end] = data;
  3931  06F8  0821               	movf	WriteBuffer@data,w
  3932  06F9  00A0               	movwf	??_WriteBuffer
  3933  06FA  0879               	movf	_end,w
  3934  06FB  3EA0               	addlw	_buffer& (0+255)
  3935  06FC  0086               	movwf	6
  3936  06FD  3001               	movlw	1	; select bank3/4
  3937  06FE  0087               	movwf	7
  3938  06FF  0820               	movf	??_WriteBuffer,w
  3939  0700  0081               	movwf	1
  3940                           
  3941                           ;launcher_functions.c: 209: if (end == 51)
  3942  0701  3033               	movlw	51
  3943  0702  0679               	xorwf	_end,w
  3944  0703  047A               	iorwf	_end+1,w
  3945  0704  1D03               	skipz
  3946  0705  2F09               	goto	l1854
  3947                           
  3948                           ;launcher_functions.c: 210: end = 0;
  3949  0706  01F9               	clrf	_end
  3950  0707  01FA               	clrf	_end+1
  3951  0708  0008               	return
  3952  0709                     l1854:	
  3953                           
  3954                           ;launcher_functions.c: 211: else
  3955                           ;launcher_functions.c: 212: end++;
  3956  0709  3001               	movlw	1
  3957  070A  07F9               	addwf	_end,f
  3958  070B  3000               	movlw	0
  3959  070C  3DFA               	addwfc	_end+1,f
  3960  070D  0008               	return
  3961  070E                     __end_of_WriteBuffer:	
  3962                           
  3963                           	psect	text16
  3964  070E                     __ptext16:	
  3965 ;; *************** function _ReadBuffer *****************
  3966 ;; Defined at:
  3967 ;;		line 215 in file "launcher_functions.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  read_data       1    1[BANK0 ] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      unsigned char 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3981 ;;      Params:         0       0       0       0       0       0       0
  3982 ;;      Locals:         0       1       0       0       0       0       0
  3983 ;;      Temps:          0       1       0       0       0       0       0
  3984 ;;      Totals:         0       2       0       0       0       0       0
  3985 ;;Total ram usage:        2 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    2
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_RecordMode
  3992 ;;		_PreRecordMode
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           
  3997                           ;psect for function _ReadBuffer
  3998  070E                     _ReadBuffer:	
  3999                           
  4000                           ;launcher_functions.c: 217: unsigned char read_data;
  4001                           ;launcher_functions.c: 219: read_data = buffer[start];
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  4005  070E  087B               	movf	_start,w
  4006  070F  3EA0               	addlw	_buffer& (0+255)
  4007  0710  0086               	movwf	6
  4008  0711  3001               	movlw	1	; select bank3/4
  4009  0712  0087               	movwf	7
  4010  0713  0801               	movf	1,w
  4011  0714  0020               	movlb	0	; select bank0
  4012  0715  00A0               	movwf	??_ReadBuffer
  4013  0716  0820               	movf	??_ReadBuffer,w
  4014  0717  00A1               	movwf	ReadBuffer@read_data
  4015                           
  4016                           ;launcher_functions.c: 220: if (start == 51)
  4017  0718  3033               	movlw	51
  4018  0719  067B               	xorwf	_start,w
  4019  071A  047C               	iorwf	_start+1,w
  4020  071B  1D03               	skipz
  4021  071C  2F20               	goto	l1880
  4022                           
  4023                           ;launcher_functions.c: 221: start = 0;
  4024  071D  01FB               	clrf	_start
  4025  071E  01FC               	clrf	_start+1
  4026  071F  2F24               	goto	l297
  4027  0720                     l1880:	
  4028                           
  4029                           ;launcher_functions.c: 222: else
  4030                           ;launcher_functions.c: 223: start++;
  4031  0720  3001               	movlw	1
  4032  0721  07FB               	addwf	_start,f
  4033  0722  3000               	movlw	0
  4034  0723  3DFC               	addwfc	_start+1,f
  4035  0724                     l297:	
  4036                           
  4037                           ;launcher_functions.c: 224: return read_data;
  4038  0724  0821               	movf	ReadBuffer@read_data,w
  4039  0725  0008               	return
  4040  0726                     __end_of_ReadBuffer:	
  4041                           
  4042                           	psect	text17
  4043  07C5                     __ptext17:	
  4044 ;; *************** function _InitWatchdog *****************
  4045 ;; Defined at:
  4046 ;;		line 127 in file "launcher_functions.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;		None               void
  4053 ;; Registers used:
  4054 ;;		wreg, status,2, status,0
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4060 ;;      Params:         0       0       0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    2
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_main
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _InitWatchdog
  4076  07C5                     _InitWatchdog:	
  4077                           
  4078                           ;launcher_functions.c: 130: WDTCONbits.WDTPS = 0x0A;
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _InitWatchdog: [wreg+status,2+status,0]
  4082  07C5  0021               	movlb	1	; select bank1
  4083  07C6  0817               	movf	23,w	;volatile
  4084  07C7  39C1               	andlw	-63
  4085  07C8  3814               	iorlw	20
  4086  07C9  0097               	movwf	23	;volatile
  4087                           
  4088                           ;launcher_functions.c: 131: WDTCONbits.SWDTEN = 0;
  4089  07CA  1017               	bcf	23,0	;volatile
  4090  07CB  0008               	return
  4091  07CC                     __end_of_InitWatchdog:	
  4092                           
  4093                           	psect	text18
  4094  0798                     __ptext18:	
  4095 ;; *************** function _InitTimer1 *****************
  4096 ;; Defined at:
  4097 ;;		line 96 in file "launcher_functions.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;		None               void
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4111 ;;      Params:         0       0       0       0       0       0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0
  4114 ;;      Totals:         0       0       0       0       0       0       0
  4115 ;;Total ram usage:        0 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    2
  4118 ;; This function calls:
  4119 ;;		Nothing
  4120 ;; This function is called by:
  4121 ;;		_main
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           
  4126                           ;psect for function _InitTimer1
  4127  0798                     _InitTimer1:	
  4128                           
  4129                           ;launcher_functions.c: 98: T1CONbits.TMR1CS = 0;
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _InitTimer1: [wreg+status,2+status,0]
  4133  0798  303F               	movlw	-193
  4134  0799  0020               	movlb	0	; select bank0
  4135  079A  0598               	andwf	24,f	;volatile
  4136                           
  4137                           ;launcher_functions.c: 99: T1CONbits.T1CKPS = 2;
  4138  079B  0818               	movf	24,w	;volatile
  4139  079C  39CF               	andlw	-49
  4140  079D  3820               	iorlw	32
  4141  079E  0098               	movwf	24	;volatile
  4142                           
  4143                           ;launcher_functions.c: 100: T1CONbits.nT1SYNC = 1;
  4144  079F  1518               	bsf	24,2	;volatile
  4145                           
  4146                           ;launcher_functions.c: 101: T1GCONbits.TMR1GE = 0;
  4147  07A0  1399               	bcf	25,7	;volatile
  4148                           
  4149                           ;launcher_functions.c: 102: TMR1H = 0xFF;
  4150  07A1  30FF               	movlw	255
  4151  07A2  0097               	movwf	23	;volatile
  4152                           
  4153                           ;launcher_functions.c: 103: TMR1L = 0xCD;
  4154  07A3  30CD               	movlw	205
  4155  07A4  0096               	movwf	22	;volatile
  4156                           
  4157                           ;launcher_functions.c: 104: T1CONbits.TMR1ON = 1;
  4158  07A5  1418               	bsf	24,0	;volatile
  4159  07A6  0008               	return
  4160  07A7                     __end_of_InitTimer1:	
  4161                           
  4162                           	psect	text19
  4163  0766                     __ptext19:	
  4164 ;; *************** function _InitSPI *****************
  4165 ;; Defined at:
  4166 ;;		line 108 in file "launcher_functions.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;		None               void
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4180 ;;      Params:         0       0       0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0       0       0
  4182 ;;      Temps:          0       0       0       0       0       0       0
  4183 ;;      Totals:         0       0       0       0       0       0       0
  4184 ;;Total ram usage:        0 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    2
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _InitSPI
  4196  0766                     _InitSPI:	
  4197                           
  4198                           ;launcher_functions.c: 111: TRISCbits.TRISC2 = 0;
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _InitSPI: [wreg+status,2+status,0]
  4202  0766  0021               	movlb	1	; select bank1
  4203  0767  110E               	bcf	14,2	;volatile
  4204                           
  4205                           ;launcher_functions.c: 112: TRISCbits.TRISC3 = 0;
  4206  0768  118E               	bcf	14,3	;volatile
  4207                           
  4208                           ;launcher_functions.c: 113: TRISCbits.TRISC4 = 1;
  4209  0769  160E               	bsf	14,4	;volatile
  4210                           
  4211                           ;launcher_functions.c: 114: TRISCbits.TRISC5 = 0;
  4212  076A  128E               	bcf	14,5	;volatile
  4213                           
  4214                           ;launcher_functions.c: 116: LATC2 = (1);
  4215  076B  0022               	movlb	2	; select bank2
  4216  076C  150E               	bsf	14,2	;volatile
  4217                           
  4218                           ;launcher_functions.c: 119: SSPCON1bits.SSPEN=0x00;
  4219  076D  0024               	movlb	4	; select bank4
  4220  076E  1295               	bcf	21,5	;volatile
  4221                           
  4222                           ;launcher_functions.c: 120: SSPCON1bits.SSPM=0x01;
  4223  076F  0815               	movf	21,w	;volatile
  4224  0770  39F0               	andlw	-16
  4225  0771  3801               	iorlw	1
  4226  0772  0095               	movwf	21	;volatile
  4227                           
  4228                           ;launcher_functions.c: 121: SSPCON1bits.CKP=0;
  4229  0773  1215               	bcf	21,4	;volatile
  4230                           
  4231                           ;launcher_functions.c: 122: SSPSTATbits.CKE=1;
  4232  0774  1714               	bsf	20,6	;volatile
  4233                           
  4234                           ;launcher_functions.c: 123: SSPSTATbits.SMP=0;
  4235  0775  1394               	bcf	20,7	;volatile
  4236                           
  4237                           ;launcher_functions.c: 124: SSPCON1bits.SSPEN=0x01;
  4238  0776  1695               	bsf	21,5	;volatile
  4239  0777  0008               	return
  4240  0778                     __end_of_InitSPI:	
  4241                           
  4242                           	psect	text20
  4243  0692                     __ptext20:	
  4244 ;; *************** function _InitGPIO *****************
  4245 ;; Defined at:
  4246 ;;		line 13 in file "launcher_functions.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;		None               void
  4253 ;; Registers used:
  4254 ;;		status,2
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4260 ;;      Params:         0       0       0       0       0       0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0
  4263 ;;      Totals:         0       0       0       0       0       0       0
  4264 ;;Total ram usage:        0 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    2
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _InitGPIO
  4276  0692                     _InitGPIO:	
  4277                           
  4278                           ;launcher_functions.c: 18: TRISAbits.TRISA1 = 1;
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _InitGPIO: [status,2]
  4282  0692  0021               	movlb	1	; select bank1
  4283  0693  148C               	bsf	12,1	;volatile
  4284                           
  4285                           ;launcher_functions.c: 19: ANSELAbits.ANSA1 = 0;
  4286  0694  0023               	movlb	3	; select bank3
  4287  0695  108C               	bcf	12,1	;volatile
  4288                           
  4289                           ;launcher_functions.c: 20: IOCAPbits.IOCAP1 = 1;
  4290  0696  0027               	movlb	7	; select bank7
  4291  0697  1491               	bsf	17,1	;volatile
  4292                           
  4293                           ;launcher_functions.c: 21: IOCANbits.IOCAN1 = 1;
  4294  0698  1492               	bsf	18,1	;volatile
  4295                           
  4296                           ;launcher_functions.c: 22: IOCAF = 0x00;
  4297  0699  0193               	clrf	19	;volatile
  4298                           
  4299                           ;launcher_functions.c: 23: INTCONbits.IOCIE = 1;
  4300  069A  158B               	bsf	11,3	;volatile
  4301                           
  4302                           ;launcher_functions.c: 26: TRISBbits.TRISB3 = 1;
  4303  069B  0021               	movlb	1	; select bank1
  4304  069C  158D               	bsf	13,3	;volatile
  4305                           
  4306                           ;launcher_functions.c: 27: ANSELBbits.ANSB3 = 0;
  4307  069D  0023               	movlb	3	; select bank3
  4308  069E  118D               	bcf	13,3	;volatile
  4309                           
  4310                           ;launcher_functions.c: 28: IOCBNbits.IOCBN3 = 1;
  4311  069F  0027               	movlb	7	; select bank7
  4312  06A0  1595               	bsf	21,3	;volatile
  4313                           
  4314                           ;launcher_functions.c: 29: IOCBPbits.IOCBP3 = 1;
  4315  06A1  1594               	bsf	20,3	;volatile
  4316                           
  4317                           ;launcher_functions.c: 30: IOCBF = 0x00;
  4318  06A2  0196               	clrf	22	;volatile
  4319                           
  4320                           ;launcher_functions.c: 31: INTCONbits.IOCIE = 1;
  4321  06A3  158B               	bsf	11,3	;volatile
  4322                           
  4323                           ;launcher_functions.c: 34: TRISAbits.TRISA0 = 1;
  4324  06A4  0021               	movlb	1	; select bank1
  4325  06A5  140C               	bsf	12,0	;volatile
  4326                           
  4327                           ;launcher_functions.c: 36: TRISAbits.TRISA2 = 1;
  4328  06A6  150C               	bsf	12,2	;volatile
  4329                           
  4330                           ;launcher_functions.c: 37: TRISAbits.TRISA3 = 1;
  4331  06A7  158C               	bsf	12,3	;volatile
  4332                           
  4333                           ;launcher_functions.c: 38: TRISAbits.TRISA4 = 0;
  4334  06A8  120C               	bcf	12,4	;volatile
  4335                           
  4336                           ;launcher_functions.c: 39: TRISAbits.TRISA5 = 0;
  4337  06A9  128C               	bcf	12,5	;volatile
  4338                           
  4339                           ;launcher_functions.c: 40: TRISAbits.TRISA6 = 0;
  4340  06AA  130C               	bcf	12,6	;volatile
  4341                           
  4342                           ;launcher_functions.c: 41: TRISAbits.TRISA7 = 0;
  4343  06AB  138C               	bcf	12,7	;volatile
  4344                           
  4345                           ;launcher_functions.c: 44: TRISBbits.TRISB0 = 0;
  4346  06AC  100D               	bcf	13,0	;volatile
  4347                           
  4348                           ;launcher_functions.c: 45: TRISBbits.TRISB1 = 1;
  4349  06AD  148D               	bsf	13,1	;volatile
  4350                           
  4351                           ;launcher_functions.c: 46: TRISBbits.TRISB2 = 0;
  4352  06AE  110D               	bcf	13,2	;volatile
  4353                           
  4354                           ;launcher_functions.c: 48: TRISBbits.TRISB4 = 0;
  4355  06AF  120D               	bcf	13,4	;volatile
  4356                           
  4357                           ;launcher_functions.c: 49: TRISBbits.TRISB5 = 0;
  4358  06B0  128D               	bcf	13,5	;volatile
  4359                           
  4360                           ;launcher_functions.c: 51: PORTBbits.RB0 = 0;
  4361  06B1  0020               	movlb	0	; select bank0
  4362  06B2  100D               	bcf	13,0	;volatile
  4363                           
  4364                           ;launcher_functions.c: 52: PORTBbits.RB4 = 0;
  4365  06B3  120D               	bcf	13,4	;volatile
  4366                           
  4367                           ;launcher_functions.c: 53: PORTBbits.RB5 = 0;
  4368  06B4  128D               	bcf	13,5	;volatile
  4369                           
  4370                           ;launcher_functions.c: 55: ANSELBbits.ANSB0 = 0;
  4371  06B5  0023               	movlb	3	; select bank3
  4372  06B6  100D               	bcf	13,0	;volatile
  4373                           
  4374                           ;launcher_functions.c: 56: ANSELBbits.ANSB1 = 0;
  4375  06B7  108D               	bcf	13,1	;volatile
  4376                           
  4377                           ;launcher_functions.c: 57: ANSELBbits.ANSB2 = 0;
  4378  06B8  110D               	bcf	13,2	;volatile
  4379                           
  4380                           ;launcher_functions.c: 59: ANSELBbits.ANSB4 = 0;
  4381  06B9  120D               	bcf	13,4	;volatile
  4382                           
  4383                           ;launcher_functions.c: 60: ANSELBbits.ANSB5 = 0;
  4384  06BA  128D               	bcf	13,5	;volatile
  4385                           
  4386                           ;launcher_functions.c: 63: TRISCbits.TRISC0 = 0;
  4387  06BB  0021               	movlb	1	; select bank1
  4388  06BC  100E               	bcf	14,0	;volatile
  4389                           
  4390                           ;launcher_functions.c: 64: TRISCbits.TRISC1 = 0;
  4391  06BD  108E               	bcf	14,1	;volatile
  4392  06BE  0008               	return
  4393  06BF                     __end_of_InitGPIO:	
  4394                           
  4395                           	psect	text21
  4396  07BD                     __ptext21:	
  4397 ;; *************** function _InitCLK *****************
  4398 ;; Defined at:
  4399 ;;		line 8 in file "launcher_functions.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;		None
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, status,2, status,0
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4413 ;;      Params:         0       0       0       0       0       0       0
  4414 ;;      Locals:         0       0       0       0       0       0       0
  4415 ;;      Temps:          0       0       0       0       0       0       0
  4416 ;;      Totals:         0       0       0       0       0       0       0
  4417 ;;Total ram usage:        0 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    2
  4420 ;; This function calls:
  4421 ;;		Nothing
  4422 ;; This function is called by:
  4423 ;;		_main
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function _InitCLK
  4429  07BD                     _InitCLK:	
  4430                           
  4431                           ;launcher_functions.c: 10: OSCCONbits.IRCF = 0xF;
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in _InitCLK: [wreg+status,2+status,0]
  4435  07BD  3078               	movlw	120
  4436  07BE  0021               	movlb	1	; select bank1
  4437  07BF  0499               	iorwf	25,f	;volatile
  4438                           
  4439                           ;launcher_functions.c: 11: OSCCONbits.SCS = 2;
  4440  07C0  0819               	movf	25,w	;volatile
  4441  07C1  39FC               	andlw	-4
  4442  07C2  3802               	iorlw	2
  4443  07C3  0099               	movwf	25	;volatile
  4444  07C4  0008               	return
  4445  07C5                     __end_of_InitCLK:	
  4446                           
  4447                           	psect	text22
  4448  06DD                     __ptext22:	
  4449 ;; *************** function _InitADC *****************
  4450 ;; Defined at:
  4451 ;;		line 73 in file "launcher_functions.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;		None               void
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4465 ;;      Params:         0       0       0       0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0
  4468 ;;      Totals:         0       0       0       0       0       0       0
  4469 ;;Total ram usage:        0 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    2
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function _InitADC
  4481  06DD                     _InitADC:	
  4482                           
  4483                           ;launcher_functions.c: 76: TRISAbits.TRISA0 = 1;
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in _InitADC: [wreg+status,2+status,0]
  4487  06DD  0021               	movlb	1	; select bank1
  4488  06DE  140C               	bsf	12,0	;volatile
  4489                           
  4490                           ;launcher_functions.c: 77: ANSELAbits.ANSA0 = 1;
  4491  06DF  0023               	movlb	3	; select bank3
  4492  06E0  140C               	bsf	12,0	;volatile
  4493                           
  4494                           ;launcher_functions.c: 80: ADCON1bits.ADCS = 0x05;
  4495  06E1  0021               	movlb	1	; select bank1
  4496  06E2  081E               	movf	30,w	;volatile
  4497  06E3  398F               	andlw	-113
  4498  06E4  3850               	iorlw	80
  4499  06E5  009E               	movwf	30	;volatile
  4500                           
  4501                           ;launcher_functions.c: 81: ADCON1bits.ADPREF = 0x00;
  4502  06E6  30FC               	movlw	-4
  4503  06E7  059E               	andwf	30,f	;volatile
  4504                           
  4505                           ;launcher_functions.c: 82: ADCON1bits.ADNREF = 0x00;
  4506  06E8  111E               	bcf	30,2	;volatile
  4507                           
  4508                           ;launcher_functions.c: 83: ADCON0bits.CHS = 0x00;
  4509  06E9  3083               	movlw	-125
  4510  06EA  059D               	andwf	29,f	;volatile
  4511                           
  4512                           ;launcher_functions.c: 84: ADCON2bits.CHSN = 0xF;
  4513  06EB  300F               	movlw	15
  4514  06EC  049F               	iorwf	31,f	;volatile
  4515                           
  4516                           ;launcher_functions.c: 85: ADCON1bits.ADFM = 0;
  4517  06ED  139E               	bcf	30,7	;volatile
  4518                           
  4519                           ;launcher_functions.c: 86: ADCON0bits.ADRMD = 1;
  4520  06EE  179D               	bsf	29,7	;volatile
  4521                           
  4522                           ;launcher_functions.c: 87: ADCON0bits.ADON = 1;
  4523  06EF  141D               	bsf	29,0	;volatile
  4524                           
  4525                           ;launcher_functions.c: 90: ADIF = 0;
  4526  06F0  0020               	movlb	0	; select bank0
  4527  06F1  1311               	bcf	17,6	;volatile
  4528                           
  4529                           ;launcher_functions.c: 91: ADIE = 1;
  4530  06F2  0021               	movlb	1	; select bank1
  4531  06F3  1711               	bsf	17,6	;volatile
  4532                           
  4533                           ;launcher_functions.c: 92: PEIE = 1;
  4534  06F4  170B               	bsf	11,6	;volatile
  4535  06F5  0008               	return
  4536  06F6                     __end_of_InitADC:	
  4537                           
  4538                           	psect	intentry
  4539  0004                     __pintentry:	
  4540 ;; *************** function _isr *****************
  4541 ;; Defined at:
  4542 ;;		line 119 in file "launcher_main.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4556 ;;      Params:         0       0       0       0       0       0       0
  4557 ;;      Locals:         2       0       0       0       0       0       0
  4558 ;;      Temps:          5       0       0       0       0       0       0
  4559 ;;      Totals:         7       0       0       0       0       0       0
  4560 ;;Total ram usage:        7 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    1
  4563 ;; This function calls:
  4564 ;;		i1_WriteBuffer
  4565 ;; This function is called by:
  4566 ;;		Interrupt level 1
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570  0004                     _isr:	
  4571                           
  4572                           ;incstack = 0
  4573                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4574  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4575  0005  3180               	pagesel	$
  4576  0006  0020               	movlb	0	; select bank0
  4577  0007  087F               	movf	127,w
  4578  0008  00F6               	movwf	??_isr+4
  4579                           
  4580                           ;launcher_main.c: 122: if (PIR1bits.RCIF)
  4581  0009  1E91               	btfss	17,5	;volatile
  4582  000A  282F               	goto	i1l2300
  4583                           
  4584                           ;launcher_main.c: 123: {
  4585                           ;launcher_main.c: 125: if(OERR)
  4586  000B  0023               	movlb	3	; select bank3
  4587  000C  1C9D               	btfss	29,1	;volatile
  4588  000D  2810               	goto	i1l2288
  4589                           
  4590                           ;launcher_main.c: 126: {
  4591                           ;launcher_main.c: 127: RCSTAbits.CREN = 0;
  4592  000E  121D               	bcf	29,4	;volatile
  4593                           
  4594                           ;launcher_main.c: 128: RCSTAbits.CREN = 1;
  4595  000F  161D               	bsf	29,4	;volatile
  4596  0010                     i1l2288:	
  4597                           
  4598                           ;launcher_main.c: 129: }
  4599                           ;launcher_main.c: 130: gpsMessage[gpsIndex++] = RCREG;
  4600  0010  0819               	movf	25,w	;volatile
  4601  0011  00F2               	movwf	??_isr
  4602  0012  0021               	movlb	1	; select bank1
  4603  0013  085B               	movf	_gpsIndex^(0+128),w
  4604  0014  3E20               	addlw	_gpsMessage& (0+255)
  4605  0015  0086               	movwf	6
  4606  0016  3001               	movlw	1	; select bank2/3
  4607  0017  0087               	movwf	7
  4608  0018  0872               	movf	??_isr,w
  4609  0019  0081               	movwf	1
  4610  001A  3001               	movlw	1
  4611  001B  00F2               	movwf	??_isr
  4612  001C  0872               	movf	??_isr,w
  4613  001D  07DB               	addwf	_gpsIndex^(0+128),f	;volatile
  4614                           
  4615                           ;launcher_main.c: 131: if(gpsMessage[gpsIndex-1] == 0x0A)
  4616  001E  085B               	movf	_gpsIndex^(0+128),w
  4617  001F  3EFF               	addlw	255
  4618  0020  3E20               	addlw	_gpsMessage& (0+255)
  4619  0021  0086               	movwf	6
  4620  0022  3001               	movlw	1	; select bank2/3
  4621  0023  0087               	movwf	7
  4622  0024  0801               	movf	1,w
  4623  0025  3A0A               	xorlw	10
  4624  0026  1D03               	skipz
  4625  0027  282C               	goto	i1l2296
  4626                           
  4627                           ;launcher_main.c: 132: {
  4628                           ;launcher_main.c: 133: messageDoneFlag = 1;
  4629  0028  0020               	movlb	0	; select bank0
  4630  0029  01EC               	clrf	_messageDoneFlag
  4631  002A  0AEC               	incf	_messageDoneFlag,f
  4632                           
  4633                           ;launcher_main.c: 134: }
  4634  002B  282E               	goto	i1l2298
  4635  002C                     i1l2296:	
  4636                           
  4637                           ;launcher_main.c: 135: else
  4638                           ;launcher_main.c: 136: {
  4639                           ;launcher_main.c: 137: messageDoneFlag = 0;
  4640  002C  0020               	movlb	0	; select bank0
  4641  002D  01EC               	clrf	_messageDoneFlag
  4642  002E                     i1l2298:	
  4643                           
  4644                           ;launcher_main.c: 138: }
  4645                           ;launcher_main.c: 139: PIR1bits.RCIF = 0;
  4646  002E  1291               	bcf	17,5	;volatile
  4647  002F                     i1l2300:	
  4648                           
  4649                           ;launcher_main.c: 140: }
  4650                           ;launcher_main.c: 143: if (TMR1IF && TMR1IE)
  4651  002F  1C11               	btfss	17,0	;volatile
  4652  0030  2840               	goto	i1l2310
  4653  0031  0021               	movlb	1	; select bank1
  4654  0032  1C11               	btfss	17,0	;volatile
  4655  0033  2840               	goto	i1l2310
  4656                           
  4657                           ;launcher_main.c: 144: {
  4658                           ;launcher_main.c: 145: TMR1H = 0xFF;
  4659  0034  30FF               	movlw	255
  4660  0035  0020               	movlb	0	; select bank0
  4661  0036  0097               	movwf	23	;volatile
  4662                           
  4663                           ;launcher_main.c: 146: TMR1L = 0xCD;
  4664  0037  30CD               	movlw	205
  4665  0038  0096               	movwf	22	;volatile
  4666                           
  4667                           ;launcher_main.c: 147: TMR1IF = 0;
  4668  0039  1011               	bcf	17,0	;volatile
  4669                           
  4670                           ;launcher_main.c: 149: if(recordFlag)
  4671  003A  086D               	movf	_recordFlag,w
  4672  003B  1903               	btfsc	3,2
  4673  003C  2840               	goto	i1l2310
  4674                           
  4675                           ;launcher_main.c: 150: {
  4676                           ;launcher_main.c: 151: ADCON0bits.ADGO = 1;
  4677  003D  0021               	movlb	1	; select bank1
  4678  003E  149D               	bsf	29,1	;volatile
  4679  003F  0020               	movlb	0	; select bank0
  4680  0040                     i1l2310:	
  4681                           
  4682                           ;launcher_main.c: 152: }
  4683                           ;launcher_main.c: 153: }
  4684                           ;launcher_main.c: 156: if(PIR1bits.ADIF & PIE1bits.ADIE)
  4685  0040  0021               	movlb	1	; select bank1
  4686  0041  0E11               	swapf	17,w	;volatile
  4687  0042  0C89               	rrf	9,f
  4688  0043  0C89               	rrf	9,f
  4689  0044  3901               	andlw	1
  4690  0045  00F2               	movwf	??_isr
  4691  0046  0020               	movlb	0	; select bank0
  4692  0047  0E11               	swapf	17,w	;volatile
  4693  0048  0C89               	rrf	9,f
  4694  0049  0C89               	rrf	9,f
  4695  004A  3901               	andlw	1
  4696  004B  0572               	andwf	??_isr,w
  4697  004C  1903               	btfsc	3,2
  4698  004D  2882               	goto	i1l2326
  4699                           
  4700                           ;launcher_main.c: 157: {
  4701                           ;launcher_main.c: 158: if(!((((end))==(51))?((((start))==0)?(1):(0)):((((end)+1)==((star
      +                          t)))?(1):(0))))
  4702  004E  3033               	movlw	51
  4703  004F  0679               	xorwf	_end,w
  4704  0050  047A               	iorwf	_end+1,w
  4705  0051  1903               	skipnz
  4706  0052  2868               	goto	i1l2316
  4707  0053  0879               	movf	_end,w
  4708  0054  3E01               	addlw	1
  4709  0055  00F2               	movwf	??_isr
  4710  0056  3000               	movlw	0
  4711  0057  3D7A               	addwfc	_end+1,w
  4712  0058  00F3               	movwf	??_isr+1
  4713  0059  087C               	movf	_start+1,w
  4714  005A  0673               	xorwf	??_isr+1,w
  4715  005B  1D03               	skipz
  4716  005C  285F               	goto	u181_25
  4717  005D  087B               	movf	_start,w
  4718  005E  0672               	xorwf	??_isr,w
  4719  005F                     u181_25:	
  4720  005F  3000               	movlw	0
  4721  0060  1903               	skipnz
  4722  0061  3001               	movlw	1
  4723  0062  00F4               	movwf	??_isr+2
  4724  0063  01F5               	clrf	??_isr+3
  4725  0064  0874               	movf	??_isr+2,w
  4726  0065  00F7               	movwf	_isr$543
  4727  0066  0875               	movf	??_isr+3,w
  4728  0067  2872               	goto	L5
  4729  0068                     i1l2316:	
  4730  0068  087C               	movf	_start+1,w
  4731  0069  047B               	iorwf	_start,w
  4732  006A  3000               	movlw	0
  4733  006B  1903               	skipnz
  4734  006C  3001               	movlw	1
  4735  006D  00F2               	movwf	??_isr
  4736  006E  01F3               	clrf	??_isr+1
  4737  006F  0872               	movf	??_isr,w
  4738  0070  00F7               	movwf	_isr$543
  4739  0071  0873               	movf	??_isr+1,w
  4740  0072                     L5:	
  4741  0072  00F8               	movwf	_isr$543+1
  4742  0073  0878               	movf	_isr$543+1,w
  4743  0074  0477               	iorwf	_isr$543,w
  4744  0075  1D03               	skipz
  4745  0076  2880               	goto	i1l2324
  4746                           
  4747                           ;launcher_main.c: 159: {
  4748                           ;launcher_main.c: 160: if(recordFlag)
  4749  0077  086D               	movf	_recordFlag,w
  4750  0078  1903               	btfsc	3,2
  4751  0079  2880               	goto	i1l2324
  4752                           
  4753                           ;launcher_main.c: 161: WriteBuffer(ADRESH);
  4754  007A  0021               	movlb	1	; select bank1
  4755  007B  081C               	movf	28,w	;volatile
  4756  007C  3187  2726  3180   	fcall	i1_WriteBuffer
  4757  007F  0020               	movlb	0	; select bank0
  4758  0080                     i1l2324:	
  4759                           
  4760                           ;launcher_main.c: 162: }
  4761                           ;launcher_main.c: 163: PIR1bits.ADIF = 0;
  4762  0080  0020               	movlb	0	; select bank0
  4763  0081  1311               	bcf	17,6	;volatile
  4764  0082                     i1l2326:	
  4765                           
  4766                           ;launcher_main.c: 164: }
  4767                           ;launcher_main.c: 167: if(INTCONbits.IOCIE && IOCBFbits.IOCBF3)
  4768  0082  1D8B               	btfss	11,3	;volatile
  4769  0083  28AB               	goto	i1l2340
  4770  0084  0027               	movlb	7	; select bank7
  4771  0085  1D96               	btfss	22,3	;volatile
  4772  0086  28AB               	goto	i1l2340
  4773                           
  4774                           ;launcher_main.c: 168: {
  4775                           ;launcher_main.c: 169: IOCBFbits.IOCBF3 = 0;
  4776  0087  1196               	bcf	22,3	;volatile
  4777                           
  4778                           ;launcher_main.c: 170: if(IOCBPbits.IOCBP3 & PORTBbits.RB3)
  4779  0088  0020               	movlb	0	; select bank0
  4780  0089  0C0D               	rrf	13,w	;volatile
  4781  008A  00F2               	movwf	??_isr
  4782  008B  0CF2               	rrf	??_isr,f
  4783  008C  0C72               	rrf	??_isr,w
  4784  008D  3901               	andlw	1
  4785  008E  00F3               	movwf	??_isr+1
  4786  008F  0027               	movlb	7	; select bank7
  4787  0090  0C14               	rrf	20,w	;volatile
  4788  0091  00F4               	movwf	??_isr+2
  4789  0092  0CF4               	rrf	??_isr+2,f
  4790  0093  0C74               	rrf	??_isr+2,w
  4791  0094  3901               	andlw	1
  4792  0095  0573               	andwf	??_isr+1,w
  4793  0096  1903               	btfsc	3,2
  4794  0097  289B               	goto	i1l2336
  4795                           
  4796                           ;launcher_main.c: 171: {
  4797                           ;launcher_main.c: 172: recordFlag = 1;
  4798  0098  0020               	movlb	0	; select bank0
  4799  0099  01ED               	clrf	_recordFlag
  4800  009A  0AED               	incf	_recordFlag,f
  4801  009B                     i1l2336:	
  4802                           
  4803                           ;launcher_main.c: 173: }
  4804                           ;launcher_main.c: 174: if(IOCBNbits.IOCBN3 & !PORTBbits.RB3)
  4805  009B  0027               	movlb	7	; select bank7
  4806  009C  0C15               	rrf	21,w	;volatile
  4807  009D  00F2               	movwf	??_isr
  4808  009E  0CF2               	rrf	??_isr,f
  4809  009F  0C72               	rrf	??_isr,w
  4810  00A0  3901               	andlw	1
  4811  00A1  00F3               	movwf	??_isr+1
  4812  00A2  1003               	clrc
  4813  00A3  0020               	movlb	0	; select bank0
  4814  00A4  1D8D               	btfss	13,3	;volatile
  4815  00A5  1403               	setc
  4816  00A6  3000               	movlw	0
  4817  00A7  3D09               	addwfc	9,w
  4818  00A8  0573               	andwf	??_isr+1,w
  4819  00A9  1D03               	btfss	3,2
  4820                           
  4821                           ;launcher_main.c: 175: {
  4822                           ;launcher_main.c: 176: recordFlag = 0;
  4823  00AA  01ED               	clrf	_recordFlag
  4824  00AB                     i1l2340:	
  4825                           
  4826                           ;launcher_main.c: 177: }
  4827                           ;launcher_main.c: 178: }
  4828                           ;launcher_main.c: 181: if(INTCONbits.IOCIE && IOCAFbits.IOCAF1)
  4829  00AB  1D8B               	btfss	11,3	;volatile
  4830  00AC  28CD               	goto	i1l128
  4831  00AD  0027               	movlb	7	; select bank7
  4832  00AE  1C93               	btfss	19,1	;volatile
  4833  00AF  28CD               	goto	i1l128
  4834                           
  4835                           ;launcher_main.c: 182: {
  4836                           ;launcher_main.c: 183: IOCAFbits.IOCAF1 = 0;
  4837  00B0  1093               	bcf	19,1	;volatile
  4838                           
  4839                           ;launcher_main.c: 184: if(IOCAPbits.IOCAP1 & PORTAbits.RA1)
  4840  00B1  0020               	movlb	0	; select bank0
  4841  00B2  0C0C               	rrf	12,w	;volatile
  4842  00B3  3901               	andlw	1
  4843  00B4  00F2               	movwf	??_isr
  4844  00B5  0027               	movlb	7	; select bank7
  4845  00B6  0C11               	rrf	17,w	;volatile
  4846  00B7  3901               	andlw	1
  4847  00B8  0572               	andwf	??_isr,w
  4848  00B9  1903               	btfsc	3,2
  4849  00BA  28BE               	goto	i1l2350
  4850                           
  4851                           ;launcher_main.c: 185: {
  4852                           ;launcher_main.c: 186: strobeFlag = 1;
  4853  00BB  0021               	movlb	1	; select bank1
  4854  00BC  01DA               	clrf	_strobeFlag^(0+128)
  4855  00BD  0ADA               	incf	_strobeFlag^(0+128),f
  4856  00BE                     i1l2350:	
  4857                           
  4858                           ;launcher_main.c: 187: }
  4859                           ;launcher_main.c: 188: if(IOCANbits.IOCAN1 & !PORTAbits.RA1)
  4860  00BE  0027               	movlb	7	; select bank7
  4861  00BF  0C12               	rrf	18,w	;volatile
  4862  00C0  3901               	andlw	1
  4863  00C1  00F2               	movwf	??_isr
  4864  00C2  1003               	clrc
  4865  00C3  0020               	movlb	0	; select bank0
  4866  00C4  1C8C               	btfss	12,1	;volatile
  4867  00C5  1403               	setc
  4868  00C6  3000               	movlw	0
  4869  00C7  3D09               	addwfc	9,w
  4870  00C8  0572               	andwf	??_isr,w
  4871  00C9  1903               	btfsc	3,2
  4872  00CA  28CD               	goto	i1l128
  4873                           
  4874                           ;launcher_main.c: 189: {
  4875                           ;launcher_main.c: 190: strobeFlag = 0;
  4876  00CB  0021               	movlb	1	; select bank1
  4877  00CC  01DA               	clrf	_strobeFlag^(0+128)
  4878  00CD                     i1l128:	
  4879  00CD  0876               	movf	??_isr+4,w
  4880  00CE  0020               	movlb	0	; select bank0
  4881  00CF  00FF               	movwf	127
  4882  00D0  107E               	bcf	126,0	;clear compiler interrupt flag
  4883  00D1  0009               	retfie
  4884  00D2                     __end_of_isr:	
  4885                           
  4886                           	psect	text24
  4887  0726                     __ptext24:	
  4888 ;; *************** function i1_WriteBuffer *****************
  4889 ;; Defined at:
  4890 ;;		line 205 in file "launcher_functions.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  data            1    wreg     unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  data            1    1[COMMON] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;		None               void
  4897 ;; Registers used:
  4898 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4904 ;;      Params:         0       0       0       0       0       0       0
  4905 ;;      Locals:         1       0       0       0       0       0       0
  4906 ;;      Temps:          1       0       0       0       0       0       0
  4907 ;;      Totals:         2       0       0       0       0       0       0
  4908 ;;Total ram usage:        2 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_isr
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function i1_WriteBuffer
  4919  0726                     i1_WriteBuffer:	
  4920                           
  4921                           ;incstack = 0
  4922                           ; Regs used in i1_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  4923                           ;i1WriteBuffer@data stored from wreg
  4924  0726  00F1               	movwf	i1WriteBuffer@data
  4925                           
  4926                           ;launcher_functions.c: 207: buffer[end] = data;
  4927  0727  0871               	movf	i1WriteBuffer@data,w
  4928  0728  00F0               	movwf	??i1_WriteBuffer
  4929  0729  0879               	movf	_end,w
  4930  072A  3EA0               	addlw	_buffer& (0+255)
  4931  072B  0086               	movwf	6
  4932  072C  3001               	movlw	1	; select bank3/4
  4933  072D  0087               	movwf	7
  4934  072E  0870               	movf	??i1_WriteBuffer,w
  4935  072F  0081               	movwf	1
  4936                           
  4937                           ;launcher_functions.c: 209: if (end == 51)
  4938  0730  3033               	movlw	51
  4939  0731  0679               	xorwf	_end,w
  4940  0732  047A               	iorwf	_end+1,w
  4941  0733  1D03               	skipz
  4942  0734  2F38               	goto	i1l2238
  4943                           
  4944                           ;launcher_functions.c: 210: end = 0;
  4945  0735  01F9               	clrf	_end
  4946  0736  01FA               	clrf	_end+1
  4947  0737  0008               	return
  4948  0738                     i1l2238:	
  4949                           
  4950                           ;launcher_functions.c: 211: else
  4951                           ;launcher_functions.c: 212: end++;
  4952  0738  3001               	movlw	1
  4953  0739  07F9               	addwf	_end,f
  4954  073A  3000               	movlw	0
  4955  073B  3DFA               	addwfc	_end+1,f
  4956  073C  0008               	return
  4957  073D                     __end_ofi1_WriteBuffer:	
  4958  007E                     btemp	set	126	;btemp
  4959  007E                     pic14e$flags	set	126
  4960  007E                     wtemp	set	126
  4961  007E                     wtemp0	set	126
  4962  0080                     wtemp1	set	128
  4963  0082                     wtemp2	set	130
  4964  0084                     wtemp3	set	132
  4965  0086                     wtemp4	set	134
  4966  0088                     wtemp5	set	136
  4967  007F                     wtemp6	set	127
  4968  007E                     ttemp	set	126
  4969  007E                     ttemp0	set	126
  4970  0081                     ttemp1	set	129
  4971  0084                     ttemp2	set	132
  4972  0087                     ttemp3	set	135
  4973  007F                     ttemp4	set	127
  4974  007E                     ltemp	set	126
  4975  007E                     ltemp0	set	126
  4976  0082                     ltemp1	set	130
  4977  0086                     ltemp2	set	134
  4978  0080                     ltemp3	set	128


Data Sizes:
    Strings     44
    Constant    10
    Data        55
    BSS         204
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     76      80
    BANK1            80      0      60
    BANK2            80      0      72
    BANK3            80      0      51
    BANK4            80      0      68
    BANK5            80      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[18]), STR_1(CODE[19]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), SetupGPS@MID(BANK0[4]), SetupGPS@startSequence(BANK0[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 22
		 -> SetupGPS@message(BANK0[22]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1390$_cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), SetupGPS@MID(BANK0[4]), SetupGPS@startSequence(BANK0[6]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), SetupGPS@MID(BANK0[4]), SetupGPS@startSequence(BANK0[6]), 

    uart_write_message@data	PTR unsigned char  size(1) Largest target is 22
		 -> UpdateGPS@GPSupdateMessage(BANK0[22]), SetupGPS@message(BANK0[22]), DisableGPS@init_117(COMMON[13]), 

    compute_checksum@data	PTR unsigned char  size(1) Largest target is 22
		 -> UpdateGPS@GPSupdateMessage(BANK0[22]), SetupGPS@message(BANK0[22]), DisableGPS@init_117(COMMON[13]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_WriteBuffer

Critical Paths under _main in BANK0

    _main->_SetupGPS
    _SetupGPS->_sprintf
    _uart_write_message->_compute_checksum
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _RecordMode->_WriteOverheadSPI
    _WriteOverheadSPI->_ReadStatusSPI
    _ReadStatusSPI->_WriteSPI

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     2      4    4012
                                             70 BANK0      6     2      4
                            _InitADC
                            _InitCLK
                           _InitGPIO
                            _InitSPI
                         _InitTimer1
                       _InitWatchdog
                         _RecordMode
                           _SetupGPS
                     _ToggleSleepGPS
                           _initUART
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ToggleSleepGPS                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetupGPS                                            37    37      0    2983
                                             33 BANK0     37    37      0
                            _sprintf
                 _uart_write_message
 ---------------------------------------------------------------------------------
 (2) _uart_write_message                                  15    13      2    1105
                                              8 BANK0     15    13      2
                   _compute_checksum
                          _uart_xmit
 ---------------------------------------------------------------------------------
 (3) _uart_xmit                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _compute_checksum                                     8     6      2     340
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    13      6    1613
                                             14 BANK0     19    13      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     546
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _RecordMode                                          13    13      0    1028
                                             21 BANK0     13    13      0
                         _ReadBuffer
                        _WriteBuffer
                   _WriteOverheadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _WriteOverheadSPI                                    14    10      4     577
                                              7 BANK0     14    10      4
                      _ReadStatusSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadStatusSPI                                        2     2      0      69
                                              5 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _WriteSPI                                             5     5      0      23
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _WriteBuffer                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadBuffer                                           2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitWatchdog                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTimer1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSPI                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitGPIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitCLK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  7     7      0      46
                                              2 COMMON     7     7      0
                      i1_WriteBuffer
 ---------------------------------------------------------------------------------
 (6) i1_WriteBuffer                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitADC
   _InitCLK
   _InitGPIO
   _InitSPI
   _InitTimer1
   _InitWatchdog
   _RecordMode
     _ReadBuffer
     _WriteBuffer
     _WriteOverheadSPI
       _ReadStatusSPI
         _ReadSPI
         _WriteSPI
       _WriteSPI
     _WriteSPI
   _SetupGPS
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _uart_write_message
       _compute_checksum
       _uart_xmit
   _ToggleSleepGPS
   _initUART

 _isr (ROOT)
   i1_WriteBuffer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1E0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
ABS                  0      0     159       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      3C       8       75.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      48      10       90.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      33      12       63.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      44      14       85.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
DATA                 0      0     159      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 29 17:17:55 2014

                     _SSPSTATbits 0214              __size_of_WriteBuffer 0018                       __CFG_LVP$ON 0000  
                             l412 020A                               l316 07B5                               l333 049C  
                             l275 07A9                               l269 0762                               l286 04E0  
                             l297 0724                               _GIE 005F                               _end 0079  
                             _isr 0004                               wreg 0009                   DisableGPS@F4916 00A0  
                            l2202 01CF                              l2210 01EA                              l2214 01F6  
                            l2134 03C4                              l2224 0248                              l2144 0402  
                            l2180 0182                              l2172 016F                              l2166 0149  
                            l2270 056F                              l2264 0568                              l2194 01B4  
                            l2186 01A8                              l1810 0585                              l1812 0591  
                            l1822 05AC                              l1902 045D                              l1840 0655  
                            l1912 0467                              l1818 05A3                              l1834 063D  
                            l1914 048A                              l1860 04CD                              l1836 0649  
                            l1844 065E                              l1940 02CF                              l1924 02BA  
                            l1854 0709                              l1926 02BC                              l1790 0505  
                            l1880 0720                              l1960 0321                              l1944 02EB  
                            l1792 053F                              l1946 0305                              l1956 031B  
                            l1788 053A                              l1982 0353                              l1974 034F  
                            l1894 044F                              l1968 0340                              l1984 0298  
                            l1986 0393                              _ADIE 048E                              _ADIF 008E  
                            ?_isr 0070            __size_of_ReadStatusSPI 0011                              STR_1 060A  
                            STR_2 061D                              STR_3 062F                              u1215 0588  
                            u1305 064F                              u1235 0592                              u1315 0656  
                            u1245 059C                              u1255 05A4                              u1345 04AB  
                            u1185 050F                              u1425 0477                              u1355 04BF  
                            u2307 067C                              u1540 03A3                              u1605 01A6  
                            u1285 0640                              u2317 068A                              u1615 01BD  
                            u2327 03CB                              u1625 01D5                              u2337 0409  
                            u2347 0214                              u1395 043D                              u1555 03C2  
                            u1653 0208                              u1645 01F4                              u1565 0400  
                            u1663 0238                              u1575 0147                              u1495 0336  
                            u1585 016D                              u2297 066D                              u1675 0258  
                            u1595 0180                              u1685 026D                              u1695 0282  
                            _PEIE 005E                              _RCIE 048D                              _OERR 0CE9  
               i1WriteBuffer@data 0071                              _main 0542                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              btemp 007E  
                            ltemp 007E                              start 00D2                              ttemp 007E  
                            wtemp 007E                     __CFG_MCLRE$ON 0000                 ?_compute_checksum 0020  
                 __end_of_InitADC 06F6                   __end_of_InitCLK 07C5                   __end_of_InitSPI 0778  
                 __end_of_ReadSPI 07B3                ??_compute_checksum 0022                             ??_isr 0072  
                   ?_InitWatchdog 0070                     i1_WriteBuffer 0726             ReadStatusSPI@dataRead 0026  
                           ?_main 0066                             _LATC2 0872                             _IOCAF 0393  
                           _IOCBF 0396                   __end_of___lwdiv 05B3                             i1l128 00CD  
                 __end_of___lwmod 0665                             _RCREG 0199                             _TMR1H 0017  
                           _TMR1L 0016                             _TXREG 019A                 RecordMode@address 003C  
                 __end_of_dpowers 060A                             _start 007B                    __CFG_BOREN$OFF 0000  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                   __end_of_sprintf 0398  
          uart_write_message@data 0034            uart_write_message@size 0028                        _ReadBuffer 070E  
                 __initialization 00D4                        _InitTimer1 0798                 ?_WriteOverheadSPI 0027  
                    __end_of_main 057C                  __end_of_InitGPIO 06BF                    ??_InitWatchdog 0020  
                   _ReadStatusSPI 0778                    ?i1_WriteBuffer 0070                ??_WriteOverheadSPI 002B  
uart_write_message@ascii_checksum 0035                            ??_main 006A                   ReadSPI@dataByte 0021  
                  __CFG_PLLEN$OFF 0000                  __end_of_SetupGPS 042A     WriteOverheadSPI@address_bytes 0031  
                      _RecordMode 0121                            _ADRESH 009C                  __end_of_WriteSPI 0766  
                          i1l2300 002F                            i1l2310 0040                            i1l2340 00AB  
                          i1l2324 0080                            i1l2316 0068                            i1l2238 0738  
                          i1l2350 00BE                            i1l2326 0082                            i1l2336 009B  
                          i1l2296 002C                            i1l2288 0010                            i1l2298 002E  
                          u181_25 005F                            _TMR1IE 0488                            _TMR1IF 0088  
                          _SPBRGH 019C                            _TMR1ON 00C0                            _SPBRGL 019B  
                          _SSPBUF 0211                         ??_InitADC 0020                         ??_InitCLK 0020  
                       ??_InitSPI 0020                         ??_ReadSPI 0020                    ?_ReadStatusSPI 0070  
                __end_of_initUART 0798                         ??___lwdiv 0024                         ??___lwmod 002C  
                          _buffer 01A0       __size_of_uart_write_message 0076                      __pdataCOMMON 007D  
                     RecordMode@x 0040               main@periodicCounter 006B                         ??_sprintf 0034  
                  _gpsInvalidFlag 007D           __end_of__initialization 011D                       ?_ReadBuffer 0070  
                     ?_InitTimer1 0070                    __pcstackCOMMON 0070                   ??i1_WriteBuffer 0070  
                    __pidataBANK0 07D8                      __pidataBANK1 06BF                      __pidataBANK2 073D  
                    WriteSPI@temp 0022                       ?_RecordMode 0070              __end_of_InitWatchdog 07CC  
                      __pbssBANK0 006C                        __pbssBANK1 00BE                        __pbssBANK2 0120  
                      __pbssBANK3 01A0                        __pbssBANK4 0220                         ?_InitGPIO 0070  
                 SetupGPS@message 0044                   ??_ReadStatusSPI 0025                        __pmaintext 0542  
                       ?_SetupGPS 0070                     ??_WriteBuffer 0020                        __pintentry 0004  
                  _validLongitude 00D0                         ?_WriteSPI 0070                __size_of_uart_xmit 000A  
       __size_of_compute_checksum 0042               __size_of_ReadBuffer 0018               __size_of_InitTimer1 000F  
                      ??_InitGPIO 0020                         ?_initUART 0070                           _InitADC 06DD  
                         _InitCLK 07BD                           _InitSPI 0766                        _gpsMessage 0120  
         __size_of_ToggleSleepGPS 002D                           _ReadSPI 07A7                       SetupGPS@MID 0060  
                      ??_SetupGPS 0041               __size_of_RecordMode 0171                           ___lwdiv 057C  
                         ___lwmod 0636                           _isr$543 0077                        ??_WriteSPI 0020  
                         __ptext1 0789                           __ptext2 0665                           __ptext3 0398  
                         __ptext4 042A                           __ptext5 07B3                           __ptext6 0500  
                         __ptext7 0292                           __ptext8 0636                           __ptext9 057C  
                       _T1CONbits 0018                           _dpowers 0600               __end_of_WriteBuffer 070E  
                    __size_of_isr 00CE                         _IOCAFbits 0393                         _IOCBFbits 0396  
                       _IOCANbits 0392         __size_of_WriteOverheadSPI 0060                         _IOCBNbits 0395  
                       _IOCAPbits 0391                         _IOCBPbits 0394                        _recordFlag 006D  
                         _sprintf 0292                           clrloop0 07CD              end_of_initialization 011D  
                      ??_initUART 0020                           init_ram 07D2                           initloop 07D3  
                 WriteBuffer@data 0021                 __end_of_uart_xmit 07BD                         _RCSTAbits 019D  
                WriteSPI@databyte 0024                      __pstringtext 0600                         _PORTAbits 000C  
                       _PORTBbits 000D                         _PORTCbits 000E                  __CFG_FOSC$INTOSC 0000  
           __size_of_InitWatchdog 0007                         _TRISAbits 008C                         _TRISBbits 008D  
                       _TRISCbits 008E           WriteOverheadSPI@address 0027              uart_xmit@mydata_byte 0020  
           _preRecordingAddresses 0220                         _TXSTAbits 019E                      ??_ReadBuffer 0020  
                      _strobeFlag 00DA                      ??_InitTimer1 0020                       _WriteBuffer 06F6  
      __end_of_uart_write_message 04A0                      _InitWatchdog 07C5                     __pidataCOMMON 07DA  
                   SetupGPS@F4921 00BA                     SetupGPS@F4919 00B4               start_initialization 00D4  
                _compute_checksum 0500         WriteOverheadSPI@StatusReg 0034                      ??_RecordMode 0035  
                     __end_of_isr 00D2                __end_of_ReadBuffer 0726                 compute_checksum@x 0026  
              __end_of_InitTimer1 07A7                    _ToggleSleepGPS 0665                 __size_of_InitGPIO 002D  
                       SetupGPS@x 0064              compute_checksum@data 0025              compute_checksum@size 0020  
              __end_of_RecordMode 0292             __end_ofi1_WriteBuffer 073D                       __pdataBANK0 006E  
                     __pdataBANK1 00A0                       __pdataBANK2 0152                 __size_of_SetupGPS 0092  
        compute_checksum@checksum 0024                 __size_of_WriteSPI 0013                       __pbssCOMMON 0079  
                       ___latbits 0001                     __pcstackBANK0 0020                  _WriteOverheadSPI 04A0  
             __end_of__stringdata 0636               uart_write_message@x 0031                     _validEastWest 006E  
          __end_of_ToggleSleepGPS 0692                   _messageDoneFlag 006C                       sprintf@_val 003C  
                     sprintf@flag 0038                       sprintf@prec 0039                          ?_InitADC 0070  
                        ?_InitCLK 0070                          ?_InitSPI 0070                 __size_of_initUART 000F  
                        ?_ReadSPI 0070                         __pnvBANK1 00DB                     _validLatitude 00CA  
                ___lwdiv@dividend 0022             __end_of_ReadStatusSPI 0789                          ?___lwdiv 0020  
                        ?___lwmod 0028                    UpdateGPS@F4926 0152                  __CFG_WDTE$SWDTEN 0000  
                ___lwdiv@quotient 0025                          ?_sprintf 002E        uart_write_message@checksum 0033  
                 ?_ToggleSleepGPS 0070                   _validNorthSouth 006F                         clear_ram0 07CC  
                        _PIE1bits 0091                    DecodeGPS@F4930 00BE                    DecodeGPS@F4932 00C4  
                  DecodeGPS@F4928 00AD                          _PIR1bits 0011                         _uart_xmit 07B3  
                      _ADCON0bits 009D                        _ADCON1bits 009E                       __stringdata 060A  
                      _ADCON2bits 009F                   RecordMode@count 003A                          _InitGPIO 0692  
                __size_of_InitADC 0019                  __size_of_InitCLK 0008                  __size_of_InitSPI 0012  
                __size_of_ReadSPI 000C          __end_of_compute_checksum 0542             SetupGPS@startSequence 005A  
                        _SetupGPS 0398                        ?_uart_xmit 0070                      ?_WriteBuffer 0070  
                __size_of___lwdiv 0037                  __size_of___lwmod 002F                          _WriteSPI 0753  
         _uart_write_message$1328 002D           _uart_write_message$1329 002F                        _ANSELAbits 018C  
                      _ANSELBbits 018D               ReadBuffer@read_data 0021                   ___lwdiv@divisor 0020  
                 ___lwdiv@counter 0027                          __ptext10 0121                          __ptext11 04A0  
                        __ptext20 0692                          __ptext12 0778                          __ptext21 07BD  
                        __ptext13 0753                        _T1GCONbits 0019                          __ptext22 06DD  
                        __ptext14 07A7                          __ptext15 06F6                          __ptext24 0726  
                        __ptext16 070E                          __ptext17 07C5                          __ptext18 0798  
                        __ptext19 0766                _uart_write_message 042A                  __size_of_sprintf 0106  
                        _gpsIndex 00DB                          _initUART 0789                     __size_of_main 003A  
             ?_uart_write_message 0028          __end_of_WriteOverheadSPI 0500                          main@argc 0066  
                        main@argv 0068              ??_uart_write_message 002A                        _INTCONbits 000B  
                     pic14e$flags 007E                          intlevel1 0000                         sprintf@ap 003A  
                       sprintf@sp 003B                  ___lwmod@dividend 002A                 __CFG_CLKOUTEN$OFF 0000  
                      _OSCCONbits 0099                       ??_uart_xmit 0020                          sprintf@c 0040  
                        sprintf@f 002E                   ___lwmod@divisor 0028                   ___lwmod@counter 002D  
                ??_ToggleSleepGPS 0020                       _SSPCON1bits 0215                        _WDTCONbits 0097  
                 _recordEndAdress 00D6            __size_ofi1_WriteBuffer 0017  
